import { getRGBA, nameToRGBA, TemplateActions, TemplatesService, TemplatesGuardService, FieldData, DocumentsService, AngularApiModule } from '@verdocs/sdk';
import { findIndex, remove, filter, find } from 'lodash';
import printJS from 'print-js';
import { Injectable, Inject, PLATFORM_ID, Injector, ViewEncapsulation, RendererFactory2, Component, InjectionToken, NgModule } from '@angular/core';
import { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';
import { MatSnackBar } from '@angular/material/snack-bar';
import { __awaiter } from 'tslib';
import { HttpRequest, HttpClient } from '@angular/common/http';
import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';
import { ReplaySubject, Subject, throwError, from, forkJoin, of, BehaviorSubject } from 'rxjs';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { ProfileModel, ProfileCollection } from '@verdocs/profiles';
import { MatDialogRef, MatDialog, MatDialogModule } from '@angular/material/dialog';
import { map, catchError, mergeMap, delay, filter as filter$1, switchMap } from 'rxjs/operators';
import { EventTrackerService } from '@verdocs/event-tracker';
import { v4 } from 'uuid';
import { Title, Meta } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
class DynamicField {
    /**
     * @param {?=} field_params
     */
    constructor(field_params = {}) {
        this.value = field_params.value;
        this.key = field_params.key || '';
        this.required = !!field_params.required;
        this.order = field_params.order === undefined ? 1 : field_params.order;
        this.controlType = field_params.controlType || '';
        this.validator = field_params.validator === undefined ? '' : field_params.validator;
        this.maxLength = field_params.maxLength == null ? null : field_params.maxLength;
        this.showCounter = field_params.showCounter === false ? false : field_params.showCounter;
        this.prepared = field_params.prepared;
        this.recipientRole = field_params.recipientRole;
        this.options = field_params.options;
        this.field_name = field_params.field_name;
        this.min_checked = field_params.min_checked;
        this.max_checked = field_params.max_checked;
        this.temp_sig = field_params.temp_sig;
        this.sig_id = field_params.sig_id;
        this.temp_int = field_params.temp_int;
        this.int_id = field_params.int_id;
        this.dirty = field_params.dirty;
        this.full_name = field_params.full_name;
        if (field_params.url) {
            this.url = field_params.url;
        }
        if (field_params.name) {
            this.name = field_params.name;
        }
    }
}
if (false) {
    /** @type {?} */
    DynamicField.prototype.value;
    /** @type {?} */
    DynamicField.prototype.key;
    /** @type {?} */
    DynamicField.prototype.required;
    /** @type {?} */
    DynamicField.prototype.order;
    /** @type {?} */
    DynamicField.prototype.controlType;
    /** @type {?} */
    DynamicField.prototype.validator;
    /** @type {?} */
    DynamicField.prototype.maxLength;
    /** @type {?} */
    DynamicField.prototype.showCounter;
    /** @type {?} */
    DynamicField.prototype.url;
    /** @type {?} */
    DynamicField.prototype.name;
    /** @type {?} */
    DynamicField.prototype.prepared;
    /** @type {?} */
    DynamicField.prototype.recipientRole;
    /** @type {?} */
    DynamicField.prototype.options;
    /** @type {?} */
    DynamicField.prototype.field_name;
    /** @type {?} */
    DynamicField.prototype.min_checked;
    /** @type {?} */
    DynamicField.prototype.max_checked;
    /** @type {?} */
    DynamicField.prototype.temp_sig;
    /** @type {?} */
    DynamicField.prototype.sig_id;
    /** @type {?} */
    DynamicField.prototype.temp_int;
    /** @type {?} */
    DynamicField.prototype.int_id;
    /** @type {?} */
    DynamicField.prototype.dirty;
    /** @type {?} */
    DynamicField.prototype.full_name;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} fields
 * @param {?} mode
 * @return {?}
 */
function buildFields(fields, mode) {
    /*
       * PDF 72 DPI
       * Width: 612px
       * Height: 792px
       * */
    /*
         * PDF 72 DPI
         * Width: 612px
         * Height: 792px
         * */
    /** @type {?} */
    const _fields = [];
    /** @type {?} */
    let order = 0;
    /** @type {?} */
    let role;
    switch (mode) {
        case 'signerview':
        case 'prepareview':
        case 'preview':
            role = 'recipient_role';
            break;
        case 'liveview':
            role = 'role_name';
            break;
        default:
            role = 'recipient_role';
            break;
    }
    /** @type {?} */
    let setting = 'setting';
    for (const fieldIndex in fields) {
        if (fields.hasOwnProperty(fieldIndex) && fields[fieldIndex]) {
            /** @type {?} */
            const field = fields[fieldIndex];
            /** @type {?} */
            let keyNameSuffix = '';
            if (!!field['settings']) {
                setting = 'settings';
            }
            ;
            switch (field.type.toLowerCase()) {
                case 'attachment':
                case 'payment':
                    field[setting]['width'] = 24;
                    field[setting]['height'] = 24;
                    break;
                case 'checkbox':
                case 'checkbox_group':
                case 'radio_button_group':
                    field[setting]['width'] = 13.5;
                    field[setting]['height'] = 13.5;
                    keyNameSuffix = field['optionId'] ? '-' + field['optionId'] : '';
                    break;
                case 'signature':
                    field[setting]['width'] = 82.63636363636;
                    field[setting]['height'] = 36;
                    break;
                case 'initial':
                    field[setting]['width'] = 82.63636363636;
                    field[setting]['height'] = 36;
                    break;
                default:
                    break;
            }
            /** @type {?} */
            const fieldValues = new DynamicField({
                key: field.name + keyNameSuffix,
                value: field[setting]['result'] || '',
                required: field.required,
                controlType: field.type,
                order: order++,
                validator: field.validator,
                showCounter: false,
                prepared: field.prepared || false,
                recipientRole: field[role],
                field_name: field.name,
                dirty: false
            });
            switch (field.type) {
                case 'attachment':
                    fieldValues.value = field[setting]['name'] ? field[setting]['name'] : '';
                    break;
                case 'checkbox':
                    fieldValues.value = field[setting]['result'] === false ? false : true;
                    break;
                case 'payment':
                    fieldValues.value = field[setting]['payment_id'] ? field[setting]['payment_id'] : '';
                    break;
                case 'checkbox_group':
                    fieldValues.value = field[setting]['checked'];
                    if (field.required || field[setting]['maximum_checked'] > 0) {
                        fieldValues['min_checked'] = field[setting]['minimum_checked'];
                        fieldValues['max_checked'] = field[setting]['maximum_checked'];
                    }
                    break;
                case 'radio_button_group':
                    fieldValues.value = field[setting]['selected'];
                    break;
                case 'dropdown':
                    fieldValues.value = field[setting]['value'];
                    fieldValues['options'] = field[setting]['options'];
                    break;
                default:
                    break;
            }
            ;
            if (field[setting]['url']) {
                fieldValues['url'] = field[setting]['url'];
                fieldValues['name'] = field[setting]['name'];
                fieldValues['value'] = field[setting]['name'];
            }
            if (fields[fieldIndex]) {
                _fields[fieldIndex] = fieldValues;
            }
        }
    }
    return _fields;
}
/**
 * @param {?} fields
 * @param {?} pageNum
 * @return {?}
 */
function getFieldsMap(fields, pageNum) {
    /** @type {?} */
    let fieldsMap = {};
    for (const fieldIndex in fields) {
        if (fields.hasOwnProperty(fieldIndex) && fields[fieldIndex]) {
            /** @type {?} */
            const field = fields[fieldIndex];
            /** @type {?} */
            let keyNameSuffix = '';
            switch (field.type.toLowerCase()) {
                case 'checkbox':
                case 'checkbox_group':
                case 'radio_button_group':
                    keyNameSuffix = field['optionId'] ? '-' + field['optionId'] : '';
                    break;
                default:
                    break;
            }
            fieldsMap[field.name + keyNameSuffix] = {
                field_name: field.name,
                keyNameSuffix: field['optionId'] ? '-' + field['optionId'] : null,
                option_id: field['optionId'],
                field_pageNum: pageNum,
                field_field_index: fieldIndex
            };
        }
    }
    return fieldsMap;
}
/**
 * @param {?} fields
 * @param {?} _fields
 * @param {?} mode
 * @param {?} browserType
 * @return {?}
 */
function updateElementStyles(fields, _fields, mode, browserType) {
    if (fields && _fields && fields.length === _fields.length) {
        for (let x = 0; x < _fields.length; x++) {
            /** @type {?} */
            let fieldIndex = findIndex(fields, { name: _fields[x].field_name });
            if (fieldIndex >= 0) {
                _fields[x]['initialStyle'] = getInputStyle(fields[fieldIndex], mode, browserType);
                if (_fields[x].controlType.toLowerCase() === 'checkbox' || _fields[x].controlType.toLowerCase() === 'checkbox_group' || _fields[x].controlType.toLowerCase() === 'radio_button_group') {
                    _fields[x]['checkboxStyle'] = generateCheckboxLabel(fields[fieldIndex].required);
                }
            }
        }
    }
    return _fields;
}
/**
 * @param {?} field
 * @param {?} mode
 * @param {?} browserType
 * @return {?}
 */
function getInputStyle(field, mode, browserType) {
    /** @type {?} */
    const fontSize = 11;
    /** @type {?} */
    let setting = 'setting';
    if (!!field['settings']) {
        setting = 'settings';
    }
    /** @type {?} */
    const inputStyle = {
        'height': '100%',
        'width': '100%',
        'background': 'none'
    };
    if ((field[setting] && field[setting].font_size) || field.type === 'date' || field.type === 'signature' || field.type === 'initial' || field.type === 'timestamp') {
        inputStyle['fontSize'] = fontSize + 'px';
        inputStyle['letterSpacing'] = '.3px !important';
    }
    if (field.type === 'dropdown') {
        inputStyle['fontSize'] = '10.8px';
        delete inputStyle.background;
    }
    if (field.type === 'textbox') {
        inputStyle['fontSize'] = fontSize + 'px';
        inputStyle['letterSpacing'] = getLetterSpacing(browserType) + 'px';
    }
    if (field['required']) {
        inputStyle['border'] = '1px solid #cc0000';
    }
    if (field['prepared'] && field['prepared'] === true && mode !== 'prepareview') {
        inputStyle['visibility'] = 'hidden';
    }
    if (field[setting] && field[setting].color) {
        inputStyle['color'] = field[setting].color;
    }
    if (field[setting] && field[setting].upperCase) {
        inputStyle['textTransform'] = 'uppercase';
    }
    if (field[setting] && field[setting].leading > 0) {
        inputStyle['lineHeight'] = `${rescale(1, field[setting].leading + .5)}px`;
    }
    else if (field.leading && field.leading > 0) {
        inputStyle['lineHeight'] = `${rescale(1, field.leading + .5)}px`;
    }
    return inputStyle;
}
/**
 * @param {?} required
 * @return {?}
 */
function generateCheckboxLabel(required) {
    /** @type {?} */
    const labelStyle = {
        position: 'absolute',
        top: 0,
        left: 0,
        cursor: 'pointer',
        height: `13.5px`,
        width: `13.5px`,
        backgroundColor: 'transparent',
        border: '1px solid #777'
    };
    if (required === true) {
        labelStyle['boxShadow'] = '0 0 0 1px #cc0000';
    }
    return labelStyle;
}
;
/**
 * @param {?} browserType
 * @return {?}
 */
function getLetterSpacing(browserType) {
    switch (browserType) {
        case 'opera':
            return -0.0018;
        case 'firefox':
            return -0.23594210526315787;
        case 'ie':
            return -0.0019;
        case 'edge':
            return -0.0019;
        case 'chrome':
            return -0.0018;
        case 'safari':
            return -0.0018;
        case 'blink':
            return -0.0018;
        default:
            return -0.0018;
    }
}
/**
 * @param {?} r
 * @param {?} n
 * @return {?}
 */
function rescale(r, n) {
    return r * n;
}
/**
 * @param {?} fields
 * @return {?}
 */
function prepareFieldsForSigner(fields) {
    /** @type {?} */
    let fieldsForCurrentSigner = new Array(fields.length);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} field
 * @return {?}
 */
function getDefaultHeight(field) {
    /** @type {?} */
    let height = 0;
    switch (field.type) {
        case 'signature':
        case 'initial':
            height = 36;
            break;
        case 'checkbox':
        case 'checkbox_group':
        case 'radio_button_group':
            height = 13.5;
            break;
        case 'attachment':
        case 'payment':
            height = 24;
            break;
        default:
            height = field.setting['height'] || 0;
            break;
    }
    return height;
}
/**
 * @param {?} field
 * @return {?}
 */
function getDefaultWidth(field) {
    /** @type {?} */
    let width = 0;
    switch (field.type) {
        case 'signature':
        case 'initial':
            width = 82.63636363636;
            break;
        case 'checkbox':
        case 'checkbox_group':
        case 'radio_button_group':
            width = 13.5;
            break;
        case 'attachment':
        case 'payment':
            width = 24;
            break;
        case 'date':
            width = 64;
            break;
        case 'dropdown':
            width = field.setting['width'] || 64;
            break;
        default:
            width = field.setting['width'] || 0;
            break;
    }
    return width;
}
/**
 * @param {?} y
 * @param {?} fieldHeight
 * @param {?} iTextHeight
 * @param {?} yRatio
 * @return {?}
 */
function getRTop(y, fieldHeight, iTextHeight, yRatio) {
    return iTextHeight - ((y + fieldHeight) * yRatio);
}
/**
 * @param {?} x
 * @param {?} ratio
 * @return {?}
 */
function getRLeft(x, ratio) {
    return x * ratio;
}
/**
 * @param {?} y
 * @param {?} ratio
 * @return {?}
 */
function getRValue(y, ratio) {
    return y * ratio;
}
/**
 * @param {?} field
 * @return {?}
 */
function getUIFieldStyling(field) {
    /** @type {?} */
    const height = getDefaultHeight(field);
    /** @type {?} */
    const style = {
        left: field.setting.x + 'px',
        bottom: field.setting.y + 'px',
        height: '100%',
        width: '100%'
    };
    switch (field.type) {
        case 'textbox':
        case 'date':
        case 'timestamp':
        case 'placeholder':
        case 'dropdown':
            style['maxHeight'] = height + 'px';
            style['maxWidth'] = field.setting.width + 'px';
            break;
        case 'checkbox':
        case 'checkbox_group':
        case 'radio_button_group':
            style['maxHeight'] = 13.5 + 'px';
            style['maxWidth'] = 13.5 + 'px';
            break;
        case 'attachment':
        case 'payment':
            style['maxHeight'] = 24 + 'px';
            style['maxWidth'] = 24 + 'px';
            break;
        case 'signature':
        case 'initial':
            style['maxHeight'] = 36 + 'px';
            style['maxWidth'] = 82.63636363636 + 'px';
            style['line-height'] = 36 + 'px';
            break;
        default:
            break;
    }
    return style;
}
/**
 * @param {?} image
 * @return {?}
 */
function blobToBase64(image) {
    /** @type {?} */
    const fileReader = new FileReader();
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    (resolve, reject) => {
        fileReader.onerror = (/**
         * @return {?}
         */
        () => {
            reject(new DOMException("Problem reading blob."));
        });
        fileReader.onload = (/**
         * @return {?}
         */
        () => {
            resolve(fileReader.result);
        });
        fileReader.readAsDataURL(image);
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} pages
 * @param {?} pdfPages
 * @return {?}
 */
function setRatio(pages, pdfPages) {
    for (let i = 0; i < pages.length; i++) {
        for (let j = 0; j < pages[i].fields.length; j++) {
            if (pages[i].fields[j]) {
                pages[i].fields[j]['ratio'] = {
                    x: pdfPages[i].xRatio,
                    y: pdfPages[i].yRatio
                };
            }
        }
    }
    return pages;
}
/**
 * @param {?} pages
 * @param {?} roles
 * @param {?} pdfPages
 * @param {?} browserType
 * @return {?}
 */
function constructPages(pages, roles, pdfPages, browserType) {
    if (pages && pages.length > 0) {
        /** @type {?} */
        let fieldPages = new Array(pages.length);
        for (let i = 0; i < pages.length; i++) {
            fieldPages[i] = { fields: [] };
            for (let j = 0; j < pages[i].fields.length; j++) {
                if (pages[i].fields[j]['setting'] && pages[i].fields[j]['setting']['options'] &&
                    pages[i].fields[j]['setting']['options'].length > 0 && (pages[i].fields[j]['type'] === 'checkbox_group') ||
                    pages[i].fields[j]['type'] === 'radio_button_group') {
                    /** @type {?} */
                    const groupFields = constructGroupFields(pages, i, j, roles, pdfPages, fieldPages, browserType);
                    fieldPages[i].fields.concat(groupFields);
                }
                else {
                    /** @type {?} */
                    const fieldCopy = Object.assign({}, pages[i].fields[j]);
                    /** @type {?} */
                    const copyIndex = findIndex(fieldPages[i].fields, { name: fieldCopy.name });
                    fieldCopy['originalIndex'] = j;
                    if (fieldCopy.type !== 'checkbox_group' && fieldCopy.type !== 'radio_button_group') {
                        fieldCopy['initialStyle'] = generateInitialStyle(fieldCopy, roles, browserType);
                        fieldCopy['style'] = generateStyle(fieldCopy, pdfPages);
                    }
                    if (fieldCopy.type === 'checkbox' || fieldCopy.type === 'checkbox_group' || fieldCopy.type === 'radio_button_group') {
                        fieldCopy['checkboxStyle'] = generateGroupLabel(i, fieldCopy.role_name, roles, pdfPages);
                    }
                    if (copyIndex < 0) {
                        fieldPages[i].fields[fieldPages[i].fields.length] = fieldCopy;
                    }
                }
            }
        }
        return fieldPages;
    }
    else {
        return [];
    }
}
/**
 * @param {?} pages
 * @param {?} i
 * @param {?} j
 * @param {?} roles
 * @param {?} pdfPages
 * @param {?} fieldPages
 * @param {?} browserType
 * @return {?}
 */
function constructGroupFields(pages, i, j, roles, pdfPages, fieldPages, browserType) {
    /** @type {?} */
    let k = 0;
    /** @type {?} */
    const optionsLength = pages[i].fields[j]['setting']['options'].length;
    while (k < optionsLength) {
        /** @type {?} */
        const fieldCopy = Object.assign({}, pages[i].fields[j]);
        /** @type {?} */
        const options = pages[i].fields[j]['setting']['options'][k];
        fieldCopy.setting['x'] = options.x;
        fieldCopy.setting['y'] = options.y;
        if (fieldCopy.type === 'checkbox_group') {
            fieldCopy.setting['checked'] = options.checked;
        }
        else {
            fieldCopy.setting['selected'] = options.selected;
        }
        fieldCopy['initialStyle'] = generateInitialStyle(fieldCopy, roles, browserType);
        fieldCopy['style'] = generateStyle(fieldCopy, pdfPages);
        fieldCopy['checkboxStyle'] = generateGroupLabel(i, fieldCopy.role_name, roles, pdfPages);
        fieldCopy['originalIndex'] = j;
        fieldCopy['optionIndex'] = k;
        fieldCopy['optionId'] = options.id;
        /** @type {?} */
        const copyIndex = findIndex(fieldPages[i].fields, { optionIndex: fieldCopy.optionIndex, name: fieldCopy.name });
        if (copyIndex < 0) {
            fieldPages[i].fields[fieldPages[i].fields.length] = fieldCopy;
        }
        k++;
    }
    return fieldPages;
}
/**
 * @param {?} field
 * @param {?} roles
 * @param {?} browserType
 * @return {?}
 */
function generateInitialStyle(field, roles, browserType) {
    /** @type {?} */
    const fontSize = 9.5;
    /** @type {?} */
    const setting = field.setting;
    /** @type {?} */
    const role_name = field.role_name;
    /** @type {?} */
    const initialStyle = {
        height: '100%',
        width: '100%',
        backgroundColor: getRoleColor(role_name, roles),
        letterSpacing: null,
        fontSize: null
    };
    field['initialStyle'] = initialStyle;
    switch (field.type) {
        case 'textbox':
        case 'textarea':
            field['initialStyle']['letterSpacing'] = convertToUIRatio(getLetterSpacing(browserType), field['ratio'].x) + 'px';
        case 'signature':
        case 'initial':
        case 'date':
        case 'dropdown':
            field['initialStyle']['fontSize'] = convertToUIRatio(fontSize, field['ratio'].x) + 'px';
            break;
        case 'timestamp':
            field['initialStyle']['fontSize'] = convertToUIRatio(8.5, field['ratio'].x) + 'px';
            break;
        case 'attachment':
        case 'payment':
            field['initialStyle']['height'] = '24px';
            field['initialStyle']['mat-icon'] = {
                position: 'absolute',
                top: 0,
                left: 0,
                height: '24px',
                width: '24px',
                lineHeight: '24px',
                fontSize: '18px'
            };
            break;
        default:
            break;
    }
    if (setting.leading && setting.leading > 0) {
        field.initialStyle['line-height'] = convertToUIRatio(setting.leading + .11395, field['ratio'].y) + 'px';
    }
    return field.initialStyle;
}
/**
 * @param {?} field
 * @param {?} pdfPages
 * @return {?}
 */
function generateStyle(field, pdfPages) {
    return getUIFieldStyling(field);
}
/**
 * @param {?} i
 * @param {?} role_name
 * @param {?} roles
 * @param {?} pdfPages
 * @return {?}
 */
function generateGroupLabel(i, role_name, roles, pdfPages) {
    return {
        position: 'absolute',
        top: 0,
        left: 0,
        height: '13.5px',
        width: '13.5px',
        backgroundColor: getRoleColor(role_name, roles),
        border: '2px solid #777'
    };
}
/**
 * @param {?} name
 * @param {?} roles
 * @param {?=} index
 * @return {?}
 */
function getRoleColor(name, roles, index) {
    if (index) {
        return getRGBA(index);
    }
    else if (roles && roles.length > 0) {
        index = findIndex(roles, { name: name });
        if (index >= 0) {
            return roles[index].rgba ? roles[index].rgba : getRGBA(index);
        }
        else {
            return nameToRGBA(name);
        }
    }
    else {
        return nameToRGBA(name);
    }
}
/**
 * @param {?} value
 * @param {?} ratio
 * @return {?}
 */
function convertToUIRatio(value, ratio) {
    return value * ratio;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} scrollTop
 * @param {?} pageTop
 * @param {?} pageHeight
 * @return {?}
 */
function isInView(scrollTop, pageTop, pageHeight) {
    if (typeof scrollTop === 'undefined') {
        return null;
    }
    if (window) {
        /** @type {?} */
        let headerHeight = 112;
        /** @type {?} */
        const viewportWidth = window.innerWidth;
        if (viewportWidth > 600) {
            headerHeight = 128;
        }
        /** @type {?} */
        const viewportHeight = window.innerHeight - headerHeight;
        return topOfPageIsInView(scrollTop, pageTop, viewportHeight) ||
            middleOfPageIsInView(scrollTop, pageTop, pageHeight, viewportHeight) ||
            bottomOfPageIsInView(scrollTop, pageTop, pageHeight, viewportHeight);
    }
}
/**
 * @param {?} scrollTop
 * @param {?} pageTop
 * @param {?} viewportHeight
 * @return {?}
 */
function topOfPageIsInView(scrollTop, pageTop, viewportHeight) {
    return pageTop > scrollTop && pageTop < scrollTop + viewportHeight;
}
/**
 * @param {?} scrollTop
 * @param {?} pageTop
 * @param {?} pageHeight
 * @param {?} viewportHeight
 * @return {?}
 */
function middleOfPageIsInView(scrollTop, pageTop, pageHeight, viewportHeight) {
    /** @type {?} */
    const viewportBottom = scrollTop + viewportHeight;
    /** @type {?} */
    const pageBottom = pageTop + pageHeight;
    return scrollTop > pageTop && viewportBottom < pageBottom;
}
/**
 * @param {?} scrollTop
 * @param {?} pageTop
 * @param {?} pageHeight
 * @param {?} viewportHeight
 * @return {?}
 */
function bottomOfPageIsInView(scrollTop, pageTop, pageHeight, viewportHeight) {
    /** @type {?} */
    const viewportBottom = scrollTop + viewportHeight;
    /** @type {?} */
    const pageBottom = pageTop + pageHeight;
    return viewportBottom > pageBottom && scrollTop < pageBottom;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} type
 * @return {?}
 */
function timePeriod(type) {
    /** @type {?} */
    let endDate = new Date().getTime();
    /** @type {?} */
    const today = new Date();
    /** @type {?} */
    const month = today.getMonth();
    /** @type {?} */
    const year = today.getFullYear();
    /** @type {?} */
    let startDate = null;
    switch (type) {
        case '30d':
            startDate = endDate - (60 * 60 * 24 * 30 * 1000);
            break;
        case '60d':
            startDate = endDate - (60 * 60 * 24 * 60 * 1000);
            break;
        case '6m':
            startDate = endDate - (60 * 60 * 24 * 30 * 6 * 1000);
            break;
        case 'this_month':
            startDate = new Date(year, month, 1).getTime();
            break;
        case 'last_month':
            startDate = new Date(year, month - 1, 1).getTime();
            endDate = new Date(year, month, 0).getTime();
            break;
        case 'this_year':
            startDate = new Date(year, 0, 1);
            break;
        case 'all_time':
            startDate = null;
            endDate = null;
            break;
        default:
            startDate = null;
            endDate = null;
            break;
    }
    if (startDate == null && endDate == null) {
        return null;
    }
    return (/** @type {?} */ ({
        start_time: new Date(startDate).toISOString(),
        end_time: new Date(endDate).toISOString()
    }));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} string
 * @return {?}
 */
function regParse(string) {
    return JSON.parse(string, (/**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        let prefix;
        if (typeof value !== 'string') {
            return value;
        }
        if (value.length < 8) {
            return value;
        }
        prefix = value.substring(0, 8);
        if (prefix === 'function') {
            return eval('(' + value + ')');
        }
        if (prefix === '_PxEgEr_') {
            return eval(value.slice(8));
        }
        if (prefix === '_NuFrRa_') {
            return eval(value.slice(8));
        }
        return value;
    }));
}
/**
 * @param {?} dataUrl
 * @param {?=} type
 * @return {?}
 */
function dataURLtoBlob(dataUrl, type = 'image/png') {
    /** @type {?} */
    const arr = dataUrl.split(',');
    /** @type {?} */
    const 
    // mime = arr[0].match(/:(.*?);/)[1],
    bstr = atob(arr[1]);
    /** @type {?} */
    let n = bstr.length;
    /** @type {?} */
    const u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: type });
}
/**
 * @param {?} pdfUrl
 * @return {?}
 */
function printPdfUrl(pdfUrl) {
    if (typeof (pdfUrl) === 'string') {
        printJS(pdfUrl);
    }
    else {
        console.error('pdfUrl should be provided, instead received: ', pdfUrl);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SnackbarService {
    /**
     * @param {?} snackbar
     * @param {?} platform
     */
    constructor(snackbar, platform) {
        this.snackbar = snackbar;
        this.platform = platform;
    }
    /**
     * @param {?=} duration
     * @param {?=} position
     * @return {?}
     */
    initConfig(duration, position) {
        if ((isPlatformBrowser(this.platform))) {
            /** @type {?} */
            let snackbarConfig;
            if (window && window.innerWidth >= 920) {
                snackbarConfig = {
                    verticalPosition: position ? position : 'bottom',
                    horizontalPosition: 'left',
                    duration: duration ? duration : 5000
                };
            }
            else {
                snackbarConfig = {
                    verticalPosition: position ? position : 'top',
                    duration: duration ? duration : 5000
                };
            }
            return snackbarConfig;
        }
    }
    /**
     * @param {?} message
     * @param {?=} action
     * @param {?=} config
     * @return {?}
     */
    open(message, action, config) {
        return this.snackbar.open(message, action ? action : undefined, config ? config : this.initConfig());
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.snackbar.dismiss();
    }
}
SnackbarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SnackbarService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SnackbarService.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    SnackbarService.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BrowserToiTextService {
    /**
     * @return {?}
     */
    detectBrowser() {
        //noinspection TypeScriptUnresolvedVariable
        /** @type {?} */
        let isFirefox = false;
        if ('InstallTrigger' in window) {
            isFirefox = true;
        }
        /** @type {?} */
        const isOpera = (!!window['opr'] && !!window['opr'].addons) || !!window['opera'] || navigator.userAgent.indexOf(' OPR/') >= 0;
        /** @type {?} */
        const isSafari = /constructor/i.test(window['HTMLElement']) || ((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.toString() === "[object SafariRemoteNotification]"; }))(!window['safari'] || (window['safari'] && window['safari'].pushNotification));
        /** @type {?} */
        const isIE = /*@cc_on!@*/ false || !!document['documentMode'];
        /** @type {?} */
        const isEdge = !isIE && !!window['StyleMedia'];
        /** @type {?} */
        const isChrome = !!window['chrome'] && !!window['chrome'].webstore;
        /** @type {?} */
        const isBlink = (isChrome || isOpera) && !!window['CSS'];
        if (isOpera) {
            return 'opera';
        }
        else if (isFirefox) {
            return 'firefox';
        }
        else if (isIE) {
            return 'ie';
        }
        else if (isEdge) {
            return 'edge';
        }
        else if (isChrome) {
            return 'chrome';
        }
        else if (isBlink) {
            return 'blink';
        }
        else if (isSafari) {
            return 'safari';
        }
        return 'unknown';
    }
    /**
     * @return {?}
     */
    getLetterSpacing() {
        /** @type {?} */
        const browserType = this.detectBrowser();
        switch (browserType) {
            case 'opera':
                return -0.0018;
            case 'firefox':
                return -0.23594210526315787;
            case 'ie':
                return -0.0019;
            case 'edge':
                return -0.0019;
            case 'chrome':
                return -0.0018;
            case 'safari':
                return -0.0018;
            case 'blink':
                return -0.0018;
            default:
                return -0.0018;
        }
    }
}
BrowserToiTextService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BuilderDataService {
    /**
     * @param {?} http
     * @param {?} router
     * @param {?} templatesService
     * @param {?} templateGuard
     * @param {?} snackbarService
     * @param {?} eventTracker
     * @param {?} injector
     */
    constructor(http, router, templatesService, templateGuard, snackbarService, eventTracker, injector) {
        this.http = http;
        this.router = router;
        this.templatesService = templatesService;
        this.templateGuard = templateGuard;
        this.snackbarService = snackbarService;
        this.eventTracker = eventTracker;
        this.injector = injector;
        this.recipients = [];
        this.roles = [];
        this.templateSubject = new ReplaySubject(1, 500);
        this.hasFields = false;
        this.templateNameSubject = new ReplaySubject(1, 500);
        this.templatePagesSubject = new ReplaySubject(1, 500);
        this.recipientsSubject = new ReplaySubject();
        this.activeRecipientSubject = new ReplaySubject();
        this.scrollInfoSubject = new ReplaySubject();
        this.screenInfoSubject = new ReplaySubject();
        this.newTypeSubject = new Subject();
        this.newOptionSubject = new ReplaySubject(1, 100);
        this.duplicateFieldSubject = new ReplaySubject();
        this.saveStatusSubject = new ReplaySubject();
        this.renderedSubject = new ReplaySubject();
        this.activeFieldIndexSubject = new ReplaySubject(1, 100);
        this.numberOfRolesSubject = new ReplaySubject();
        this.numberOfSequenceSubject = new ReplaySubject();
        this.hasFieldsSubject = new ReplaySubject();
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        /* Use NGRX to do the subscriptions */
        this.templateSubject.subscribe((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            this.template = template;
            if (template && template.name) {
                this.templateNameSubject.next(template.name);
            }
        }));
        this.templateNameSubject.subscribe((/**
         * @param {?} name
         * @return {?}
         */
        name => {
            this.templateName = name;
        }));
        /* Remove above after refactoring */
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    createTemplate(template_body) {
        return this.http
            .post(this.rForm_backend_url + '/templates', template_body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.templateSubject.next(res);
            this.recipientsSubject.next([]);
            return res;
        })));
    }
    /**
     * @return {?}
     */
    updateLocalTemplateData() {
        this.templateName = this.template.name;
        this.templateNameSubject.next(this.templateName);
        this.templatePages = this.template.pages.length;
        this.templatePagesSubject.next(this.templatePages);
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    updateTemplate(template_body) {
        return this.templatesService.updateTemplateObservable(template_body.id, template_body).pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        template => template)));
    }
    /**
     * @param {?} template
     * @param {?} name
     * @return {?}
     */
    updateTemplateName(template, name) {
        if (template && template.id) {
            return this.templatesService.updateTemplateObservable(template.id, { name: name })
                .pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                template.name = res.name;
                this.updateLocalTemplate(template);
                this.saveStatusSubject.next('saved');
                this.createSnackBar('Name Changed to: ' + name);
                return res.name;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.saveStatusSubject.next('Failed to save');
                this.createSnackBar('Failed to change Template name');
                return err;
            })));
        }
        else {
            this.templateNameSubject.next(name);
            this.saveStatusSubject.next('Name will be updated');
        }
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplateObservable(templateId) {
        return this.templatesService.getTemplateObservable(templateId);
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplate(templateId) {
        return this.templatesService.getTemplate(templateId).toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            this.updateLocalTemplate(template);
            this.recipients = this.sortRoles(this.template);
            this.template.roles = this.recipients;
            this.roles = this.recipients;
            this.recipientsSubject.next(this.recipients);
            this.activeRecipientSubject.next(this.recipients[0]);
            return this.template;
        }));
    }
    /**
     * @return {?}
     */
    watchForUpdatedTemplate() {
        return this.templateSubject.pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        template => template)));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    updateLocalTemplate(template) {
        if (template) {
            this.template = template;
            if (this.template && this.template.pages) {
                this.template.pages = this.template.pages.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sequence - b.sequence;
                }));
            }
            if (this.template) {
                this.updateLocalTemplateData();
                this.checkForFields(this.template.roles);
            }
            this.recipientsSubject.next(this.template.roles.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sequence - b.sequence;
            })));
            this.templateSubject.next(this.template);
        }
        else {
            this.templateNameSubject.next(null);
            this.templatePagesSubject.next(null);
            this.numberOfRolesSubject.next(null);
            this.numberOfSequenceSubject.next(null);
            this.hasFieldsSubject.next(false);
        }
    }
    /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    uploadTemplateDocument(file, template) {
        /** @type {?} */
        const formdata = new FormData();
        formdata.append('document', file, file.name);
        /** @type {?} */
        const req = new HttpRequest('POST', this.rForm_backend_url + '/templates/' + template.id + '/documents', formdata, {
            reportProgress: true
        });
        return this.http.request(req)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return throwError(err);
        })));
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplateDocument(templateId) {
        this.templateDoc = this.templatesService.getAllTemplateDocumentsObservable(templateId).pipe(map((/**
         * @param {?} docs
         * @return {?}
         */
        (docs) => {
            this.templateDoc = docs[0];
            return this.templateDoc;
        })));
        return this.templateDoc;
    }
    /**
     * @param {?} templateId
     * @param {?} templateDoc
     * @return {?}
     */
    getTemplateDocumentFile(templateId, templateDoc) {
        if (templateId && templateDoc) {
            return this.templatesService.getTemplateDocumentPDFObservable(templateId, templateDoc).pipe(map((/**
             * @param {?} pdf
             * @return {?}
             */
            pdf => {
                /** @type {?} */
                const pdfUrl = URL.createObjectURL(pdf);
                return pdfUrl;
            })));
        }
    }
    /**
     * @param {?} templateDocument
     * @return {?}
     */
    setTemplateDocument(templateDocument) {
        this.templateDoc = templateDocument;
    }
    /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePage(document, pageNum, templateId) {
        /** @type {?} */
        const body = {
            sequence: pageNum,
            page_number: pageNum,
            document_id: document.id
        };
        return this.http.post(this.rForm_backend_url + `/templates/${templateId}/pages`, body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return throwError(err);
        })));
    }
    /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePages(document, pageNums, templateId) {
        return from(pageNums)
            .pipe(mergeMap((/**
         * @param {?} pageNum
         * @return {?}
         */
        pageNum => {
            /** @type {?} */
            const page = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return (/** @type {?} */ (this.http.post(this.rForm_backend_url + `/templates/${templateId}/pages`, page).pipe(delay(200))));
        })));
    }
    /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    deleteTemplateField(template, fieldName, i, j) {
        return this.http
            .delete(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + fieldName.trim())
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: fieldName });
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
            if (roleIndex > -1) {
                /** @type {?} */
                const roleFieldIndex = findIndex(template.roles[roleIndex].fields, { name: fieldName });
                if (roleFieldIndex > -1) {
                    template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                }
            }
            template.pages[i].fields.splice(fieldIndex, 1);
            this.updateLocalTemplate(template);
            this.saveStatusSubject.next('saved');
            this.checkForFields(template.roles);
            return template;
        })));
    }
    /**
     * @param {?} fieldNames
     * @param {?} template
     * @return {?}
     */
    deleteTemplateFields(fieldNames, template) {
        if (fieldNames && fieldNames.length > 0) {
            /** @type {?} */
            const pages = template.pages;
            for (const fieldName of fieldNames) {
                for (let x = 0; x < pages.length; x++) {
                    /** @type {?} */
                    const fieldIndex = findIndex(pages[x].fields, { name: fieldName });
                    if (fieldIndex >= 0) {
                        template.pages[x].fields.splice(fieldIndex, 1);
                    }
                }
            }
            this.checkForFields(template.roles);
        }
    }
    /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    addTemplateField(newField, i, j, template) {
        newField.name = newField.name.trim();
        return this.http
            .post(this.rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field added`,
                label: `document id: ${newField.template_id}`
            });
            template.pages[i].fields[j] = field;
            this.checkForFields(template.roles);
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template.roles[roleIndex]['fields'].push(field);
            }
            this.templateSubject.next(template);
            return template;
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplateOwnerInfo(id) {
        return this.templatesService.getTemplateOwnerInfo(id);
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateTemplateField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field updated`,
                label: `document id: ${template.id}`
            });
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            if (field.page_sequence - 1 !== i) {
                template.pages[i].fields.splice(fieldIndex, 1);
                template.pages[field.page_sequence - 1].fields.push(field);
            }
            else {
                template.pages[i].fields[fieldIndex] = field;
            }
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template = this.updateRoleField(template, field, roleIndex, oldName);
            }
            this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    updateRoleField(template, updated_field, role_index, old_name) {
        /** @type {?} */
        const field_index = findIndex(template.roles[role_index].fields, { name: old_name });
        if (field_index >= 0) {
            template.roles[role_index].fields[field_index] = updated_field;
        }
        else {
            template.roles[role_index].fields.push(updated_field);
        }
        return template;
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateDropdownField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            template.pages[i].fields[fieldIndex] = field;
            this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} template_id
     * @param {?} sequence_number
     * @return {?}
     */
    deleteSequence(template_id, sequence_number) {
        return this.templatesService.deleteSequence(template_id, sequence_number);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    prepareFieldDuplication(field) {
        this.duplicateFieldSubject.next(field);
    }
    ;
    /**
     * @param {?} roles
     * @return {?}
     */
    checkForFields(roles) {
        /** @type {?} */
        let hasFields = true;
        if (roles && roles.length > 0) {
            for (let role of roles) {
                if (role && role.type === 'signer' && role.fields.length === 0) {
                    hasFields = false;
                }
            }
        }
        else {
            hasFields = false;
        }
        this.hasFields = hasFields;
        this.hasFieldsSubject.next(this.hasFields);
    }
    /**
     * @param {?} title
     * @param {?=} buttonTitle
     * @return {?}
     */
    createSnackBar(title, buttonTitle = 'OK') {
        //   let snackbarConfig: MatSnackBarConfig
        //   if (window.innerWidth >= 920) {
        //     snackbarConfig = {
        //       verticalPosition: 'bottom',
        //       horizontalPosition: 'left',
        //       duration: 5000
        //     }
        //   } else {
        //     snackbarConfig = {
        //       verticalPosition: 'top',
        //       duration: 5000
        //     }
        //   }
        //   this.snackbar.open(title, buttonTitle, snackbarConfig);
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editDocsUrl(templateId) {
        /** @type {?} */
        const editDocsPageUrl = `/builder/${templateId}/docs`;
        return editDocsPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editRolesUrl(templateId) {
        /** @type {?} */
        const editRolesPageUrl = `/builder/${templateId}/roles`;
        return editRolesPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editTemplateUrl(templateId) {
        /** @type {?} */
        const editPageUrl = `/builder/${templateId}/fields`;
        return editPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    previewTemplateUrl(templateId) {
        /** @type {?} */
        const reviewTemplateUrl = `/document/${templateId}`;
        return reviewTemplateUrl;
    }
    /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    addFieldRole(templateId, fieldId, roleId, i, j) {
        /** @type {?} */
        const fieldRoleInfo = JSON.stringify({
            field_id: fieldId,
            role_id: roleId
        });
        return this.http
            .post(this.rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
         * @param {?} fieldRole
         * @return {?}
         */
        fieldRole => {
            return fieldRole;
        }));
    }
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    addRole(role, template) {
        /** @type {?} */
        const templateBackend = this.rForm_backend_url + '/templates/' + template.id + '/roles';
        this.roles = [];
        this.roles = this.roles.concat(role);
        /** @type {?} */
        const roleRequests = [];
        this.roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            roleRequests.push(this.http.post(templateBackend, role));
        }));
        if (this.roles && this.roles.length > 0) {
            return forkJoin(roleRequests).pipe(map((/**
             * @param {?} savedRoles
             * @return {?}
             */
            savedRoles => {
                savedRoles.concat((/** @type {?} */ (savedRoles)));
                if (!template['roles']) {
                    template['roles'] = (/** @type {?} */ ([]));
                }
                /** @type {?} */
                const savedRolesWithFields = savedRoles.map((/**
                 * @param {?} newRole
                 * @return {?}
                 */
                newRole => {
                    newRole['fields'] = [];
                    return newRole;
                }));
                template['roles'] = template['roles'].concat(savedRolesWithFields);
                this.recipients = this.sortRoles(template);
                this.roles = this.recipients;
                this.templateSubject.next(template);
                this.recipientsSubject.next(this.recipients);
                this.recipients;
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        }
        else {
            return of(template);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    addCheckboxGroup(field) {
        this.newOptionSubject.next({
            type: 'checkbox_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    addRadioGroup(field) {
        this.newOptionSubject.next({
            type: 'radio_button_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    getRolesInSequence(roles) {
        /** @type {?} */
        const rolesInSequence = [];
        for (let roleIndex = 0; roleIndex < roles.length; roleIndex++) {
            /** @type {?} */
            const sequenceIndex = roles[roleIndex]['sequence'] - 1;
            /** @type {?} */
            const role = Object.assign({}, roles[roleIndex]);
            role['style'] = {
                backgroundColor: `${this.getRoleColor(role.name, roleIndex)}`
            };
            if (!rolesInSequence[sequenceIndex]) {
                rolesInSequence[sequenceIndex] = [role];
            }
            else {
                rolesInSequence[sequenceIndex].push(role);
            }
        }
        this.numberOfSequenceSubject.next(rolesInSequence.length);
        this.numberOfRolesSubject.next(roles.length);
        return rolesInSequence;
    }
    /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    deleteRole(roleName, template) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
            .toPromise()
            .then((/**
         * @return {?}
         */
        () => {
            remove(template.roles, (/**
             * @param {?} role
             * @return {?}
             */
            (role) => {
                this.recipients = this.sortRoles(template);
                if (role.name === roleName) {
                    /** @type {?} */
                    const fields = role.fields;
                    /** @type {?} */
                    const fieldNames = [];
                    for (const field of fields) {
                        fieldNames.push(field.name);
                    }
                    this.deleteTemplateFields(fieldNames, template);
                }
                this.templateSubject.next(template);
                this.recipientsSubject.next(this.recipients);
                return role.name === roleName;
            }));
        }));
    }
    /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    deleteRoles(roleNames, template) {
        /** @type {?} */
        const deleteCalls = [];
        roleNames.forEach((/**
         * @param {?} role_name
         * @return {?}
         */
        role_name => {
            template = Object.assign({}, template, { roles: template.roles.filter((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => role.name !== role_name)) });
            deleteCalls.push(this.http.delete(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
        }));
        return forkJoin(deleteCalls).pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            console.error('Couldn\'t delete all the roles');
            return err;
        })));
    }
    /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    updateRoles(roles, template) {
        /** @type {?} */
        const updateCalls = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            /** @type {?} */
            const body = {
                template_id: template.id,
                name: role.name.trim(),
                full_name: role.full_name,
                email: role.email,
                sequence: role.sequence,
                type: role.type,
                delegator: role.delegator,
                message: role.message,
                phone: role.phone
            };
            /** @type {?} */
            const role_index = findIndex(template.roles, { name: role.old_name });
            if (role_index >= 0) {
                template.roles[role_index] = Object.assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
            }
            this.eventTracker.createEvent({
                category: 'document',
                action: 'document role updated',
                label: `document id: ${template.id}`
            });
            updateCalls.push(this.http.put(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
        }));
        return forkJoin(updateCalls)
            .pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            console.error('Couldn\'t save all the roles');
            return err;
        })));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    sortRoles(template) {
        if (template.roles.length < 1) {
            return [];
        }
        /** @type {?} */
        const roles = template.roles.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.sequence === b.sequence) {
                return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0;
            }
            return a.sequence - b.sequence;
        }));
        for (let x = 0; x < roles.length; x++) {
            roles[x]['rgba'] = getRGBA(x);
        }
        template.roles = roles;
        return roles;
    }
    /**
     * @param {?} name
     * @param {?=} index
     * @param {?=} template
     * @return {?}
     */
    getRoleColor(name, index, template) {
        if (index !== null && index > -1) {
            return getRGBA(index);
        }
        else if (template) {
            if (template.roles && template.roles.length > 0) {
                index = findIndex(template.roles, { name: name });
                if (index >= 0) {
                    return template.roles[index].rgba ? template.roles[index].rgba : getRGBA(index);
                }
            }
            else {
                return nameToRGBA(name);
            }
        }
        else {
            return nameToRGBA(name);
        }
    }
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    updateFullName(role, template) {
        for (let i = 0; i < template.pages.length; i++) {
            if (template.pages[i].fields.length > 0) {
                for (let j = 0; j < template.pages[i].fields.length; j++) {
                    if (template.pages[i].fields[j].type === 'placeholder' && template.pages[i].fields[j].setting['type'] === 'full_name') {
                        if (template.pages[i].fields[j].setting['result'] !== role.full_name &&
                            template.pages[i].fields[j].role_name === role.name) {
                            template.pages[i].fields[j].setting['result'] = role.full_name;
                            /** @type {?} */
                            const updatedField = Object.assign({}, template.pages[i].fields[j]);
                            this.updateTemplateField(template, updatedField, updatedField.name, i, j).toPromise().then((/**
                             * @return {?}
                             */
                            () => {
                                this.templateSubject.next(template);
                            }));
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} activeFieldIndex
     * @return {?}
     */
    setActiveFieldIndex(activeFieldIndex) {
        this.activeFieldIndex = activeFieldIndex;
        this.activeFieldIndexSubject.next(this.activeFieldIndex);
    }
    /**
     * @param {?} template
     * @return {?}
     */
    autoAddSigner(template) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                /** @type {?} */
                const recipients = yield this.addRole((/** @type {?} */ ({ name: 'Signer 1', type: 'signer', sequence: 1 })), template).toPromise();
                this.activeRecipientSubject.next(recipients[0]);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    resolve();
                }), 500);
            })));
        });
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openTemplate(template) {
        if (this.canUserPreview(template)) {
            this.router.navigate([`document/${template.id}`]);
        }
        else if (this.canUserEdit(template)) {
            this.router.navigate([`builder/${template.id}/fields`]);
        }
        else {
            this.snackbarService.open(`Template is in build mode, and not ready for use.  Please check back soon.`);
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserEdit(template) {
        /** @type {?} */
        const response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserPreview(template) {
        /** @type {?} */
        const hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        let canPreview;
        /** @type {?} */
        const signers = filter(template.roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        for (const signer of signers) {
            canPreview = signer['fields'] && signer['fields'].length > 0;
        }
        return hasPermission && canPreview;
    }
}
BuilderDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BuilderDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: Router },
    { type: TemplatesService },
    { type: TemplatesGuardService },
    { type: SnackbarService },
    { type: EventTrackerService },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.recipients;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.template;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateDoc;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatePages;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateName;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.activeFieldIndex;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.roles;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateId;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.hasFields;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.rForm_backend_url;
    /** @type {?} */
    BuilderDataService.prototype.templateNameSubject;
    /** @type {?} */
    BuilderDataService.prototype.templatePagesSubject;
    /** @type {?} */
    BuilderDataService.prototype.recipientsSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeRecipientSubject;
    /** @type {?} */
    BuilderDataService.prototype.scrollInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.screenInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.newTypeSubject;
    /** @type {?} */
    BuilderDataService.prototype.newOptionSubject;
    /** @type {?} */
    BuilderDataService.prototype.duplicateFieldSubject;
    /** @type {?} */
    BuilderDataService.prototype.saveStatusSubject;
    /** @type {?} */
    BuilderDataService.prototype.renderedSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeFieldIndexSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfRolesSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfSequenceSubject;
    /** @type {?} */
    BuilderDataService.prototype.hasFieldsSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatesService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.snackbarService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.eventTracker;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.injector;
    /* Skipping unhandled member: ;*/
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BuilderService {
    constructor() {
        this.sideNavStateSubject = new ReplaySubject();
        this.recipientSideNavStateSubject = new ReplaySubject(1, 100);
        this.initiateAutofocus = new ReplaySubject();
        this.recipientAutoFocus = new ReplaySubject();
        this.deleteRoleSubject = new ReplaySubject(1, 100);
        this.hasActiveRoleSubject = new ReplaySubject();
    }
    // constructor() {}
    /**
     * @return {?}
     */
    toggleSideNav() {
        this.sideNavState = !this.sideNavState;
        this.sideNavStateSubject.next(this.sideNavState);
        if (this.sideNavState === false) {
            this.initiateAutofocus.next(false);
        }
    }
    /**
     * @return {?}
     */
    toggleRecipientSideNav() {
        this.recipientSideNavState = !this.recipientSideNavState;
        this.recipientSideNavStateSubject.next(this.recipientSideNavState);
        if (this.recipientSideNavState === false) {
            this.recipientAutoFocus.next(false);
        }
    }
    /**
     * @return {?}
     */
    openSideNav() {
        this.sideNavState = true;
        this.sideNavStateSubject.next(this.sideNavState);
    }
    /**
     * @return {?}
     */
    openRecipientSideNav() {
        this.recipientSideNavState = true;
        this.recipientSideNavStateSubject.next(this.recipientSideNavState);
    }
    /**
     * @return {?}
     */
    closeSideNav() {
        this.sideNavState = false;
        this.sideNavStateSubject.next(this.sideNavState);
        this.initiateAutofocus.next(false);
    }
    /**
     * @return {?}
     */
    closeRecipientSideNav() {
        this.recipientSideNavState = false;
        this.recipientSideNavStateSubject.next(this.recipientSideNavState);
        this.recipientAutoFocus.next(false);
    }
    /**
     * @param {?} role
     * @return {?}
     */
    setActiveRole(role) {
        this.activeRole = role;
        this.hasActiveRoleSubject.next(true);
    }
    /**
     * @return {?}
     */
    deleteRole() {
        if (!!this.activeRole) {
            this.deleteRoleSubject.next(this.activeRole);
            this.activeRole = null;
            this.hasActiveRoleSubject.next(false);
        }
    }
    /**
     * @return {?}
     */
    getSideNavState() {
        return this.sideNavState;
    }
    /**
     * @return {?}
     */
    getRecipientSideNavState() {
        return this.recipientSideNavState;
    }
}
BuilderService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.sideNavState;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.recipientSideNavState;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.activeRole;
    /** @type {?} */
    BuilderService.prototype.sideNavStateSubject;
    /** @type {?} */
    BuilderService.prototype.recipientSideNavStateSubject;
    /** @type {?} */
    BuilderService.prototype.initiateAutofocus;
    /** @type {?} */
    BuilderService.prototype.recipientAutoFocus;
    /** @type {?} */
    BuilderService.prototype.deleteRoleSubject;
    /** @type {?} */
    BuilderService.prototype.hasActiveRoleSubject;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConversionService {
    constructor() {
        this.ITextWidth = 612;
        this.ITextHeight = 792;
        this.XRatio = 1;
        this.YRatio = 1;
        this.a3Portrait = {
            x: 842,
            y: 1191
        };
        this.a3Landscape = {
            x: this.a3Portrait.y,
            y: this.a3Portrait.x
        };
        this.a4Portrait = {
            x: 595,
            y: 842
        };
        this.a4Landscape = {
            x: this.a4Portrait.y,
            y: this.a4Portrait.x
        };
        this.a5Portrait = {
            x: 420,
            y: 595
        };
        this.a5Landscape = {
            x: this.a5Portrait.y,
            y: this.a5Portrait.x
        };
        this.letterPortrait = {
            x: 612,
            y: 792
        };
        this.letterLandscape = {
            x: this.letterPortrait.y,
            y: this.letterPortrait.x
        };
        this.legalPortrait = {
            x: 612,
            y: 1008
        };
        this.legalLandscape = {
            x: this.legalPortrait.y,
            y: this.legalPortrait.x
        };
        this.portraitSizes = [
            this.a3Portrait, this.a4Portrait, this.a5Portrait, this.letterPortrait, this.legalPortrait
        ];
        this.landscapeSizes = [
            this.a3Landscape, this.a4Landscape, this.a5Landscape, this.letterLandscape, this.legalLandscape
        ];
        this.rFormWidth = 0;
        this.rFormHeight = 0;
        this.pageCache = [];
    }
    /**
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    setRValue(width, height) {
        this.rFormWidth = width;
        this.rFormHeight = height;
    }
    /**
     * @param {?} pageCache
     * @return {?}
     */
    setPageCache(pageCache) {
        this.pageCache = pageCache;
    }
    /**
     * @return {?}
     */
    get xRatio() {
        return this.XRatio;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setXRatio(value) {
        this.XRatio = value;
    }
    /**
     * @return {?}
     */
    get yRatio() {
        return this.YRatio;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setYRatio(value) {
        this.YRatio = value;
    }
    /**
     * @param {?} y
     * @param {?} fieldHeight
     * @param {?=} iTextHeight
     * @param {?=} yRatio
     * @return {?}
     */
    getRTop(y, fieldHeight, iTextHeight, yRatio) {
        if (!iTextHeight) {
            iTextHeight = this.ITextHeight;
        }
        if (!yRatio) {
            yRatio = this.yRatio;
        }
        return iTextHeight - ((y + fieldHeight) * yRatio);
    }
    /**
     * @param {?} y
     * @param {?=} ratio
     * @return {?}
     */
    getRValue(y, ratio) {
        if (!ratio) {
            ratio = this.yRatio;
        }
        return y * ratio;
    }
    /**
     * @param {?} x
     * @param {?=} ratio
     * @return {?}
     */
    getRLeft(x, ratio) {
        if (!ratio) {
            ratio = this.xRatio;
        }
        return x * ratio;
    }
    /**
     * @param {?} x
     * @param {?} xRatio
     * @return {?}
     */
    getITextLeft(x, xRatio) {
        if (!xRatio) {
            xRatio = this.xRatio;
        }
        return x / xRatio;
    }
    /**
     * @param {?} y
     * @param {?} fieldHeight
     * @param {?=} rFormHeight
     * @param {?=} yRatio
     * @return {?}
     */
    getITextBottomFromRTop(y, fieldHeight, rFormHeight, yRatio) {
        if (!rFormHeight) {
            rFormHeight = this.rFormHeight;
        }
        /** @type {?} */
        const uiHeight = fieldHeight;
        return (rFormHeight - y - uiHeight);
    }
    /**
     * @param {?} y
     * @return {?}
     */
    getITextBottom(y) {
        return y;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getDefaultHeight(field) {
        return getDefaultHeight(field);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getDefaultWidth(field) {
        return getDefaultWidth(field);
    }
    /**
     * @param {?} field
     * @param {?} pageHeight
     * @param {?=} xRatio
     * @param {?=} yRatio
     * @return {?}
     */
    getUIFieldStyling(field, pageHeight, xRatio, yRatio) {
        if (!xRatio) {
            xRatio = this.xRatio;
        }
        if (!yRatio) {
            yRatio = this.yRatio;
        }
        return getUIFieldStyling(field);
    }
    /**
     * @param {?} field
     * @param {?} x
     * @param {?} y
     * @param {?} pageHeight
     * @return {?}
     */
    getUIFieldSetting(field, x, y, pageHeight) {
        /** @type {?} */
        let setting;
        if (field.type === 'textbox' || field.type === 'date' || field.type === 'placeholder') {
            setting = {
                width: field.setting.width ? field.setting.width : 150,
                height: field.setting.height ? field.setting.height : 15,
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, field.setting.height ? field.setting.height : 15, pageHeight)
            };
            if (field.type === 'date') {
                setting.width = 64;
            }
        }
        else if (field.type === 'timestamp') {
            setting = {
                width: field.setting.width ? field.setting.width : 64,
                height: field.setting.height ? field.setting.height : 15,
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, field.setting.height ? field.setting.height : 15, pageHeight)
            };
        }
        else if (field.type === 'signature' || field.type === 'initial') {
            setting = {
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, 36, pageHeight)
            };
        }
        else if (field.type === 'checkbox_group') {
            setting = {
                options: [{
                        id: v4(),
                        x: field.setting.x ? field.setting.x : x,
                        y: this.getITextBottomFromRTop(y, 13.5, pageHeight),
                        checked: false,
                        value: 'Option 1'
                    }]
            };
        }
        else if (field.type === 'radio_button_group') {
            setting = {
                options: [{
                        id: v4(),
                        x: field.setting.x ? field.setting.x : x,
                        y: this.getITextBottomFromRTop(y, 13.5, pageHeight),
                        selected: false,
                        value: 'Option 1'
                    }]
            };
        }
        else if (field.type === 'dropdown') {
            setting = {
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, 15, pageHeight),
                width: field.setting.width ? field.setting.width : 64,
                height: field.setting.height ? field.setting.height : 15,
                value: null,
                placeholder: 'Choose',
                options: [{
                        id: v4(),
                        value: 'Option 1'
                    }]
            };
        }
        else if (field.type === 'attachment') {
            setting = {
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, 24, pageHeight),
                label: ''
            };
        }
        else if (field.type === 'payment') {
            setting = {
                x: field.setting.x ? field.setting.x : x,
                y: this.getITextBottomFromRTop(y, 24, pageHeight),
                account_id: '',
                currency: 'usd',
                payment_fee_type: 'static',
                amount: 1,
                if_transfer_fee: false
            };
        }
        return setting;
    }
    /**
     * @param {?} newHeight
     * @param {?} newWidth
     * @return {?}
     */
    updateITextValues(newHeight, newWidth) {
        this.ITextHeight = newHeight;
        this.ITextWidth = newWidth;
    }
}
ConversionService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.ITextWidth;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.ITextHeight;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.XRatio;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.YRatio;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a3Portrait;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a3Landscape;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a4Portrait;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a4Landscape;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a5Portrait;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.a5Landscape;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.letterPortrait;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.letterLandscape;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.legalPortrait;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.legalLandscape;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.portraitSizes;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.landscapeSizes;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.rFormWidth;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.rFormHeight;
    /**
     * @type {?}
     * @private
     */
    ConversionService.prototype.pageCache;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SignatureService {
    /**
     * @param {?} httpClient
     * @param {?} injector
     * @param {?} envelopeSvc
     * @param {?} vTokenStateService
     */
    constructor(httpClient, injector, envelopeSvc, vTokenStateService) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.envelopeSvc = envelopeSvc;
        this.vTokenStateService = vTokenStateService;
        this.workingField = new FieldData({ order: 0, fName: '' });
        this.fields = [];
        this._total = -1;
        this._fields = new ReplaySubject();
        this._recipient = new ReplaySubject();
        this._showSig = new ReplaySubject();
        this._signedFields = new BehaviorSubject({});
        this._envId = new ReplaySubject();
        this._rName = new ReplaySubject();
        this.signImgSubject = new ReplaySubject();
        this.initialImgSubject = new ReplaySubject();
        this.initialIdSubject = new ReplaySubject();
        this.signatureIdSubject = new ReplaySubject();
        this.signedFields = {};
        this.mode = '';
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
        this.envUrl = `${this._rForm_backend_url}/envelopes`;
    }
    /**
     * @param {?} payment
     * @return {?}
     */
    setWorkingPayment(payment) {
        this.workingPayment = payment;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    updateFields(fields) {
        this.fields = fields;
        this._fields.next(this.fields);
    }
    /**
     * @return {?}
     */
    postSignatureBlob() {
        /** @type {?} */
        const blobFile = this.signatureBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('signature', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload signature image');
            }
        }));
    }
    /**
     * @return {?}
     */
    postInitialBlob() {
        /** @type {?} */
        const blobFile = this.initialBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('initial', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload Initial');
            }
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    toggleSig(bool) {
        this._showSig.next(bool);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setSigId(id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setInitialId(id) {
        this.initialId = id;
        this.initialIdSubject.next(id);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setSignImg(url) {
        this.signImg = url;
        this.signImgSubject.next(this.signImg);
    }
    /**
     * @return {?}
     */
    getSignImg() {
        return this.signImg;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setInitialImg(url) {
        this.initialImg = url;
        this.initialImgSubject.next(this.initialImg);
    }
    /**
     * @return {?}
     */
    getInitialImg() {
        return this.initialImg;
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    putSignatureField(envelopeId, fieldName, signatureId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}/signature/${signatureId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    putInitialField(envelopeId, fieldName, initialId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}/initial/${initialId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    // refactor it to 4 functions
    /**
     * @param {?} envelopeId
     * @param {?=} ifPrepared
     * @return {?}
     */
    updateEnvelopeField(envelopeId, ifPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            const result = this.getEnvelopeFieldValue(ifPrepared);
            this.putEnvelopeField(envelopeId, result);
        }
    }
    /**
     * @param {?=} isPrepared
     * @return {?}
     */
    getEnvelopeFieldValue(isPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            const result = {
                value: ''
            };
            if (typeof (isPrepared) === 'boolean') {
                result['prepared'] = isPrepared;
            }
            switch (this.workingField.type.toLowerCase()) {
                case 'textbox':
                case 'checkbox':
                case 'date':
                    result.value = this.workingField.value;
                    break;
                default:
                    break;
            }
            return result;
        }
        return null;
    }
    /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    putEnvelopeField(envelopeId, result) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${this.workingField.fName}`, result).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    updateGroupedField(envelopeId, body, fieldName, ifPrepared) {
        if (typeof (ifPrepared) === 'boolean') {
            body['prepared'] = ifPrepared;
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}`, body).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} setPrepared
     * @return {?}
     */
    prepareEnvelopeField(envelopeId, setPrepared) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.workingField && this.workingField.type) {
                /** @type {?} */
                const fieldType = this.workingField.type.toLowerCase();
                if (fieldType !== 'textbox' && fieldType !== 'date' && fieldType !== 'checkbox') {
                    return false;
                }
                else {
                    /** @type {?} */
                    const fieldResponse = yield this.updateEnvelopeField(envelopeId, setPrepared);
                    if (fieldResponse) {
                        return fieldResponse.prepared;
                    }
                }
            }
            return false;
        });
    }
    /**
     * @private
     * @return {?}
     */
    getPublicIp() {
        /** @type {?} */
        const apiUrl = 'https://api.ipify.org?format=jsonp';
        /** @type {?} */
        const callback = 'callback=JSONP_CALLBACK';
        return this.httpClient
            .jsonp(apiUrl, callback)
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res['ip'];
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error('Failed to get ip', err);
            return 'ip_unavailable';
        }));
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @param {?} vName
     * @param {?} pageNum
     * @param {?} id
     * @param {?} required
     * @param {?} order
     * @param {?} type
     * @return {?}
     */
    updateCurrentField(fName, result, vName, pageNum, id, required, order, type) {
        this.workingField.fName = fName;
        this.workingField.value = result;
        this.workingField.pageNum = pageNum;
        this.workingField.id = id;
        this.workingField.vName = vName;
        this.workingField.required = required;
        this.workingField.order = order;
        this.workingField.type = type;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    setCurrentFields(fields) {
        this.currentFields = fields;
    }
    /**
     * @return {?}
     */
    get currField() {
        return this.workingField;
    }
    /**
     * @param {?} pageNum
     * @param {?} id
     * @return {?}
     */
    errorMessages(pageNum, id) {
        return this.currentFields[pageNum][id]['error'];
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setEnvId(id) {
        this._envId.next(id);
    }
    /**
     * @param {?} role
     * @return {?}
     */
    setrName(role) {
        this.rName = role;
        this._rName.next(role);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getSignatureUrl(data) {
        if (data) {
            /** @type {?} */
            const blob = dataURLtoBlob(data);
            /** @type {?} */
            const url = URL.createObjectURL(blob);
            return url;
        }
        return null;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setSignatureData(data) {
        /** @type {?} */
        const blob = dataURLtoBlob(data);
        /** @type {?} */
        const url = URL.createObjectURL(blob);
        this.signatureBlob = blob;
        this.setSignImg(url);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setInitialData(data) {
        /** @type {?} */
        const blob = dataURLtoBlob(data);
        /** @type {?} */
        const url = URL.createObjectURL(blob);
        this.initialBlob = blob;
        this.setInitialImg(url);
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    updateSigned(fName, result) {
        this.workingField['value'] = 'signed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    updateInitialed(fName, result) {
        this.workingField['value'] = 'initialed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setSignatureId(id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    }
    /**
     * @param {?} recipient
     * @return {?}
     */
    setRecipient(recipient) {
        this._recipient.next(recipient);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    setTotal(t) {
        this._total = t;
    }
}
SignatureService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SignatureService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector },
    { type: DocumentsService },
    { type: VerdocsStateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.currentFields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingField;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.fields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._total;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialImg;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingPayment;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.recipients;
    /** @type {?} */
    SignatureService.prototype._fields;
    /** @type {?} */
    SignatureService.prototype._recipient;
    /** @type {?} */
    SignatureService.prototype._showSig;
    /** @type {?} */
    SignatureService.prototype._signedFields;
    /** @type {?} */
    SignatureService.prototype._envId;
    /** @type {?} */
    SignatureService.prototype._rName;
    /** @type {?} */
    SignatureService.prototype.signImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialIdSubject;
    /** @type {?} */
    SignatureService.prototype.signatureIdSubject;
    /** @type {?} */
    SignatureService.prototype.signedFields;
    /** @type {?} */
    SignatureService.prototype.signImg;
    /** @type {?} */
    SignatureService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envelopeSvc;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.vTokenStateService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnvelopeViewService {
    /**
     * @param {?} signatureService
     */
    constructor(signatureService) {
        this.signatureService = signatureService;
        this.recipientSubject = new ReplaySubject();
        this.jumpCoordinateSubject = new ReplaySubject();
        this.fieldTypeSubject = new ReplaySubject();
        this.pdfUrlSubject = new ReplaySubject();
        this.pdfBlobSubject = new ReplaySubject();
        this.toggleNextSubject = new ReplaySubject();
        this.viewModeSubject = new ReplaySubject();
        this.agreedSubject = new ReplaySubject(1, 500);
        this.attachmentsSubject = new ReplaySubject();
        this.formValiditySubject = new ReplaySubject();
        this.requestFormValiditySubject = new ReplaySubject();
        this.signatureService._rName.subscribe((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            this.rName = role;
        }));
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    setMode(mode) {
        this.mode = mode;
        this.viewModeSubject.next(this.mode);
    }
    /**
     * @param {?} signatureService
     * @return {?}
     */
    setSignatureService(signatureService) {
        this.signatureService = signatureService;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    requestFormValidity(value) {
        this.requestFormValiditySubject.next(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFormValidityData(value) {
        this.formValiditySubject.next(value);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    ifBelongsToPreparer(type) {
        return type === 'textbox' || type === 'date' || type === 'checkbox';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    ifBelongsToCurrentRecipient(field) {
        if (this.mode === 'prepareview') {
            return this.ifBelongsToPreparer(field.controlType);
        }
        else {
            return field.recipientRole === this.rName;
        }
    }
}
EnvelopeViewService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EnvelopeViewService.ctorParameters = () => [
    { type: SignatureService }
];
if (false) {
    /** @type {?} */
    EnvelopeViewService.prototype.recipientSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.jumpCoordinateSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.fieldTypeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfUrlSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfBlobSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.toggleNextSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.viewModeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.agreedSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.attachmentsSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.formValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.requestFormValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.signatureService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const Robots = {
    Noindex: 'Noindex',
    Index: 'Index',
    Follow: 'Follow',
    Noimageindex: 'Noimageindex',
    None: 'None',
    Noarchive: 'Noarchive',
    Nocache: 'Nocache',
    Nosnippet: 'Nosnippet',
};
class PageService {
    /**
     * @param {?} titleService
     * @param {?} injector
     * @param {?} meta
     * @param {?} rendererFactory
     * @param {?} activatedRoute
     * @param {?} router
     * @param {?} vTokenStateService
     * @param {?} tokenObject
     * @param {?} platform
     * @param {?} document
     */
    constructor(titleService, injector, meta, rendererFactory, activatedRoute, router, vTokenStateService, tokenObject, platform, document) {
        this.titleService = titleService;
        this.injector = injector;
        this.meta = meta;
        this.rendererFactory = rendererFactory;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.vTokenStateService = vTokenStateService;
        this.tokenObject = tokenObject;
        this.platform = platform;
        this.document = document;
        this.segmentIsInitialized = false;
        this.lazyTitle = false;
        this._config_token = this.injector.get(EssentialsConfigToken);
    }
    /**
     * @return {?}
     */
    inti() {
        this.initializeSegment();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.additionalSetupForWidgets();
        }), 500);
        this.router.events.pipe(filter$1((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)), map((/**
         * @return {?}
         */
        () => this.activatedRoute)), map((/**
         * @param {?} route
         * @return {?}
         */
        route => {
            /** @type {?} */
            let targetRoute = route;
            while (targetRoute.firstChild) {
                targetRoute = targetRoute.firstChild;
            }
            return targetRoute;
        })), switchMap((/**
         * @param {?} route
         * @return {?}
         */
        route => route.data)), map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lazyTitle = data.lazyTitle;
            return data.title;
        }))).subscribe((/**
         * @param {?} title
         * @return {?}
         */
        (title) => {
            if (this.lazyTitle) {
                this.lazyTitle = false;
            }
            else {
                this.setTitleAndRecord(title);
            }
        }));
    }
    /**
     * @param {?} title
     * @param {?=} pageName
     * @return {?}
     */
    setTitleAndRecord(title, pageName) {
        /** @type {?} */
        let newTitle = 'Verdocs';
        if (isPlatformBrowser(this.platform)) {
            if (this.document.cookie.includes(this._config_token.rForm_cookie_name)) {
                newTitle = title ? title : 'Verdocs';
                window['analytics'].page(pageName || newTitle);
            }
        }
        else {
            newTitle = 'Verdocs' + (title ? ` | ${title}` : '');
        }
        this.titleService.setTitle(newTitle);
    }
    /**
     * @param {?} property
     * @param {?} content
     * @return {?}
     */
    setMetaProperty(property, content) {
        if (!!content) {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.updateTag({ property, content }, `property="${property}"`);
            }
            else {
                this.meta.addTag({ property, content }, true);
            }
        }
        else {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.removeTag(`property=“${property}”`);
            }
        }
    }
    /**
     * @param {?} property
     * @param {?} content
     * @return {?}
     */
    setMetaName(property, content) {
        if (!!content) {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.updateTag({ property, content }, `name="${property}"`);
            }
            else {
                this.meta.addTag({ property, content }, true);
            }
        }
        else {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.removeTag(`name=“${property}”`);
            }
        }
    }
    /**
     * @param {?} type
     * @param {?} title
     * @param {?} description
     * @param {?} image
     * @param {?} url
     * @return {?}
     */
    setOpenGraphMeta(type, title, description, image, url) {
        if (!!type) {
            this.setMetaProperty('og:type', type);
        }
        if (!!title) {
            this.setMetaProperty('og:title', title);
        }
        if (!!description) {
            this.setMetaProperty('og:description', description);
        }
        if (!!image) {
            this.setMetaProperty('og:image', image);
        }
        if (!!url) {
            this.setMetaProperty('og:url', url);
        }
        if (!!this.getMetaTagProperty('og:site_name')) {
            return;
        }
        else {
            this.meta.addTag({ property: 'og:site_name', content: 'Verdocs' });
        }
    }
    /**
     * @param {...?} robot_values
     * @return {?}
     */
    setRobotMeta(...robot_values) {
        /** @type {?} */
        let parameters = '';
        for (let x = 0; x < robot_values.length; x++) {
            if (robot_values[x]) {
                if (x === robot_values.length - 1) {
                    parameters += robot_values[x];
                }
                else {
                    parameters += robot_values[x] + ", ";
                }
            }
        }
        /** @type {?} */
        const robot_parameters = parameters;
        this.setMetaName('robots', robot_parameters);
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    setCanonicalUrl(tag) {
        if (!tag.href) {
            tag['href'] = this.document.url;
        }
        this.addTag(tag);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    setDescriptionMeta(content) {
        if (!!this.getMetaTag('description')) {
            if (content) {
                this.meta.updateTag({ name: 'description', content: content }, `name='description'`);
            }
            else {
                this.meta.removeTag(`name='description'`);
            }
        }
        else {
            if (content) {
                this.meta.addTag({ name: 'description', content: content }, true);
            }
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getMetaTag(name) {
        return this.meta.getTag(`name='${name}'`);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    getMetaTagProperty(property) {
        return this.meta.getTag(`property='${property}'`);
    }
    /**
     * @private
     * @return {?}
     */
    initializeSegment() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const analytics = window['analytics'];
            if (document.cookie.includes(this._config_token.rForm_cookie_name)) {
                /** @type {?} */
                const idTokenSubscription = this.vTokenStateService.decodedIdTokenSubject.subscribe((/**
                 * @param {?} decodedIdToken
                 * @return {?}
                 */
                decodedIdToken => {
                    idTokenSubscription.unsubscribe();
                    if (!this.segmentIsInitialized) {
                        this.segmentIsInitialized = true;
                        analytics.reset();
                        /** @type {?} */
                        const profile = this.tokenObject.getProfile();
                        analytics.identify(decodedIdToken.sub, {
                            userId: decodedIdToken.sub,
                            email: decodedIdToken.email,
                            name: decodedIdToken.name,
                            'Verdoc plan': this.planType('verdoc'),
                            'Organization plan': this.planType('organization'),
                            'Current Profile Id': this.tokenObject.getProfileID(),
                            'Current Company': profile.organization.name,
                            company: {
                                id: profile.organization_id,
                                name: profile.organization.name
                            }
                        }, {
                            Intercom: { hideDefaultLauncher: true }
                        });
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    robotEnum() {
        return Robots;
    }
    /**
     * @private
     * @param {?} product
     * @return {?}
     */
    planType(product) {
        /** @type {?} */
        let productName = 'undefined';
        switch (product) {
            case 'verdoc':
                productName = 'env';
                break;
            case 'organization':
                productName = 'org';
                break;
        }
        /** @type {?} */
        const plan = this.tokenObject.getPlans().find((/**
         * @param {?} p
         * @return {?}
         */
        (p) => {
            return p.includes(productName);
        }));
        /** @type {?} */
        let planType = 'None';
        if (plan) {
            if (productName === 'env') {
                planType = plan.includes('pro') ? 'Pro' : 'Essential';
            }
            else {
                planType = plan.includes('premium') ? 'Premium' : 'Standard';
            }
        }
        return planType;
    }
    /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    addTag(tag, forceCreation) {
        /** @type {?} */
        const renderer = this.rendererFactory.createRenderer(this.document, {
            id: '-1',
            encapsulation: ViewEncapsulation.None,
            styles: [],
            data: {}
        });
        /** @type {?} */
        const link = renderer.createElement('link');
        /** @type {?} */
        const head = this.document.head;
        /** @type {?} */
        const selector = this._parseSelector(tag);
        Object.keys(tag).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        (prop) => {
            return renderer.setAttribute(link, prop, tag[prop]);
        }));
        try {
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            /** @type {?} */
            const existingLink = renderer.selectRootElement(selector);
            if (!!existingLink) {
                renderer.removeAttribute(existingLink, 'href');
                renderer.setAttribute(existingLink, 'href', tag['href']);
            }
            else {
                renderer.appendChild(head, link);
            }
        }
        catch (e) {
            // console.error('Error within linkService : ', e);
            renderer.appendChild(head, link);
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    _parseSelector(tag) {
        /** @type {?} */
        const attr = tag.rel ? 'rel' : 'hreflang';
        return `link[${attr}="${tag[attr]}"]`;
    }
    /**
     * @private
     * @return {?}
     */
    additionalSetupForWidgets() {
        if (isPlatformBrowser(this.platform)) {
            if (window['Intercom']) {
                window['Intercom']('onHide', (/**
                 * @return {?}
                 */
                function () {
                    window['intercomIsOpen'] = false;
                }));
                window['Intercom']('onShow', (/**
                 * @return {?}
                 */
                function () {
                    window['intercomIsOpen'] = true;
                }));
            }
            window['lunchIntercom'] = (/**
             * @return {?}
             */
            function () {
                if (window['Intercom']) {
                    if (window['intercomIsOpen'] && window['intercomIsOpen'] === true) {
                        window['Intercom']('hide');
                    }
                    else {
                        window['Intercom']('show');
                    }
                }
                else {
                    console.error('Intercom is not loaded!');
                }
            });
            window['lunchElevio'] = (/**
             * @return {?}
             */
            function () {
                if (window['_elev']) {
                    if (window['_elev'].widgetIsOpen()) {
                        window['_elev'].close();
                    }
                    else {
                        window['_elev'].open();
                    }
                }
                else {
                    console.error('Elevio is not loaded!');
                }
            });
        }
    }
}
/** @nocollapse */
PageService.ctorParameters = () => [
    { type: Title },
    { type: Injector },
    { type: Meta },
    { type: RendererFactory2 },
    { type: ActivatedRoute },
    { type: Router },
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PageService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.segmentIsInitialized;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.lazyTitle;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.titleService;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.meta;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.rendererFactory;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.tokenObject;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.document;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ModalService {
    constructor() {
        this.modals = [];
        this.subject = new Subject();
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    add(modal) {
        this.modals.push(modal);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    open(id) {
        /** @type {?} */
        const modal = find(this.modals, { id: id });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    close(id) {
        /** @type {?} */
        const modal = find(this.modals, { id: id });
        modal.close();
    }
    /**
     * @param {?} componentData
     * @return {?}
     */
    setComponentData(componentData) {
        this.componentData = componentData;
        this.subject.next(componentData);
    }
    /**
     * @return {?}
     */
    getComponentData() {
        return this.subject.asObservable();
    }
}
ModalService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.componentData;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.subject;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FourOhOneDialog {
    /**
     * @param {?} router
     * @param {?} injector
     * @param {?} vTokenObjectService
     */
    constructor(router, injector, vTokenObjectService) {
        this.router = router;
        this.injector = injector;
        this.vTokenObjectService = vTokenObjectService;
        this.error = null;
        this.currentProfile = null;
        this.error_code = null;
        this.error_title = null;
        this.error_message = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.rSecureUrl = this._config_token.rSecure_frontend_url;
        this.rFormUrl = this._config_token.rForm_frontend_url;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentProfile = this.vTokenObjectService.getProfile();
        if (this.error && this.error.hasOwnProperty('error')) {
            this.error_code = this.error.error.code || null;
            if (this.error_code) {
                this.prepareErroContent();
            }
        }
    }
    /**
     * @return {?}
     */
    prepareErroContent() {
        switch (this.error_code) {
            case 'AUTH0002':
                this.error_title = 'Authorization key is missing';
                this.error_message = 'Try after ' + (this.currentProfile ? 'signing in again.' : 'signing in or signing up.');
                break;
            case 'T000001':
                this.error_title = 'This document is not accessible';
                this.error_message = (this.currentProfile ? 'Try using a different organization/account, ' : 'Try signing in, signing up, ') + 'or requesting access from the owner of this document.';
                break;
            case 'AUTH0003':
                this.error_title = 'Cannot complete your request';
                this.error_message = 'Try after ' + (this.currentProfile ? 'signing in again.' : 'signing in or signing up.');
                break;
            default:
                this.error_title = 'Your request has been denied.';
                this.error_message = null;
                break;
        }
    }
    /**
     * @return {?}
     */
    goToDashboard() {
        this.router.navigate(['/dashboard']);
    }
    /**
     * @return {?}
     */
    signIn() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/login?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
    /**
     * @return {?}
     */
    signUp() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/signup?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
}
FourOhOneDialog.decorators = [
    { type: Component, args: [{
                selector: 'four-oh-one-dialog',
                template: "<div class=\"error__container\">\n  <div class=\"error__title\">\n    {{error_title}}\n  </div>\n  <div class=\"error__body\" *ngIf=\"error_message\">\n    {{error_message}}\n  </div>\n  <div class=\"error__action\">\n    <button class=\"error__action-button left\" mat-button *ngIf=\"currentProfile\" (click)=\"goToDashboard()\">go to dashboard</button>\n    <button class=\"error__action-button left\" mat-button *ngIf=\"!currentProfile\" (click)=\"signUp()\">sign up</button>\n    <button class=\"error__action-button\" mat-button (click)=\"signIn()\">sign in</button>\n  </div>\n</div>",
                styles: [".error__container{padding-top:8px;padding-left:8px;padding-right:8px;max-width:640px}.error__title{padding:16px 16px 8px;font-size:20px;line-height:24px;font-weight:500;color:rgba(0,0,0,.87)}.error__body{padding:16px 16px 8px;font-size:16px;line-height:24px;color:rgba(0,0,0,.54)}.error__action{padding:8px;text-align:right}.error__action-button{color:#37474f;text-transform:uppercase}.error__action-button.left{margin-right:8px}"]
            }] }
];
/** @nocollapse */
FourOhOneDialog.ctorParameters = () => [
    { type: Router },
    { type: Injector },
    { type: VerdocsTokenObjectService }
];
if (false) {
    /** @type {?} */
    FourOhOneDialog.prototype.error;
    /** @type {?} */
    FourOhOneDialog.prototype.currentProfile;
    /** @type {?} */
    FourOhOneDialog.prototype.error_code;
    /** @type {?} */
    FourOhOneDialog.prototype.error_title;
    /** @type {?} */
    FourOhOneDialog.prototype.error_message;
    /** @type {?} */
    FourOhOneDialog.prototype.rSecureUrl;
    /** @type {?} */
    FourOhOneDialog.prototype.rFormUrl;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.vTokenObjectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PlansDialog {
    /**
     * @param {?} router
     * @param {?} dialog
     */
    constructor(router, dialog) {
        this.router = router;
        this.dialog = dialog;
        this.redirectUrl = null;
        this.type = null;
        this.dialogTitle = null;
        this.dialogMessage = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        switch (this.type) {
            case 'free':
                this.dialogTitle = 'Upgrade to create another document';
                this.dialogMessage = 'We are glad to see you are drawing value from Verdocs. You have reached your limit of three documents per month with your free account. Please upgrade to an Essentials or Pro subscription to create more documents.';
                break;
            case 'essential':
                this.dialogTitle = 'Upgrade to access this feature';
                this.dialogMessage = 'This feature requires an essentials subscription or above. Please upgrade to access this feature.';
                break;
            case 'pro':
                this.dialogTitle = 'Upgrade to access this feature';
                this.dialogMessage = 'This feature requires a pro subscription. Please upgrade to access this feature.';
                break;
            default:
                this.dialog.close();
                break;
        }
    }
    /**
     * @return {?}
     */
    goToBilling() {
        if (window && !!this.redirectUrl && !!this.type) {
            window.location.href = (this.redirectUrl);
        }
        else {
            this.dialog.close();
        }
    }
    /**
     * @return {?}
     */
    close() {
        this.dialog.close();
    }
}
PlansDialog.decorators = [
    { type: Component, args: [{
                selector: 'plans-dialog',
                template: "<div class=\"plans-dialog__container\">\n  <div class=\"plans-dialog__title\">{{dialogTitle}}</div>\n  <div class=\"plans-dialog__message\">\n      {{dialogMessage}}\n  </div>\n  <div class=\"plans-dialog__action\">\n    <button class=\"plans-dialog__button\" mat-button (click)=\"goToBilling()\">let's go</button>\n    <button class=\"plans-dialog__button\" mat-button (click)=\"close()\">not now</button>\n  </div>\n</div>",
                styles: [".plans-dialog__title{padding:16px;font-size:24px;font-weight:500;color:rgba(0,0,0,.87)}.plans-dialog__message{padding:0 16px 16px;font-size:16px;line-height:24px;color:rgba(0,0,0,.54)}.plans-dialog__action{padding-top:8px;text-align:right}.plans-dialog__button{color:#37474f;text-transform:uppercase}"]
            }] }
];
/** @nocollapse */
PlansDialog.ctorParameters = () => [
    { type: Router },
    { type: MatDialogRef }
];
if (false) {
    /** @type {?} */
    PlansDialog.prototype.redirectUrl;
    /** @type {?} */
    PlansDialog.prototype.type;
    /** @type {?} */
    PlansDialog.prototype.dialogTitle;
    /** @type {?} */
    PlansDialog.prototype.dialogMessage;
    /**
     * @type {?}
     * @private
     */
    PlansDialog.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PlansDialog.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
Injectable();
class ErrorDialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * @param {?} err
     * @return {?}
     */
    show401ResponseError(err) {
        /** @type {?} */
        const errorDialog = this.dialog.open(FourOhOneDialog, {
            panelClass: 'error_dialog',
            disableClose: true
        });
        errorDialog.componentInstance.error = err;
    }
    /**
     * @param {?} type
     * @param {?} redirect_url
     * @param {?=} dialog_title
     * @param {?=} dialog_message
     * @return {?}
     */
    showPlansError(type, redirect_url, dialog_title, dialog_message) {
        /** @type {?} */
        const planErrorDialog = this.dialog.open(PlansDialog, {
            panelClass: 'error_dialog',
            disableClose: true
        });
        if (type) {
            planErrorDialog.componentInstance.type = type;
        }
        if (redirect_url) {
            planErrorDialog.componentInstance.type = redirect_url;
        }
        if (dialog_title) {
            planErrorDialog.componentInstance.dialogTitle = dialog_title;
        }
        if (dialog_message) {
            planErrorDialog.componentInstance.dialogMessage = dialog_message;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ErrorDialogService.prototype.dialog;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class GuardService {
    /**
     * @param {?} injector
     * @param {?} stateService
     * @param {?} dialog
     * @param {?} platform
     */
    constructor(injector, stateService, dialog, platform) {
        this.injector = injector;
        this.stateService = stateService;
        this.dialog = dialog;
        this.platform = platform;
        this._redirectUrl = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._plans = this._config_token.plans;
        this._rAccount_frontend_url = this._config_token.rAccount_frontend_url;
    }
    /**
     * @param {?} type
     * @param {?} subscriptionType
     * @param {?} openDialog
     * @return {?}
     */
    checkSubscription(type, subscriptionType, openDialog) {
        /** @type {?} */
        const idToken = this.stateService.getIDToken();
        /** @type {?} */
        const userId = this.toTokenObject(idToken)['sub'].slice(6);
        this._redirectUrl = `${this._rAccount_frontend_url}/rAccount/user/${userId}/billing`;
        switch (type) {
            case 'reminders':
                if (subscriptionType === this._plans['level-2'] || subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        const essentialDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        essentialDialog.componentInstance.type = 'essential';
                        essentialDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'live-link':
            case 'attachment':
            case 'payment':
                if (subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        const proDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        proDialog.componentInstance.type = 'pro';
                        proDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'open-free-envelopes':
                /** @type {?} */
                const freeDialog = this.dialog.open(PlansDialog, {
                    panelClass: 'confirmation'
                });
                freeDialog.componentInstance.type = 'free';
                freeDialog.componentInstance.redirectUrl = this._redirectUrl;
                return false;
            default:
                return false;
        }
    }
    /**
     * @param {?} accessToken
     * @return {?}
     */
    toTokenObject(accessToken) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const base64Url = accessToken.split('.')[1];
            /** @type {?} */
            const base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
    }
    /**
     * @param {?} plans
     * @return {?}
     */
    getHighestEnvelopePlan(plans) {
        /** @type {?} */
        let plan = null;
        for (let x = 0; x < plans.length; x++) {
            if (plans[x] === this._plans['level-3']) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-2'] && (plan === null || plan === 'env:free')) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-1'] && plan === null) {
                plan = plans[x];
            }
        }
        return plan;
    }
}
GuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GuardService.ctorParameters = () => [
    { type: Injector },
    { type: VerdocsStateService },
    { type: MatDialog },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._plans;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._rAccount_frontend_url;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._redirectUrl;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function EssentialsConfig() { }
if (false) {
    /** @type {?} */
    EssentialsConfig.prototype.production;
    /** @type {?} */
    EssentialsConfig.prototype.domain;
    /** @type {?} */
    EssentialsConfig.prototype.rForm_backend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rForm_frontend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rSecure_frontend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rSecure_backend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rAccount_frontend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rAccount_backend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rNotification_backend_url;
    /** @type {?} */
    EssentialsConfig.prototype.rForm_cookie_name;
    /** @type {?} */
    EssentialsConfig.prototype.loginURL;
    /** @type {?} */
    EssentialsConfig.prototype.origin;
    /** @type {?} */
    EssentialsConfig.prototype.plans;
}
/** @type {?} */
const EssentialsConfigToken = new InjectionToken('EssentialsConfig');
// @dynamic
class EssentialsModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static initializeEssentials(config) {
        return {
            ngModule: EssentialsModule,
            import: [
                CommonModule,
                AngularApiModule.initSDK({
                    production: config.production,
                    domain: config.domain,
                    origin: config.origin,
                    loginURL: config.loginURL,
                    rForm_backend_url: config.rForm_backend_url,
                    rForm_frontend_url: config.rForm_frontend_url,
                    rSecure_backend_url: config.rSecure_backend_url,
                    rSecure_frontend_url: config.rSecure_frontend_url,
                    rAccount_backend_url: config.rAccount_backend_url,
                    rAccount_frontend_url: config.rAccount_frontend_url,
                    rNotification_backend_url: config.rNotification_backend_url,
                    plans: config.plans
                }),
                MatDialogModule
            ],
            providers: [
                {
                    provide: EssentialsConfigToken,
                    useValue: config
                },
                SnackbarService,
                AccountService,
                BrowserToiTextService,
                BuilderDataService,
                BuilderService,
                ConversionService,
                SignatureService,
                EnvelopeViewService,
                PageService,
                ModalService,
                ErrorDialogService,
                GuardService
            ],
            declarations: [
                FourOhOneDialog,
                PlansDialog
            ],
            EntryComponents: [
                FourOhOneDialog,
                PlansDialog
            ],
            exports: [
                FourOhOneDialog,
                PlansDialog
            ]
        };
    }
}
EssentialsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                providers: [],
                declarations: [
                    FourOhOneDialog,
                    PlansDialog
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AccountService {
    /**
     * @param {?} http
     * @param {?} router
     * @param {?} vTokenStateService
     * @param {?} injector
     */
    constructor(http, router, vTokenStateService, injector) {
        this.http = http;
        this.router = router;
        this.vTokenStateService = vTokenStateService;
        this.injector = injector;
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.profileLoadingSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.currentOrganizationId = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.backend_url = this._config_token.rAccount_backend_url;
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        this.rSecure_backend_url = this._config_token.rSecure_backend_url;
    }
    /**
     * @return {?}
     */
    getAccountData() {
        /***********
        * Refactor *
        ***********/
        // const headerService = this.injector.get(HeaderService);
        // headerService.noHeader.subscribe(status => {
        // if (status === false) {
        this.getProfiles();
        // }
        // });
    }
    /**
     * @return {?}
     */
    getProfiles() {
        return this.http.get(this.backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            p => p.organization.name === 'realster')), 1);
            this.personalAccountSubject.next(personal[0]);
            this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            this.profileData.unshift(personal[0]);
            /** @type {?} */
            const currentIndex = findIndex(this.profileData, { current: true });
            if (this.profileData[currentIndex]['first_name']) {
                this.userFullname = this.profileData[currentIndex]['first_name'] + ' ' + this.profileData[currentIndex]['last_name'];
                this.userInitial = this.profileData[currentIndex]['first_name'].charAt(0) +
                    this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                this.userFullname = '';
            }
            if (this.profileData[currentIndex]['phone']) {
                this.userPhone = this.profileData[currentIndex]['phone'];
            }
            else {
                this.userPhone = '';
            }
            if (this.profileData[currentIndex]['email']) {
                this.userEmail = this.profileData[currentIndex]['email'];
            }
            this.userData = {
                name: this.userFullname,
                initial: this.userInitial,
                email: this.userEmail,
                phone: this.userPhone
            };
            this.userProfileSubject.next(this.profileData);
            /** @type {?} */
            const currentProfile = this.profileData[currentIndex];
            this.currentProfileSubject.next(currentProfile);
            this.currentOrganizationId = currentProfile.organization_id;
            this.userDataSubject.next(this.userData);
            return this.userData;
        }));
    }
    /**
     * @param {?} profiles
     * @return {?}
     */
    getProfileCollection(profiles) {
        /** @type {?} */
        const profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        profile => {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        const profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeFromProfileData(id) {
        /** @type {?} */
        const removeIndex = findIndex(this.profileData, { organization_id: name });
        if (removeIndex >= 0) {
            this.profileData.splice(removeIndex, 1);
            this.userProfileSubject.next(this.profileData);
        }
    }
    /**
     * @return {?}
     */
    getAllProfiles() {
        return this.http.get(this.backend_url + '/profiles/').toPromise();
    }
    /**
     * @param {?} profile_id
     * @return {?}
     */
    switchProfile(profile_id) {
        this.profileLoadingSubject.next(true);
        return this.http.post(this.backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => __awaiter(this, void 0, void 0, function* () {
            this.vTokenStateService.setTokens(res.tokens);
            this.profileLoadingSubject.next(false);
            return Promise.resolve(res);
        })));
    }
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    updateTokens(sendMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.vTokenStateService.updateTokens(this.rSecure_backend_url).subscribe((/**
                 * @param {?} tokens
                 * @return {?}
                 */
                tokens => {
                    if (tokens && tokens.length > 0) {
                        if (sendMessage) {
                            // this.snackbar.dismiss();
                            this.createSnackbar('Status updated');
                        }
                    }
                    this.getAccountData();
                    return resolve();
                }));
            }));
        });
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.http.post(this.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.createSnackbar('Verification email sent');
        }));
    }
    /**
     * *****************************
     * replace with snackbar service *
     * ******************************
     * @param {?} message
     * @return {?}
     */
    createSnackbar(message) {
        // let snackbarConfig: MatSnackBarConfig
        // if (window.innerWidth >= 920) {
        //   snackbarConfig = {
        //     verticalPosition: 'bottom',
        //     horizontalPosition: 'left',
        //     duration: 5000
        //   }
        // } else {
        //   snackbarConfig = {
        //     verticalPosition: 'top',
        //     duration: 5000
        //   }
        // }
        // this.snackbar.open(message, null, snackbarConfig);
    }
    /**
     * @param {?} userData
     * @return {?}
     */
    putAccountData(userData) {
        if (userData.email) {
            this.userData.email = userData.email;
        }
        if (userData.first_name && userData.last_name) {
            this.userData.name = userData.first_name + ' ' + userData.last_name;
            this.userData.initial = userData.first_name.charAt(0) + userData.last_name.charAt(0);
        }
        if (userData.phone) {
            this.userData.phone = userData.phone || '';
        }
        this.http.put(this.backend_url + '/profiles/' + userData.id, userData).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.userDataSubject.next(this.userData);
        }));
    }
    /**
     * @return {?}
     */
    deleteAccount() {
        return this.http.delete(this.backend_url).toPromise();
    }
    /**
     * @param {?} email
     * @param {?} oldPassword
     * @param {?} newPassword
     * @return {?}
     */
    changePassword(email, oldPassword, newPassword) {
        return this.http.put(this.backend_url + 'updatepassword', {
            email,
            oldPassword,
            newPassword
        }).toPromise();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getNameValidity(name) {
        return this.http.get(this.backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @param {?} body
     * @return {?}
     */
    createOrganization(body) {
        return this.http.post(this.backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getOptions() {
        /** @type {?} */
        const rTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        const authValue = 'Bearer ' + rTokenCookie['accessToken'];
        /** @type {?} */
        const headers = new Headers({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { 'headers': headers };
    }
    /**
     * @param {?} id
     * @param {?} roleName
     * @param {?} invite
     * @param {?=} redirectReq
     * @return {?}
     */
    fetchToken(id, roleName, invite, redirectReq) {
        /** @type {?} */
        const req = this.rForm_backend_url + `/envelopes/${id}/recipients/${roleName}/invitation/${invite}`;
        return this.http.get(req, { observe: 'response' }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.vTokenStateService.storeOtherCookie('signer_token', res['headers'].get('signer_token'));
            if (redirectReq) {
                this.router.navigate([`/view/sign/${id}/role/${roleName}`], { queryParams: { redirectReq: redirectReq } });
            }
            else {
                this.router.navigate([`/view/sign/${id}/role/${roleName}`]);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            this.router.navigate([`/view/sign/${id}/role/${roleName}`, { error: err }]);
        }));
    }
}
AccountService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AccountService.ctorParameters = () => [
    { type: HttpClient },
    { type: Router },
    { type: VerdocsStateService },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    AccountService.prototype.userDataSubject;
    /** @type {?} */
    AccountService.prototype.userProfileSubject;
    /** @type {?} */
    AccountService.prototype.profileLoadingSubject;
    /** @type {?} */
    AccountService.prototype.currentProfileSubject;
    /** @type {?} */
    AccountService.prototype.personalAccountSubject;
    /** @type {?} */
    AccountService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rSecure_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.currentOrganizationId;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AccountService, BrowserToiTextService, BuilderDataService, BuilderService, ConversionService, DynamicField, EnvelopeViewService, ErrorDialogService, EssentialsConfigToken, EssentialsModule, FourOhOneDialog, GuardService, ModalService, PageService, PlansDialog, SignatureService, SnackbarService, blobToBase64, bottomOfPageIsInView, buildFields, constructGroupFields, constructPages, convertToUIRatio, dataURLtoBlob, generateCheckboxLabel, generateGroupLabel, generateInitialStyle, generateStyle, getDefaultHeight, getDefaultWidth, getFieldsMap, getInputStyle, getLetterSpacing, getRLeft, getRTop, getRValue, getRoleColor, getUIFieldStyling, isInView, middleOfPageIsInView, prepareFieldsForSigner, printPdfUrl, regParse, rescale, setRatio, timePeriod, topOfPageIsInView, updateElementStyles };
//# sourceMappingURL=verdocs-essentials.js.map
