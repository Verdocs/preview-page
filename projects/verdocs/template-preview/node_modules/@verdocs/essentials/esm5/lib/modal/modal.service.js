/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { find } from 'lodash';
var ModalService = /** @class */ (function () {
    function ModalService() {
        this.modals = [];
        this.subject = new Subject();
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    ModalService.prototype.add = /**
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        this.modals.push(modal);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ModalService.prototype.open = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var modal = find(this.modals, { id: id });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ModalService.prototype.close = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var modal = find(this.modals, { id: id });
        modal.close();
    };
    /**
     * @param {?} componentData
     * @return {?}
     */
    ModalService.prototype.setComponentData = /**
     * @param {?} componentData
     * @return {?}
     */
    function (componentData) {
        this.componentData = componentData;
        this.subject.next(componentData);
    };
    /**
     * @return {?}
     */
    ModalService.prototype.getComponentData = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    ModalService.decorators = [
        { type: Injectable }
    ];
    return ModalService;
}());
export { ModalService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.componentData;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.subject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL2Vzc2VudGlhbHMvIiwic291cmNlcyI6WyJsaWIvbW9kYWwvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUU3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRzlCO0lBQUE7UUFFVSxXQUFNLEdBQXdCLEVBQUUsQ0FBQztRQUVqQyxZQUFPLEdBQTJCLElBQUksT0FBTyxFQUFpQixDQUFDO0lBdUJ6RSxDQUFDOzs7OztJQXJCQywwQkFBRzs7OztJQUFILFVBQUksS0FBVTtRQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsMkJBQUk7Ozs7SUFBSixVQUFLLEVBQVU7O1lBQ1AsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBRUQsNEJBQUs7Ozs7SUFBTCxVQUFNLEVBQVU7O1lBQ1IsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQzNDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELHVDQUFnQjs7OztJQUFoQixVQUFpQixhQUFrQjtRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsdUNBQWdCOzs7SUFBaEI7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDckMsQ0FBQzs7Z0JBMUJGLFVBQVU7O0lBMkJYLG1CQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0ExQlksWUFBWTs7Ozs7O0lBQ3ZCLDhCQUF5Qzs7Ozs7SUFDekMscUNBQTJCOzs7OztJQUMzQiwrQkFBdUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0ICwgIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbXBvbmVudERhdGEgfSBmcm9tICdAdmVyZG9jcy9zZGsnO1xuaW1wb3J0IHsgZmluZCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBNYXREaWFsb2dSZWYgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTW9kYWxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBtb2RhbHM6IE1hdERpYWxvZ1JlZjxhbnk+W10gPSBbXTtcbiAgcHJpdmF0ZSBjb21wb25lbnREYXRhOiBhbnk7XG4gIHByaXZhdGUgc3ViamVjdDogU3ViamVjdDxDb21wb25lbnREYXRhPiA9IG5ldyBTdWJqZWN0PENvbXBvbmVudERhdGE+KCk7XG5cbiAgYWRkKG1vZGFsOiBhbnkpIHtcbiAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTtcbiAgfVxuXG4gIG9wZW4oaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG1vZGFsID0gZmluZCh0aGlzLm1vZGFscywgeyBpZDogaWQgfSk7XG4gIH1cblxuICBjbG9zZShpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgbW9kYWwgPSBmaW5kKHRoaXMubW9kYWxzLCB7IGlkOiBpZCB9KTtcbiAgICBtb2RhbC5jbG9zZSgpO1xuICB9XG5cbiAgc2V0Q29tcG9uZW50RGF0YShjb21wb25lbnREYXRhOiBhbnkpIHtcbiAgICB0aGlzLmNvbXBvbmVudERhdGEgPSBjb21wb25lbnREYXRhO1xuICAgIHRoaXMuc3ViamVjdC5uZXh0KGNvbXBvbmVudERhdGEpO1xuICB9XG5cbiAgZ2V0Q29tcG9uZW50RGF0YSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cbn1cbiJdfQ==