/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import printJS from 'print-js';
/**
 * @param {?} string
 * @return {?}
 */
export function regParse(string) {
    return JSON.parse(string, (/**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        var prefix;
        if (typeof value !== 'string') {
            return value;
        }
        if (value.length < 8) {
            return value;
        }
        prefix = value.substring(0, 8);
        if (prefix === 'function') {
            return eval('(' + value + ')');
        }
        if (prefix === '_PxEgEr_') {
            return eval(value.slice(8));
        }
        if (prefix === '_NuFrRa_') {
            return eval(value.slice(8));
        }
        return value;
    }));
}
/**
 * @param {?} dataUrl
 * @param {?=} type
 * @return {?}
 */
export function dataURLtoBlob(dataUrl, type) {
    if (type === void 0) { type = 'image/png'; }
    /** @type {?} */
    var arr = dataUrl.split(',');
    /** @type {?} */
    var 
    // mime = arr[0].match(/:(.*?);/)[1],
    bstr = atob(arr[1]);
    /** @type {?} */
    var n = bstr.length;
    /** @type {?} */
    var u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: type });
}
/**
 * @param {?} pdfUrl
 * @return {?}
 */
export function printPdfUrl(pdfUrl) {
    if (typeof (pdfUrl) === 'string') {
        printJS(pdfUrl);
    }
    else {
        console.error('pdfUrl should be provided, instead received: ', pdfUrl);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9lc3NlbnRpYWxzLyIsInNvdXJjZXMiOlsibGliL2Z1bmN0aW9ucy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxPQUFPLE1BQU0sVUFBVSxDQUFDOzs7OztBQUcvQixNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQWM7SUFDckMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Ozs7O0lBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSzs7WUFDeEMsTUFBTTtRQUNWLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFL0IsSUFBSSxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDaEM7UUFDRCxJQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUEwQjtJQUExQixxQkFBQSxFQUFBLGtCQUEwQjs7UUFDekQsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzs7SUFDNUIscUNBQXFDO0lBQ3JDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztRQUNmLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTTs7UUFDZixLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sQ0FBQyxFQUFFLEVBQUU7UUFDVixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMvQjtJQUNELE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzNDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFNO0lBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNoQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDakI7U0FBTTtRQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0NBQStDLEVBQUUsTUFBTSxDQUFFLENBQUM7S0FDekU7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByaW50SlMgZnJvbSAncHJpbnQtanMnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZWdQYXJzZShzdHJpbmc6IHN0cmluZykge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHJpbmcsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgbGV0IHByZWZpeDtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUubGVuZ3RoIDwgOCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBwcmVmaXggPSB2YWx1ZS5zdWJzdHJpbmcoMCwgOCk7XG5cbiAgICBpZiAocHJlZml4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZXZhbCgnKCcgKyB2YWx1ZSArICcpJyk7XG4gICAgfVxuICAgIGlmIChwcmVmaXggPT09ICdfUHhFZ0VyXycpIHtcbiAgICAgIHJldHVybiBldmFsKHZhbHVlLnNsaWNlKDgpKTtcbiAgICB9XG4gICAgaWYgKHByZWZpeCA9PT0gJ19OdUZyUmFfJykge1xuICAgICAgcmV0dXJuIGV2YWwodmFsdWUuc2xpY2UoOCkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YVVSTHRvQmxvYihkYXRhVXJsLCB0eXBlOiBzdHJpbmcgPSAnaW1hZ2UvcG5nJykge1xuICBjb25zdCBhcnIgPSBkYXRhVXJsLnNwbGl0KCcsJyksXG4gICAgLy8gbWltZSA9IGFyclswXS5tYXRjaCgvOiguKj8pOy8pWzFdLFxuICAgIGJzdHIgPSBhdG9iKGFyclsxXSk7XG4gICAgbGV0IG4gPSBic3RyLmxlbmd0aDtcbiAgY29uc3QgdThhcnIgPSBuZXcgVWludDhBcnJheShuKTtcbiAgd2hpbGUgKG4tLSkge1xuICAgIHU4YXJyW25dID0gYnN0ci5jaGFyQ29kZUF0KG4pO1xuICB9XG4gIHJldHVybiBuZXcgQmxvYihbdThhcnJdLCB7IHR5cGU6IHR5cGUgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFBkZlVybChwZGZVcmwpIHtcbiAgaWYgKHR5cGVvZiAocGRmVXJsKSA9PT0gJ3N0cmluZycpIHtcbiAgICBwcmludEpTKHBkZlVybCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcigncGRmVXJsIHNob3VsZCBiZSBwcm92aWRlZCwgaW5zdGVhZCByZWNlaXZlZDogJywgcGRmVXJsICk7XG4gIH1cbn1cbiJdfQ==