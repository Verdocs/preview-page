/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { VerdocsStateService } from '@verdocs/tokens';
import { ProfileModel, ProfileCollection } from '@verdocs/profiles';
import { EssentialsConfigToken } from '../essentials.module';
import { findIndex } from 'lodash';
var AccountService = /** @class */ (function () {
    function AccountService(http, router, vTokenStateService, injector) {
        this.http = http;
        this.router = router;
        this.vTokenStateService = vTokenStateService;
        this.injector = injector;
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.profileLoadingSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.currentOrganizationId = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.backend_url = this._config_token.rAccount_backend_url;
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        this.rSecure_backend_url = this._config_token.rSecure_backend_url;
    }
    /**
     * @return {?}
     */
    AccountService.prototype.getAccountData = /**
     * @return {?}
     */
    function () {
        /***********
        * Refactor *
        ***********/
        // const headerService = this.injector.get(HeaderService);
        // headerService.noHeader.subscribe(status => {
        // if (status === false) {
        this.getProfiles();
        // }
        // });
    };
    /**
     * @return {?}
     */
    AccountService.prototype.getProfiles = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.http.get(this.backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.organization.name === 'realster'; })), 1);
            _this.personalAccountSubject.next(personal[0]);
            _this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            _this.profileData.unshift(personal[0]);
            /** @type {?} */
            var currentIndex = findIndex(_this.profileData, { current: true });
            if (_this.profileData[currentIndex]['first_name']) {
                _this.userFullname = _this.profileData[currentIndex]['first_name'] + ' ' + _this.profileData[currentIndex]['last_name'];
                _this.userInitial = _this.profileData[currentIndex]['first_name'].charAt(0) +
                    _this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                _this.userFullname = '';
            }
            if (_this.profileData[currentIndex]['phone']) {
                _this.userPhone = _this.profileData[currentIndex]['phone'];
            }
            else {
                _this.userPhone = '';
            }
            if (_this.profileData[currentIndex]['email']) {
                _this.userEmail = _this.profileData[currentIndex]['email'];
            }
            _this.userData = {
                name: _this.userFullname,
                initial: _this.userInitial,
                email: _this.userEmail,
                phone: _this.userPhone
            };
            _this.userProfileSubject.next(_this.profileData);
            /** @type {?} */
            var currentProfile = _this.profileData[currentIndex];
            _this.currentProfileSubject.next(currentProfile);
            _this.currentOrganizationId = currentProfile.organization_id;
            _this.userDataSubject.next(_this.userData);
            return _this.userData;
        }));
    };
    /**
     * @param {?} profiles
     * @return {?}
     */
    AccountService.prototype.getProfileCollection = /**
     * @param {?} profiles
     * @return {?}
     */
    function (profiles) {
        /** @type {?} */
        var profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        function (profile) {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        var profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    AccountService.prototype.removeFromProfileData = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var removeIndex = findIndex(this.profileData, { organization_id: name });
        if (removeIndex >= 0) {
            this.profileData.splice(removeIndex, 1);
            this.userProfileSubject.next(this.profileData);
        }
    };
    /**
     * @return {?}
     */
    AccountService.prototype.getAllProfiles = /**
     * @return {?}
     */
    function () {
        return this.http.get(this.backend_url + '/profiles/').toPromise();
    };
    /**
     * @param {?} profile_id
     * @return {?}
     */
    AccountService.prototype.switchProfile = /**
     * @param {?} profile_id
     * @return {?}
     */
    function (profile_id) {
        var _this = this;
        this.profileLoadingSubject.next(true);
        return this.http.post(this.backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.vTokenStateService.setTokens(res.tokens);
                this.profileLoadingSubject.next(false);
                return [2 /*return*/, Promise.resolve(res)];
            });
        }); }));
    };
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    AccountService.prototype.updateTokens = /**
     * @param {?=} sendMessage
     * @return {?}
     */
    function (sendMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        _this.vTokenStateService.updateTokens(_this.rSecure_backend_url).subscribe((/**
                         * @param {?} tokens
                         * @return {?}
                         */
                        function (tokens) {
                            if (tokens && tokens.length > 0) {
                                if (sendMessage) {
                                    // this.snackbar.dismiss();
                                    _this.createSnackbar('Status updated');
                                }
                            }
                            _this.getAccountData();
                            return resolve();
                        }));
                    }))];
            });
        });
    };
    /**
     * @return {?}
     */
    AccountService.prototype.resendEmailVerification = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.post(this.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        function () {
            _this.createSnackbar('Verification email sent');
        }));
    };
    /********************************
    * replace with snackbar service *
    ********************************/
    /**
     * *****************************
     * replace with snackbar service *
     * ******************************
     * @param {?} message
     * @return {?}
     */
    AccountService.prototype.createSnackbar = /**
     * *****************************
     * replace with snackbar service *
     * ******************************
     * @param {?} message
     * @return {?}
     */
    function (message) {
        // let snackbarConfig: MatSnackBarConfig
        // if (window.innerWidth >= 920) {
        //   snackbarConfig = {
        //     verticalPosition: 'bottom',
        //     horizontalPosition: 'left',
        //     duration: 5000
        //   }
        // } else {
        //   snackbarConfig = {
        //     verticalPosition: 'top',
        //     duration: 5000
        //   }
        // }
        // this.snackbar.open(message, null, snackbarConfig);
    };
    /**
     * @param {?} userData
     * @return {?}
     */
    AccountService.prototype.putAccountData = /**
     * @param {?} userData
     * @return {?}
     */
    function (userData) {
        var _this = this;
        if (userData.email) {
            this.userData.email = userData.email;
        }
        if (userData.first_name && userData.last_name) {
            this.userData.name = userData.first_name + ' ' + userData.last_name;
            this.userData.initial = userData.first_name.charAt(0) + userData.last_name.charAt(0);
        }
        if (userData.phone) {
            this.userData.phone = userData.phone || '';
        }
        this.http.put(this.backend_url + '/profiles/' + userData.id, userData).toPromise().then((/**
         * @return {?}
         */
        function () {
            _this.userDataSubject.next(_this.userData);
        }));
    };
    /**
     * @return {?}
     */
    AccountService.prototype.deleteAccount = /**
     * @return {?}
     */
    function () {
        return this.http.delete(this.backend_url).toPromise();
    };
    /**
     * @param {?} email
     * @param {?} oldPassword
     * @param {?} newPassword
     * @return {?}
     */
    AccountService.prototype.changePassword = /**
     * @param {?} email
     * @param {?} oldPassword
     * @param {?} newPassword
     * @return {?}
     */
    function (email, oldPassword, newPassword) {
        return this.http.put(this.backend_url + 'updatepassword', {
            email: email,
            oldPassword: oldPassword,
            newPassword: newPassword
        }).toPromise();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    AccountService.prototype.getNameValidity = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.http.get(this.backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return Promise.resolve(res);
        }));
    };
    /**
     * @param {?} body
     * @return {?}
     */
    AccountService.prototype.createOrganization = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.http.post(this.backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return Promise.resolve(res);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    AccountService.prototype.getOptions = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        var authValue = 'Bearer ' + rTokenCookie['accessToken'];
        /** @type {?} */
        var headers = new Headers({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { 'headers': headers };
    };
    /**
     * @param {?} id
     * @param {?} roleName
     * @param {?} invite
     * @param {?=} redirectReq
     * @return {?}
     */
    AccountService.prototype.fetchToken = /**
     * @param {?} id
     * @param {?} roleName
     * @param {?} invite
     * @param {?=} redirectReq
     * @return {?}
     */
    function (id, roleName, invite, redirectReq) {
        var _this = this;
        /** @type {?} */
        var req = this.rForm_backend_url + ("/envelopes/" + id + "/recipients/" + roleName + "/invitation/" + invite);
        return this.http.get(req, { observe: 'response' }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.vTokenStateService.storeOtherCookie('signer_token', res['headers'].get('signer_token'));
            if (redirectReq) {
                _this.router.navigate(["/view/sign/" + id + "/role/" + roleName], { queryParams: { redirectReq: redirectReq } });
            }
            else {
                _this.router.navigate(["/view/sign/" + id + "/role/" + roleName]);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.router.navigate(["/view/sign/" + id + "/role/" + roleName, { error: err }]);
        }));
    };
    AccountService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AccountService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Router },
        { type: VerdocsStateService },
        { type: Injector }
    ]; };
    return AccountService;
}());
export { AccountService };
if (false) {
    /** @type {?} */
    AccountService.prototype.userDataSubject;
    /** @type {?} */
    AccountService.prototype.userProfileSubject;
    /** @type {?} */
    AccountService.prototype.profileLoadingSubject;
    /** @type {?} */
    AccountService.prototype.currentProfileSubject;
    /** @type {?} */
    AccountService.prototype.personalAccountSubject;
    /** @type {?} */
    AccountService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rSecure_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.currentOrganizationId;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvZXNzZW50aWFscy8iLCJzb3VyY2VzIjpbImxpYi9hY2NvdW50L2FjY291bnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFvQixxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFbkM7SUEyQkUsd0JBQ1UsSUFBZ0IsRUFDaEIsTUFBYyxFQUNkLGtCQUF1QyxFQUN2QyxRQUFrQjtRQUhsQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXFCO1FBQ3ZDLGFBQVEsR0FBUixRQUFRLENBQVU7UUE3QnJCLG9CQUFlLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUMzQyx1QkFBa0IsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQzlDLDBCQUFxQixHQUFHLElBQUksYUFBYSxFQUFXLENBQUM7UUFDckQsMEJBQXFCLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUNqRCwyQkFBc0IsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ2xELG9CQUFlLEdBQUcsSUFBSSxh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LFdBQVcsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDNUc7aUJBQU07Z0JBQ0wsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBYyxFQUFFLGNBQVMsUUFBVSxDQUFDLENBQUMsQ0FBQzthQUM3RDtRQUNILENBQUM7Ozs7UUFBRSxVQUFBLEdBQUc7WUFDSixLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFjLEVBQUUsY0FBUyxRQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlFLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBN09GLFVBQVU7Ozs7Z0JBVEYsVUFBVTtnQkFDVixNQUFNO2dCQUVOLG1CQUFtQjtnQkFKUCxRQUFROztJQXdQN0IscUJBQUM7Q0FBQSxBQTlPRCxJQThPQztTQTdPWSxjQUFjOzs7SUFDekIseUNBQWtEOztJQUNsRCw0Q0FBcUQ7O0lBQ3JELCtDQUE0RDs7SUFDNUQsK0NBQXdEOztJQUN4RCxnREFBeUQ7O0lBQ3pELHlDQUFrRDs7Ozs7SUFFbEQsdUNBQXdDOzs7OztJQUN4QyxzQ0FBMEI7Ozs7O0lBQzFCLHFDQUF5Qjs7Ozs7SUFDekIsbUNBQXVCOzs7OztJQUN2QixtQ0FBdUI7Ozs7O0lBQ3ZCLGtDQUtFOzs7OztJQUVGLHFDQUF5Qjs7Ozs7SUFDekIscUNBQW9COzs7OztJQUNwQiw2Q0FBb0M7Ozs7O0lBQ3BDLDJDQUFrQzs7Ozs7SUFDbEMsK0NBQTZDOzs7OztJQUczQyw4QkFBd0I7Ozs7O0lBQ3hCLGdDQUFzQjs7Ozs7SUFDdEIsNENBQStDOzs7OztJQUMvQyxrQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBWZXJkb2NzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQHZlcmRvY3MvdG9rZW5zJztcbmltcG9ydCB7IFByb2ZpbGVNb2RlbCwgUHJvZmlsZUNvbGxlY3Rpb24gfSBmcm9tICdAdmVyZG9jcy9wcm9maWxlcyc7XG5pbXBvcnQgeyBFc3NlbnRpYWxzQ29uZmlnLCBFc3NlbnRpYWxzQ29uZmlnVG9rZW4gfSBmcm9tICcuLi9lc3NlbnRpYWxzLm1vZHVsZSc7XG5cbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gJ2xvZGFzaCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY2NvdW50U2VydmljZSB7XG4gIHB1YmxpYyB1c2VyRGF0YVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyB1c2VyUHJvZmlsZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBwcm9maWxlTG9hZGluZ1N1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigpO1xuICBwdWJsaWMgY3VycmVudFByb2ZpbGVTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMgcGVyc29uYWxBY2NvdW50U3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcbiAgcHVibGljIHByb2ZpbGVzU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcblxuICBwcml2YXRlIF9jb25maWdfdG9rZW46IEVzc2VudGlhbHNDb25maWc7XG4gIHByaXZhdGUgdXNlckZ1bGxuYW1lID0gJyc7XG4gIHByaXZhdGUgdXNlckluaXRpYWwgPSAnJztcbiAgcHJpdmF0ZSB1c2VyRW1haWwgPSAnJztcbiAgcHJpdmF0ZSB1c2VyUGhvbmUgPSAnJztcbiAgcHJpdmF0ZSB1c2VyRGF0YSA9IHtcbiAgICBuYW1lOiB0aGlzLnVzZXJGdWxsbmFtZSxcbiAgICBpbml0aWFsOiBudWxsLFxuICAgIGVtYWlsOiB0aGlzLnVzZXJFbWFpbCxcbiAgICBwaG9uZTogdGhpcy51c2VyUGhvbmVcbiAgfTtcblxuICBwcml2YXRlIHByb2ZpbGVEYXRhOiBhbnk7XG4gIHByaXZhdGUgYmFja2VuZF91cmw7XG4gIHByaXZhdGUgclNlY3VyZV9iYWNrZW5kX3VybDogc3RyaW5nO1xuICBwcml2YXRlIHJGb3JtX2JhY2tlbmRfdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgY3VycmVudE9yZ2FuaXphdGlvbklkOiBzdHJpbmcgPSBudWxsO1xuICBcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSB2VG9rZW5TdGF0ZVNlcnZpY2U6IFZlcmRvY3NTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdGhpcy5fY29uZmlnX3Rva2VuID0gdGhpcy5pbmplY3Rvci5nZXQoRXNzZW50aWFsc0NvbmZpZ1Rva2VuKTtcbiAgICB0aGlzLmJhY2tlbmRfdXJsID0gdGhpcy5fY29uZmlnX3Rva2VuLnJBY2NvdW50X2JhY2tlbmRfdXJsO1xuICAgIHRoaXMuckZvcm1fYmFja2VuZF91cmwgPSB0aGlzLl9jb25maWdfdG9rZW4uckZvcm1fYmFja2VuZF91cmw7XG4gICAgdGhpcy5yU2VjdXJlX2JhY2tlbmRfdXJsID0gdGhpcy5fY29uZmlnX3Rva2VuLnJTZWN1cmVfYmFja2VuZF91cmw7XG4gIH1cblxuICBnZXRBY2NvdW50RGF0YSgpIHtcbiAgICAvKioqKioqKioqKipcbiAgICAqIFJlZmFjdG9yICpcbiAgICAqKioqKioqKioqKi9cbiAgICAvLyBjb25zdCBoZWFkZXJTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoSGVhZGVyU2VydmljZSk7XG4gICAgLy8gaGVhZGVyU2VydmljZS5ub0hlYWRlci5zdWJzY3JpYmUoc3RhdHVzID0+IHtcbiAgICAgIC8vIGlmIChzdGF0dXMgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZ2V0UHJvZmlsZXMoKTtcbiAgICAgIC8vIH1cbiAgICAvLyB9KTtcbiAgfVxuXG4gIGdldFByb2ZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuYmFja2VuZF91cmwgKyAnL3Byb2ZpbGVzJykudG9Qcm9taXNlKCkudGhlbigocmVzOiBhbnlbXSkgPT4ge1xuICAgICAgY29uc3QgcGVyc29uYWwgPSByZXMuc3BsaWNlKGZpbmRJbmRleChyZXMsIHAgPT4gcC5vcmdhbml6YXRpb24ubmFtZSA9PT0gJ3JlYWxzdGVyJyksIDEpO1xuICAgICAgdGhpcy5wZXJzb25hbEFjY291bnRTdWJqZWN0Lm5leHQocGVyc29uYWxbMF0pO1xuICAgICAgdGhpcy5wcm9maWxlRGF0YSA9IHJlcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgIGlmIChhLm9yZ2FuaXphdGlvbi5uYW1lIDwgYi5vcmdhbml6YXRpb24ubmFtZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5vcmdhbml6YXRpb24ubmFtZSA+IGIub3JnYW5pemF0aW9uLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wcm9maWxlRGF0YS51bnNoaWZ0KHBlcnNvbmFsWzBdKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IGZpbmRJbmRleCh0aGlzLnByb2ZpbGVEYXRhLCB7IGN1cnJlbnQ6IHRydWUgfSk7XG4gICAgICBpZiAodGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdWydmaXJzdF9uYW1lJ10pIHtcbiAgICAgICAgdGhpcy51c2VyRnVsbG5hbWUgPSB0aGlzLnByb2ZpbGVEYXRhW2N1cnJlbnRJbmRleF1bJ2ZpcnN0X25hbWUnXSArICcgJyArIHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnbGFzdF9uYW1lJ107XG4gICAgICAgIHRoaXMudXNlckluaXRpYWwgPSB0aGlzLnByb2ZpbGVEYXRhW2N1cnJlbnRJbmRleF1bJ2ZpcnN0X25hbWUnXS5jaGFyQXQoMCkgK1xuICAgICAgICAgIHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnbGFzdF9uYW1lJ10uY2hhckF0KDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51c2VyRnVsbG5hbWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb2ZpbGVEYXRhW2N1cnJlbnRJbmRleF1bJ3Bob25lJ10pIHtcbiAgICAgICAgdGhpcy51c2VyUGhvbmUgPSB0aGlzLnByb2ZpbGVEYXRhW2N1cnJlbnRJbmRleF1bJ3Bob25lJ107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVzZXJQaG9uZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnZW1haWwnXSkge1xuICAgICAgICB0aGlzLnVzZXJFbWFpbCA9IHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnZW1haWwnXTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXNlckRhdGEgPSB7XG4gICAgICAgIG5hbWU6IHRoaXMudXNlckZ1bGxuYW1lLFxuICAgICAgICBpbml0aWFsOiB0aGlzLnVzZXJJbml0aWFsLFxuICAgICAgICBlbWFpbDogdGhpcy51c2VyRW1haWwsXG4gICAgICAgIHBob25lOiB0aGlzLnVzZXJQaG9uZVxuICAgICAgfTtcbiAgICAgIHRoaXMudXNlclByb2ZpbGVTdWJqZWN0Lm5leHQodGhpcy5wcm9maWxlRGF0YSk7XG4gICAgICBjb25zdCBjdXJyZW50UHJvZmlsZSA9IHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XTtcbiAgICAgIHRoaXMuY3VycmVudFByb2ZpbGVTdWJqZWN0Lm5leHQoY3VycmVudFByb2ZpbGUpO1xuICAgICAgdGhpcy5jdXJyZW50T3JnYW5pemF0aW9uSWQgPSBjdXJyZW50UHJvZmlsZS5vcmdhbml6YXRpb25faWQ7XG4gICAgICB0aGlzLnVzZXJEYXRhU3ViamVjdC5uZXh0KHRoaXMudXNlckRhdGEpO1xuICAgICAgcmV0dXJuIHRoaXMudXNlckRhdGE7XG4gICAgfSk7XG4gIH1cblxuICBnZXRQcm9maWxlQ29sbGVjdGlvbihwcm9maWxlcykge1xuICAgIGNvbnN0IHByb2ZpbGVNb2RlbHM6IFByb2ZpbGVNb2RlbFtdID0gW107XG4gICAgcHJvZmlsZXMuZm9yRWFjaChwcm9maWxlID0+IHtcbiAgICAgIHByb2ZpbGVNb2RlbHMucHVzaChuZXcgUHJvZmlsZU1vZGVsKHByb2ZpbGUpKTtcbiAgICB9KTtcbiAgICBjb25zdCBwcm9maWxlQ29sbGVjdGlvbiA9IG5ldyBQcm9maWxlQ29sbGVjdGlvbihwcm9maWxlTW9kZWxzKTtcbiAgICByZXR1cm4gcHJvZmlsZUNvbGxlY3Rpb247XG4gIH1cblxuICByZW1vdmVGcm9tUHJvZmlsZURhdGEoaWQpIHtcbiAgICBjb25zdCByZW1vdmVJbmRleCA9IGZpbmRJbmRleCh0aGlzLnByb2ZpbGVEYXRhLCB7IG9yZ2FuaXphdGlvbl9pZDogbmFtZSB9KTtcbiAgICBpZiAocmVtb3ZlSW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5wcm9maWxlRGF0YS5zcGxpY2UocmVtb3ZlSW5kZXgsIDEpO1xuICAgICAgdGhpcy51c2VyUHJvZmlsZVN1YmplY3QubmV4dCh0aGlzLnByb2ZpbGVEYXRhKTtcbiAgICB9XG4gIH1cblxuICBnZXRBbGxQcm9maWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxhbnlbXT4odGhpcy5iYWNrZW5kX3VybCArICcvcHJvZmlsZXMvJykudG9Qcm9taXNlKCk7XG4gIH1cblxuICBzd2l0Y2hQcm9maWxlKHByb2ZpbGVfaWQpIHtcbiAgICB0aGlzLnByb2ZpbGVMb2FkaW5nU3ViamVjdC5uZXh0KHRydWUpO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmJhY2tlbmRfdXJsICsgJy9wcm9maWxlcy8nICsgcHJvZmlsZV9pZCArICcvc3dpdGNoJywgbnVsbCkudG9Qcm9taXNlKCkudGhlbihhc3luYyAocmVzOiBhbnkpID0+IHtcbiAgICAgIHRoaXMudlRva2VuU3RhdGVTZXJ2aWNlLnNldFRva2VucyhyZXMudG9rZW5zKTtcbiAgICAgIHRoaXMucHJvZmlsZUxvYWRpbmdTdWJqZWN0Lm5leHQoZmFsc2UpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlVG9rZW5zKHNlbmRNZXNzYWdlPzogYm9vbGVhbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnZUb2tlblN0YXRlU2VydmljZS51cGRhdGVUb2tlbnModGhpcy5yU2VjdXJlX2JhY2tlbmRfdXJsKS5zdWJzY3JpYmUodG9rZW5zID0+IHtcbiAgICAgICAgaWYgKHRva2VucyAmJiB0b2tlbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChzZW5kTWVzc2FnZSkge1xuICAgICAgICAgICAgLy8gdGhpcy5zbmFja2Jhci5kaXNtaXNzKCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVNuYWNrYmFyKCdTdGF0dXMgdXBkYXRlZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmdldEFjY291bnREYXRhKCk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgcmVzZW5kRW1haWxWZXJpZmljYXRpb24oKSB7XG4gICAgdGhpcy5odHRwLnBvc3QodGhpcy5yU2VjdXJlX2JhY2tlbmRfdXJsICsgJy91c2VyL2VtYWlsX3ZlcmlmaWNhdGlvbicsIG51bGwpLnRvUHJvbWlzZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5jcmVhdGVTbmFja2JhcignVmVyaWZpY2F0aW9uIGVtYWlsIHNlbnQnKTtcbiAgICB9KTtcbiAgfVxuICAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgKiByZXBsYWNlIHdpdGggc25hY2tiYXIgc2VydmljZSAqXG4gICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBjcmVhdGVTbmFja2JhcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICAvLyBsZXQgc25hY2tiYXJDb25maWc6IE1hdFNuYWNrQmFyQ29uZmlnXG4gICAgLy8gaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDkyMCkge1xuICAgIC8vICAgc25hY2tiYXJDb25maWcgPSB7XG4gICAgLy8gICAgIHZlcnRpY2FsUG9zaXRpb246ICdib3R0b20nLFxuICAgIC8vICAgICBob3Jpem9udGFsUG9zaXRpb246ICdsZWZ0JyxcbiAgICAvLyAgICAgZHVyYXRpb246IDUwMDBcbiAgICAvLyAgIH1cbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vICAgc25hY2tiYXJDb25maWcgPSB7XG4gICAgLy8gICAgIHZlcnRpY2FsUG9zaXRpb246ICd0b3AnLFxuICAgIC8vICAgICBkdXJhdGlvbjogNTAwMFxuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICAvLyB0aGlzLnNuYWNrYmFyLm9wZW4obWVzc2FnZSwgbnVsbCwgc25hY2tiYXJDb25maWcpO1xuICB9XG5cbiAgcHV0QWNjb3VudERhdGEodXNlckRhdGEpIHtcbiAgICBpZiAodXNlckRhdGEuZW1haWwpIHtcbiAgICAgIHRoaXMudXNlckRhdGEuZW1haWwgPSB1c2VyRGF0YS5lbWFpbDtcbiAgICB9XG4gICAgaWYgKHVzZXJEYXRhLmZpcnN0X25hbWUgJiYgdXNlckRhdGEubGFzdF9uYW1lKSB7XG4gICAgICB0aGlzLnVzZXJEYXRhLm5hbWUgPSB1c2VyRGF0YS5maXJzdF9uYW1lICsgJyAnICsgdXNlckRhdGEubGFzdF9uYW1lO1xuICAgICAgdGhpcy51c2VyRGF0YS5pbml0aWFsID0gdXNlckRhdGEuZmlyc3RfbmFtZS5jaGFyQXQoMCkgKyB1c2VyRGF0YS5sYXN0X25hbWUuY2hhckF0KDApO1xuICAgIH1cbiAgICBpZiAodXNlckRhdGEucGhvbmUpIHtcbiAgICAgIHRoaXMudXNlckRhdGEucGhvbmUgPSB1c2VyRGF0YS5waG9uZSB8fCAnJztcbiAgICB9XG4gICAgdGhpcy5odHRwLnB1dCh0aGlzLmJhY2tlbmRfdXJsICsgJy9wcm9maWxlcy8nICsgdXNlckRhdGEuaWQsIHVzZXJEYXRhKS50b1Byb21pc2UoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMudXNlckRhdGFTdWJqZWN0Lm5leHQodGhpcy51c2VyRGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVBY2NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuYmFja2VuZF91cmwpLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgY2hhbmdlUGFzc3dvcmQoZW1haWwsIG9sZFBhc3N3b3JkLCBuZXdQYXNzd29yZCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHRoaXMuYmFja2VuZF91cmwgKyAndXBkYXRlcGFzc3dvcmQnLCB7XG4gICAgICBlbWFpbCxcbiAgICAgIG9sZFBhc3N3b3JkLFxuICAgICAgbmV3UGFzc3dvcmRcbiAgICB9KS50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGdldE5hbWVWYWxpZGl0eShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5iYWNrZW5kX3VybCArICcvb3JnYW5pemF0aW9ucy9pc192YWxpZD9uYW1lPScgKyBuYW1lLCB0aGlzLmdldE9wdGlvbnMoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gIH1cblxuICBjcmVhdGVPcmdhbml6YXRpb24oYm9keSkge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmJhY2tlbmRfdXJsICsgJy9vcmdhbml6YXRpb25zJywgYm9keSwgdGhpcy5nZXRPcHRpb25zKCkpXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRPcHRpb25zKCk6IGFueSB7XG4gICAgY29uc3QgclRva2VuQ29va2llID0gdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2UuZ2V0T3RoZXJDb29raWVPYmplY3QoJ3JBY2NvdW50X1ZlcmRvY3MnKTtcbiAgICBjb25zdCBhdXRoVmFsdWUgPSAnQmVhcmVyICcgKyByVG9rZW5Db29raWVbJ2FjY2Vzc1Rva2VuJ107XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgICdQcmFnbWEnOiAnbm8tY2FjaGUnLFxuICAgICAgJ0V4cGlyZXMnOiAnU2F0LCAwMSBKYW4gMjAwMCAwMDowMDowMCBHTVQnLFxuICAgICAgJ0lmLU1vZGlmaWVkLVNpbmNlJzogJzAnLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aFZhbHVlLFxuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH0pO1xuICAgIHJldHVybiB7ICdoZWFkZXJzJzogaGVhZGVycyB9O1xuICB9XG5cbiAgcHVibGljIGZldGNoVG9rZW4oaWQ6IHN0cmluZywgcm9sZU5hbWU6IHN0cmluZywgaW52aXRlOiBzdHJpbmcsIHJlZGlyZWN0UmVxPzogc3RyaW5nKSB7XG4gICAgY29uc3QgcmVxID0gdGhpcy5yRm9ybV9iYWNrZW5kX3VybCArIGAvZW52ZWxvcGVzLyR7aWR9L3JlY2lwaWVudHMvJHtyb2xlTmFtZX0vaW52aXRhdGlvbi8ke2ludml0ZX1gO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueT4ocmVxLCB7b2JzZXJ2ZTogJ3Jlc3BvbnNlJ30pLnN1YnNjcmliZShyZXMgPT4ge1xuICAgICAgdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2Uuc3RvcmVPdGhlckNvb2tpZSgnc2lnbmVyX3Rva2VuJywgcmVzWydoZWFkZXJzJ10uZ2V0KCdzaWduZXJfdG9rZW4nKSk7XG4gICAgICBpZiAocmVkaXJlY3RSZXEpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2Avdmlldy9zaWduLyR7aWR9L3JvbGUvJHtyb2xlTmFtZX1gXSwgeyBxdWVyeVBhcmFtczogeyByZWRpcmVjdFJlcTogcmVkaXJlY3RSZXEgfSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgL3ZpZXcvc2lnbi8ke2lkfS9yb2xlLyR7cm9sZU5hbWV9YF0pO1xuICAgICAgfVxuICAgIH0sIGVyciA9PiB7XG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC92aWV3L3NpZ24vJHtpZH0vcm9sZS8ke3JvbGVOYW1lfWAsIHsgZXJyb3I6IGVyciB9XSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==