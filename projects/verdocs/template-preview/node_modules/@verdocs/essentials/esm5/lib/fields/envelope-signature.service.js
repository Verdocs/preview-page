/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { DocumentsService, FieldData } from '@verdocs/sdk';
import { VerdocsStateService } from '@verdocs/tokens';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { EssentialsConfigToken } from '../essentials.module';
import { dataURLtoBlob } from '../functions/utils';
var SignatureService = /** @class */ (function () {
    function SignatureService(httpClient, injector, envelopeSvc, vTokenStateService) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.envelopeSvc = envelopeSvc;
        this.vTokenStateService = vTokenStateService;
        this.workingField = new FieldData({ order: 0, fName: '' });
        this.fields = [];
        this._total = -1;
        this._fields = new ReplaySubject();
        this._recipient = new ReplaySubject();
        this._showSig = new ReplaySubject();
        this._signedFields = new BehaviorSubject({});
        this._envId = new ReplaySubject();
        this._rName = new ReplaySubject();
        this.signImgSubject = new ReplaySubject();
        this.initialImgSubject = new ReplaySubject();
        this.initialIdSubject = new ReplaySubject();
        this.signatureIdSubject = new ReplaySubject();
        this.signedFields = {};
        this.mode = '';
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
        this.envUrl = this._rForm_backend_url + "/envelopes";
    }
    /**
     * @param {?} payment
     * @return {?}
     */
    SignatureService.prototype.setWorkingPayment = /**
     * @param {?} payment
     * @return {?}
     */
    function (payment) {
        this.workingPayment = payment;
    };
    /**
     * @param {?} fields
     * @return {?}
     */
    SignatureService.prototype.updateFields = /**
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        this.fields = fields;
        this._fields.next(this.fields);
    };
    /**
     * @return {?}
     */
    SignatureService.prototype.postSignatureBlob = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var blobFile = this.signatureBlob;
        /** @type {?} */
        var formData = new FormData();
        formData.append('signature', blobFile, blobFile['name']);
        /** @type {?} */
        var request = new HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload signature image');
            }
        }));
    };
    /**
     * @return {?}
     */
    SignatureService.prototype.postInitialBlob = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var blobFile = this.initialBlob;
        /** @type {?} */
        var formData = new FormData();
        formData.append('initial', blobFile, blobFile['name']);
        /** @type {?} */
        var request = new HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload Initial');
            }
        }));
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    SignatureService.prototype.toggleSig = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        this._showSig.next(bool);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SignatureService.prototype.setSigId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SignatureService.prototype.setInitialId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.initialId = id;
        this.initialIdSubject.next(id);
    };
    /**
     * @param {?} url
     * @return {?}
     */
    SignatureService.prototype.setSignImg = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.signImg = url;
        this.signImgSubject.next(this.signImg);
    };
    /**
     * @return {?}
     */
    SignatureService.prototype.getSignImg = /**
     * @return {?}
     */
    function () {
        return this.signImg;
    };
    /**
     * @param {?} url
     * @return {?}
     */
    SignatureService.prototype.setInitialImg = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.initialImg = url;
        this.initialImgSubject.next(this.initialImg);
    };
    /**
     * @return {?}
     */
    SignatureService.prototype.getInitialImg = /**
     * @return {?}
     */
    function () {
        return this.initialImg;
    };
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    SignatureService.prototype.putSignatureField = /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    function (envelopeId, fieldName, signatureId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var ipAddress;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPublicIp()];
                    case 1:
                        ipAddress = _a.sent();
                        this.httpClient
                            .put(this.envUrl + ("/" + envelopeId + "/fields/" + fieldName + "/signature/" + signatureId), {
                            ip_address: ipAddress
                        }).toPromise().then((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            return resolve(res);
                        }));
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    SignatureService.prototype.putInitialField = /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    function (envelopeId, fieldName, initialId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var ipAddress;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPublicIp()];
                    case 1:
                        ipAddress = _a.sent();
                        this.httpClient
                            .put(this.envUrl + ("/" + envelopeId + "/fields/" + fieldName + "/initial/" + initialId), {
                            ip_address: ipAddress
                        }).toPromise().then((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            return resolve(res);
                        }));
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    // refactor it to 4 functions
    // refactor it to 4 functions
    /**
     * @param {?} envelopeId
     * @param {?=} ifPrepared
     * @return {?}
     */
    SignatureService.prototype.updateEnvelopeField = 
    // refactor it to 4 functions
    /**
     * @param {?} envelopeId
     * @param {?=} ifPrepared
     * @return {?}
     */
    function (envelopeId, ifPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            var result = this.getEnvelopeFieldValue(ifPrepared);
            this.putEnvelopeField(envelopeId, result);
        }
    };
    /**
     * @param {?=} isPrepared
     * @return {?}
     */
    SignatureService.prototype.getEnvelopeFieldValue = /**
     * @param {?=} isPrepared
     * @return {?}
     */
    function (isPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            var result = {
                value: ''
            };
            if (typeof (isPrepared) === 'boolean') {
                result['prepared'] = isPrepared;
            }
            switch (this.workingField.type.toLowerCase()) {
                case 'textbox':
                case 'checkbox':
                case 'date':
                    result.value = this.workingField.value;
                    break;
                default:
                    break;
            }
            return result;
        }
        return null;
    };
    /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    SignatureService.prototype.putEnvelopeField = /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    function (envelopeId, result) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.httpClient
                .put(_this.envUrl + ("/" + envelopeId + "/fields/" + _this.workingField.fName), result).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return resolve(res);
            }));
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    SignatureService.prototype.updateGroupedField = /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    function (envelopeId, body, fieldName, ifPrepared) {
        var _this = this;
        if (typeof (ifPrepared) === 'boolean') {
            body['prepared'] = ifPrepared;
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.httpClient
                .put(_this.envUrl + ("/" + envelopeId + "/fields/" + fieldName), body).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return resolve(res);
            }));
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} setPrepared
     * @return {?}
     */
    SignatureService.prototype.prepareEnvelopeField = /**
     * @param {?} envelopeId
     * @param {?} setPrepared
     * @return {?}
     */
    function (envelopeId, setPrepared) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fieldType, fieldResponse;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.workingField && this.workingField.type)) return [3 /*break*/, 3];
                        fieldType = this.workingField.type.toLowerCase();
                        if (!(fieldType !== 'textbox' && fieldType !== 'date' && fieldType !== 'checkbox')) return [3 /*break*/, 1];
                        return [2 /*return*/, false];
                    case 1: return [4 /*yield*/, this.updateEnvelopeField(envelopeId, setPrepared)];
                    case 2:
                        fieldResponse = _a.sent();
                        if (fieldResponse) {
                            return [2 /*return*/, fieldResponse.prepared];
                        }
                        _a.label = 3;
                    case 3: return [2 /*return*/, false];
                }
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    SignatureService.prototype.getPublicIp = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var apiUrl = 'https://api.ipify.org?format=jsonp';
        /** @type {?} */
        var callback = 'callback=JSONP_CALLBACK';
        return this.httpClient
            .jsonp(apiUrl, callback)
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res['ip'];
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error('Failed to get ip', err);
            return 'ip_unavailable';
        }));
    };
    /**
     * @param {?} fName
     * @param {?} result
     * @param {?} vName
     * @param {?} pageNum
     * @param {?} id
     * @param {?} required
     * @param {?} order
     * @param {?} type
     * @return {?}
     */
    SignatureService.prototype.updateCurrentField = /**
     * @param {?} fName
     * @param {?} result
     * @param {?} vName
     * @param {?} pageNum
     * @param {?} id
     * @param {?} required
     * @param {?} order
     * @param {?} type
     * @return {?}
     */
    function (fName, result, vName, pageNum, id, required, order, type) {
        this.workingField.fName = fName;
        this.workingField.value = result;
        this.workingField.pageNum = pageNum;
        this.workingField.id = id;
        this.workingField.vName = vName;
        this.workingField.required = required;
        this.workingField.order = order;
        this.workingField.type = type;
    };
    /**
     * @param {?} fields
     * @return {?}
     */
    SignatureService.prototype.setCurrentFields = /**
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        this.currentFields = fields;
    };
    Object.defineProperty(SignatureService.prototype, "currField", {
        get: /**
         * @return {?}
         */
        function () {
            return this.workingField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} pageNum
     * @param {?} id
     * @return {?}
     */
    SignatureService.prototype.errorMessages = /**
     * @param {?} pageNum
     * @param {?} id
     * @return {?}
     */
    function (pageNum, id) {
        return this.currentFields[pageNum][id]['error'];
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SignatureService.prototype.setEnvId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this._envId.next(id);
    };
    /**
     * @param {?} role
     * @return {?}
     */
    SignatureService.prototype.setrName = /**
     * @param {?} role
     * @return {?}
     */
    function (role) {
        this.rName = role;
        this._rName.next(role);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SignatureService.prototype.getSignatureUrl = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data) {
            /** @type {?} */
            var blob = dataURLtoBlob(data);
            /** @type {?} */
            var url = URL.createObjectURL(blob);
            return url;
        }
        return null;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SignatureService.prototype.setSignatureData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var blob = dataURLtoBlob(data);
        /** @type {?} */
        var url = URL.createObjectURL(blob);
        this.signatureBlob = blob;
        this.setSignImg(url);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    SignatureService.prototype.setInitialData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var blob = dataURLtoBlob(data);
        /** @type {?} */
        var url = URL.createObjectURL(blob);
        this.initialBlob = blob;
        this.setInitialImg(url);
    };
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    SignatureService.prototype.updateSigned = /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    function (fName, result) {
        this.workingField['value'] = 'signed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    };
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    SignatureService.prototype.updateInitialed = /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    function (fName, result) {
        this.workingField['value'] = 'initialed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SignatureService.prototype.setSignatureId = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    };
    /**
     * @param {?} recipient
     * @return {?}
     */
    SignatureService.prototype.setRecipient = /**
     * @param {?} recipient
     * @return {?}
     */
    function (recipient) {
        this._recipient.next(recipient);
    };
    /**
     * @param {?} t
     * @return {?}
     */
    SignatureService.prototype.setTotal = /**
     * @param {?} t
     * @return {?}
     */
    function (t) {
        this._total = t;
    };
    SignatureService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SignatureService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Injector },
        { type: DocumentsService },
        { type: VerdocsStateService }
    ]; };
    return SignatureService;
}());
export { SignatureService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.currentFields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingField;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.fields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._total;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialImg;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingPayment;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.recipients;
    /** @type {?} */
    SignatureService.prototype._fields;
    /** @type {?} */
    SignatureService.prototype._recipient;
    /** @type {?} */
    SignatureService.prototype._showSig;
    /** @type {?} */
    SignatureService.prototype._signedFields;
    /** @type {?} */
    SignatureService.prototype._envId;
    /** @type {?} */
    SignatureService.prototype._rName;
    /** @type {?} */
    SignatureService.prototype.signImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialIdSubject;
    /** @type {?} */
    SignatureService.prototype.signatureIdSubject;
    /** @type {?} */
    SignatureService.prototype.signedFields;
    /** @type {?} */
    SignatureService.prototype.signImg;
    /** @type {?} */
    SignatureService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envelopeSvc;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.vTokenStateService;
}
//# sourceMappingURL=data:application/json;base64,