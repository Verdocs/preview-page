/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { SignatureService } from './envelope-signature.service';
var EnvelopeViewService = /** @class */ (function () {
    function EnvelopeViewService(signatureService) {
        var _this = this;
        this.signatureService = signatureService;
        this.recipientSubject = new ReplaySubject();
        this.jumpCoordinateSubject = new ReplaySubject();
        this.fieldTypeSubject = new ReplaySubject();
        this.pdfUrlSubject = new ReplaySubject();
        this.pdfBlobSubject = new ReplaySubject();
        this.toggleNextSubject = new ReplaySubject();
        this.viewModeSubject = new ReplaySubject();
        this.agreedSubject = new ReplaySubject(1, 500);
        this.attachmentsSubject = new ReplaySubject();
        this.formValiditySubject = new ReplaySubject();
        this.requestFormValiditySubject = new ReplaySubject();
        this.signatureService._rName.subscribe((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            _this.rName = role;
        }));
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    EnvelopeViewService.prototype.setMode = /**
     * @param {?} mode
     * @return {?}
     */
    function (mode) {
        this.mode = mode;
        this.viewModeSubject.next(this.mode);
    };
    /**
     * @param {?} signatureService
     * @return {?}
     */
    EnvelopeViewService.prototype.setSignatureService = /**
     * @param {?} signatureService
     * @return {?}
     */
    function (signatureService) {
        this.signatureService = signatureService;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnvelopeViewService.prototype.requestFormValidity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.requestFormValiditySubject.next(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    EnvelopeViewService.prototype.setFormValidityData = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.formValiditySubject.next(value);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    EnvelopeViewService.prototype.ifBelongsToPreparer = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        return type === 'textbox' || type === 'date' || type === 'checkbox';
    };
    /**
     * @param {?} field
     * @return {?}
     */
    EnvelopeViewService.prototype.ifBelongsToCurrentRecipient = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        if (this.mode === 'prepareview') {
            return this.ifBelongsToPreparer(field.controlType);
        }
        else {
            return field.recipientRole === this.rName;
        }
    };
    EnvelopeViewService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EnvelopeViewService.ctorParameters = function () { return [
        { type: SignatureService }
    ]; };
    return EnvelopeViewService;
}());
export { EnvelopeViewService };
if (false) {
    /** @type {?} */
    EnvelopeViewService.prototype.recipientSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.jumpCoordinateSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.fieldTypeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfUrlSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfBlobSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.toggleNextSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.viewModeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.agreedSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.attachmentsSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.formValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.requestFormValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.signatureService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52ZWxvcGUtdmlldy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvZXNzZW50aWFscy8iLCJzb3VyY2VzIjpbImxpYi9maWVsZHMvZW52ZWxvcGUtdmlldy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFaEU7SUFpQkUsNkJBQ1UsZ0JBQWtDO1FBRDVDLGlCQU1DO1FBTFMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWhCckMscUJBQWdCLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUM1QywwQkFBcUIsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ2pELHFCQUFnQixHQUFHLElBQUksYUFBYSxFQUFVLENBQUM7UUFDL0Msa0JBQWEsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ3pDLG1CQUFjLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUMxQyxzQkFBaUIsR0FBRyxJQUFJLGFBQWEsRUFBVyxDQUFDO1FBQ2pELG9CQUFlLEdBQUcsSUFBSSxhQUFhLEVBQVUsQ0FBQztRQUM5QyxrQkFBYSxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCx1QkFBa0IsR0FBRyxJQUFJLGFBQWEsRUFBUyxDQUFDO1FBQ2hELHdCQUFtQixHQUFHLElBQUksYUFBYSxFQUFTLENBQUM7UUFDakQsK0JBQTBCLEdBQUcsSUFBSSxhQUFhLEVBQVcsQ0FBQztRQVEvRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLElBQUk7WUFDekMsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDcEIsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVELHFDQUFPOzs7O0lBQVAsVUFBUSxJQUFJO1FBQ1YsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsaURBQW1COzs7O0lBQW5CLFVBQW9CLGdCQUFnQjtRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQzs7Ozs7SUFFRCxpREFBbUI7Ozs7SUFBbkIsVUFBb0IsS0FBYztRQUNoQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7O0lBRUQsaURBQW1COzs7O0lBQW5CLFVBQW9CLEtBQVk7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDOzs7OztJQUVELGlEQUFtQjs7OztJQUFuQixVQUFvQixJQUFJO1FBQ3RCLE9BQU8sSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUM7SUFDdEUsQ0FBQzs7Ozs7SUFFRCx5REFBMkI7Ozs7SUFBM0IsVUFBNEIsS0FBSztRQUMvQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDM0M7SUFDSCxDQUFDOztnQkFwREYsVUFBVTs7OztnQkFGRixnQkFBZ0I7O0lBdUR6QiwwQkFBQztDQUFBLEFBckRELElBcURDO1NBcERZLG1CQUFtQjs7O0lBQzlCLCtDQUFtRDs7SUFDbkQsb0RBQXdEOztJQUN4RCwrQ0FBc0Q7O0lBQ3RELDRDQUFnRDs7SUFDaEQsNkNBQWlEOztJQUNqRCxnREFBd0Q7O0lBQ3hELDhDQUFxRDs7SUFDckQsNENBQTBEOztJQUMxRCxpREFBdUQ7O0lBQ3ZELGtEQUF3RDs7SUFDeEQseURBQWlFOztJQUNqRSxtQ0FBb0I7Ozs7O0lBRXBCLG9DQUFzQjs7Ozs7SUFHcEIsK0NBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBTaWduYXR1cmVTZXJ2aWNlIH0gZnJvbSAnLi9lbnZlbG9wZS1zaWduYXR1cmUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFbnZlbG9wZVZpZXdTZXJ2aWNlIHtcbiAgcHVibGljIHJlY2lwaWVudFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBqdW1wQ29vcmRpbmF0ZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBmaWVsZFR5cGVTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigpO1xuICBwdWJsaWMgcGRmVXJsU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcbiAgcHVibGljIHBkZkJsb2JTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMgdG9nZ2xlTmV4dFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigpO1xuICBwdWJsaWMgdmlld01vZGVTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigpO1xuICBwdWJsaWMgYWdyZWVkU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEsIDUwMCk7XG4gIHB1YmxpYyBhdHRhY2htZW50c1N1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnlbXT4oKTtcbiAgcHVibGljIGZvcm1WYWxpZGl0eVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnlbXT4oKTtcbiAgcHVibGljIHJlcXVlc3RGb3JtVmFsaWRpdHlTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgcHVibGljIG1vZGU6IHN0cmluZztcblxuICBwcml2YXRlIHJOYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBzaWduYXR1cmVTZXJ2aWNlOiBTaWduYXR1cmVTZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuc2lnbmF0dXJlU2VydmljZS5fck5hbWUuc3Vic2NyaWJlKHJvbGUgPT4ge1xuICAgICAgdGhpcy5yTmFtZSA9IHJvbGU7XG4gICAgfSk7XG4gIH1cblxuICBzZXRNb2RlKG1vZGUpIHtcbiAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIHRoaXMudmlld01vZGVTdWJqZWN0Lm5leHQodGhpcy5tb2RlKTtcbiAgfVxuXG4gIHNldFNpZ25hdHVyZVNlcnZpY2Uoc2lnbmF0dXJlU2VydmljZSkge1xuICAgIHRoaXMuc2lnbmF0dXJlU2VydmljZSA9IHNpZ25hdHVyZVNlcnZpY2U7XG4gIH1cblxuICByZXF1ZXN0Rm9ybVZhbGlkaXR5KHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5yZXF1ZXN0Rm9ybVZhbGlkaXR5U3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgfVxuXG4gIHNldEZvcm1WYWxpZGl0eURhdGEodmFsdWU6IGFueVtdKSB7XG4gICAgdGhpcy5mb3JtVmFsaWRpdHlTdWJqZWN0Lm5leHQodmFsdWUpO1xuICB9XG5cbiAgaWZCZWxvbmdzVG9QcmVwYXJlcih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgPT09ICd0ZXh0Ym94JyB8fCB0eXBlID09PSAnZGF0ZScgfHwgdHlwZSA9PT0gJ2NoZWNrYm94JztcbiAgfVxuXG4gIGlmQmVsb25nc1RvQ3VycmVudFJlY2lwaWVudChmaWVsZCkge1xuICAgIGlmICh0aGlzLm1vZGUgPT09ICdwcmVwYXJldmlldycpIHtcbiAgICAgIHJldHVybiB0aGlzLmlmQmVsb25nc1RvUHJlcGFyZXIoZmllbGQuY29udHJvbFR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmllbGQucmVjaXBpZW50Um9sZSA9PT0gdGhpcy5yTmFtZTtcbiAgICB9XG4gIH1cbn0iXX0=