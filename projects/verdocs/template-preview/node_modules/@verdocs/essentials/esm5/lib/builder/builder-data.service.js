/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { Router } from '@angular/router';
import { TemplatesService, TemplatesGuardService, TemplateActions } from '@verdocs/sdk';
// import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { throwError as observableThrowError, ReplaySubject, from, forkJoin, Subject, of } from 'rxjs';
import { catchError, map, delay, mergeMap } from 'rxjs/operators';
import { filter } from 'lodash';
import { findIndex, remove } from 'lodash';
import { nameToRGBA, getRGBA } from '@verdocs/sdk';
import { SnackbarService } from '../snackbar/snackbar.service';
import { EventTrackerService } from '@verdocs/event-tracker';
import { EssentialsConfigToken } from '../essentials.module';
var BuilderDataService = /** @class */ (function () {
    function BuilderDataService(http, router, templatesService, templateGuard, snackbarService, eventTracker, injector) {
        var _this = this;
        this.http = http;
        this.router = router;
        this.templatesService = templatesService;
        this.templateGuard = templateGuard;
        this.snackbarService = snackbarService;
        this.eventTracker = eventTracker;
        this.injector = injector;
        this.recipients = [];
        this.roles = [];
        this.templateSubject = new ReplaySubject(1, 500);
        this.hasFields = false;
        this.templateNameSubject = new ReplaySubject(1, 500);
        this.templatePagesSubject = new ReplaySubject(1, 500);
        this.recipientsSubject = new ReplaySubject();
        this.activeRecipientSubject = new ReplaySubject();
        this.scrollInfoSubject = new ReplaySubject();
        this.screenInfoSubject = new ReplaySubject();
        this.newTypeSubject = new Subject();
        this.newOptionSubject = new ReplaySubject(1, 100);
        this.duplicateFieldSubject = new ReplaySubject();
        this.saveStatusSubject = new ReplaySubject();
        this.renderedSubject = new ReplaySubject();
        this.activeFieldIndexSubject = new ReplaySubject(1, 100);
        this.numberOfRolesSubject = new ReplaySubject();
        this.numberOfSequenceSubject = new ReplaySubject();
        this.hasFieldsSubject = new ReplaySubject();
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        /* Use NGRX to do the subscriptions */
        this.templateSubject.subscribe((/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            _this.template = template;
            if (template && template.name) {
                _this.templateNameSubject.next(template.name);
            }
        }));
        this.templateNameSubject.subscribe((/**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            _this.templateName = name;
        }));
        /* Remove above after refactoring */
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    BuilderDataService.prototype.createTemplate = /**
     * @param {?} template_body
     * @return {?}
     */
    function (template_body) {
        var _this = this;
        return this.http
            .post(this.rForm_backend_url + '/templates', template_body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.templateSubject.next(res);
            _this.recipientsSubject.next([]);
            return res;
        })));
    };
    /**
     * @return {?}
     */
    BuilderDataService.prototype.updateLocalTemplateData = /**
     * @return {?}
     */
    function () {
        this.templateName = this.template.name;
        this.templateNameSubject.next(this.templateName);
        this.templatePages = this.template.pages.length;
        this.templatePagesSubject.next(this.templatePages);
    };
    /**
     * @param {?} template_body
     * @return {?}
     */
    BuilderDataService.prototype.updateTemplate = /**
     * @param {?} template_body
     * @return {?}
     */
    function (template_body) {
        return this.templatesService.updateTemplateObservable(template_body.id, template_body).pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template; })));
    };
    /**
     * @param {?} template
     * @param {?} name
     * @return {?}
     */
    BuilderDataService.prototype.updateTemplateName = /**
     * @param {?} template
     * @param {?} name
     * @return {?}
     */
    function (template, name) {
        var _this = this;
        if (template && template.id) {
            return this.templatesService.updateTemplateObservable(template.id, { name: name })
                .pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                template.name = res.name;
                _this.updateLocalTemplate(template);
                _this.saveStatusSubject.next('saved');
                _this.createSnackBar('Name Changed to: ' + name);
                return res.name;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.saveStatusSubject.next('Failed to save');
                _this.createSnackBar('Failed to change Template name');
                return err;
            })));
        }
        else {
            this.templateNameSubject.next(name);
            this.saveStatusSubject.next('Name will be updated');
        }
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.getTemplateObservable = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        return this.templatesService.getTemplateObservable(templateId);
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.getTemplate = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        var _this = this;
        return this.templatesService.getTemplate(templateId).toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            _this.updateLocalTemplate(template);
            _this.recipients = _this.sortRoles(_this.template);
            _this.template.roles = _this.recipients;
            _this.roles = _this.recipients;
            _this.recipientsSubject.next(_this.recipients);
            _this.activeRecipientSubject.next(_this.recipients[0]);
            return _this.template;
        }));
    };
    /**
     * @return {?}
     */
    BuilderDataService.prototype.watchForUpdatedTemplate = /**
     * @return {?}
     */
    function () {
        return this.templateSubject.pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template; })));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.updateLocalTemplate = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (template) {
            this.template = template;
            if (this.template && this.template.pages) {
                this.template.pages = this.template.pages.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) {
                    return a.sequence - b.sequence;
                }));
            }
            if (this.template) {
                this.updateLocalTemplateData();
                this.checkForFields(this.template.roles);
            }
            this.recipientsSubject.next(this.template.roles.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.sequence - b.sequence;
            })));
            this.templateSubject.next(this.template);
        }
        else {
            this.templateNameSubject.next(null);
            this.templatePagesSubject.next(null);
            this.numberOfRolesSubject.next(null);
            this.numberOfSequenceSubject.next(null);
            this.hasFieldsSubject.next(false);
        }
    };
    /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.uploadTemplateDocument = /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    function (file, template) {
        /** @type {?} */
        var formdata = new FormData();
        formdata.append('document', file, file.name);
        /** @type {?} */
        var req = new HttpRequest('POST', this.rForm_backend_url + '/templates/' + template.id + '/documents', formdata, {
            reportProgress: true
        });
        return this.http.request(req)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return observableThrowError(err);
        })));
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.getTemplateDocument = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        var _this = this;
        this.templateDoc = this.templatesService.getAllTemplateDocumentsObservable(templateId).pipe(map((/**
         * @param {?} docs
         * @return {?}
         */
        function (docs) {
            _this.templateDoc = docs[0];
            return _this.templateDoc;
        })));
        return this.templateDoc;
    };
    /**
     * @param {?} templateId
     * @param {?} templateDoc
     * @return {?}
     */
    BuilderDataService.prototype.getTemplateDocumentFile = /**
     * @param {?} templateId
     * @param {?} templateDoc
     * @return {?}
     */
    function (templateId, templateDoc) {
        if (templateId && templateDoc) {
            return this.templatesService.getTemplateDocumentPDFObservable(templateId, templateDoc).pipe(map((/**
             * @param {?} pdf
             * @return {?}
             */
            function (pdf) {
                /** @type {?} */
                var pdfUrl = URL.createObjectURL(pdf);
                return pdfUrl;
            })));
        }
    };
    /**
     * @param {?} templateDocument
     * @return {?}
     */
    BuilderDataService.prototype.setTemplateDocument = /**
     * @param {?} templateDocument
     * @return {?}
     */
    function (templateDocument) {
        this.templateDoc = templateDocument;
    };
    /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.addTemplatePage = /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    function (document, pageNum, templateId) {
        /** @type {?} */
        var body = {
            sequence: pageNum,
            page_number: pageNum,
            document_id: document.id
        };
        return this.http.post(this.rForm_backend_url + ("/templates/" + templateId + "/pages"), body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return observableThrowError(err);
        })));
    };
    /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.addTemplatePages = /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    function (document, pageNums, templateId) {
        var _this = this;
        return from(pageNums)
            .pipe(mergeMap((/**
         * @param {?} pageNum
         * @return {?}
         */
        function (pageNum) {
            /** @type {?} */
            var page = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return (/** @type {?} */ (_this.http.post(_this.rForm_backend_url + ("/templates/" + templateId + "/pages"), page).pipe(delay(200))));
        })));
    };
    /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderDataService.prototype.deleteTemplateField = /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, fieldName, i, j) {
        var _this = this;
        return this.http
            .delete(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + fieldName.trim())
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: fieldName });
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
            if (roleIndex > -1) {
                /** @type {?} */
                var roleFieldIndex = findIndex(template.roles[roleIndex].fields, { name: fieldName });
                if (roleFieldIndex > -1) {
                    template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                }
            }
            template.pages[i].fields.splice(fieldIndex, 1);
            _this.updateLocalTemplate(template);
            _this.saveStatusSubject.next('saved');
            _this.checkForFields(template.roles);
            return template;
        })));
    };
    /**
     * @param {?} fieldNames
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.deleteTemplateFields = /**
     * @param {?} fieldNames
     * @param {?} template
     * @return {?}
     */
    function (fieldNames, template) {
        var e_1, _a;
        if (fieldNames && fieldNames.length > 0) {
            /** @type {?} */
            var pages = template.pages;
            try {
                for (var fieldNames_1 = tslib_1.__values(fieldNames), fieldNames_1_1 = fieldNames_1.next(); !fieldNames_1_1.done; fieldNames_1_1 = fieldNames_1.next()) {
                    var fieldName = fieldNames_1_1.value;
                    for (var x = 0; x < pages.length; x++) {
                        /** @type {?} */
                        var fieldIndex = findIndex(pages[x].fields, { name: fieldName });
                        if (fieldIndex >= 0) {
                            template.pages[x].fields.splice(fieldIndex, 1);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (fieldNames_1_1 && !fieldNames_1_1.done && (_a = fieldNames_1.return)) _a.call(fieldNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.checkForFields(template.roles);
        }
    };
    /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.addTemplateField = /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    function (newField, i, j, template) {
        var _this = this;
        newField.name = newField.name.trim();
        return this.http
            .post(this.rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            _this.eventTracker.createEvent({
                category: 'document',
                action: "document " + field.type + " field added",
                label: "document id: " + newField.template_id
            });
            template.pages[i].fields[j] = field;
            _this.checkForFields(template.roles);
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template.roles[roleIndex]['fields'].push(field);
            }
            _this.templateSubject.next(template);
            return template;
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BuilderDataService.prototype.getTemplateOwnerInfo = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.templatesService.getTemplateOwnerInfo(id);
    };
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderDataService.prototype.updateTemplateField = /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, body, oldName, i, j) {
        var _this = this;
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            _this.eventTracker.createEvent({
                category: 'document',
                action: "document " + field.type + " field updated",
                label: "document id: " + template.id
            });
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            if (field.page_sequence - 1 !== i) {
                template.pages[i].fields.splice(fieldIndex, 1);
                template.pages[field.page_sequence - 1].fields.push(field);
            }
            else {
                template.pages[i].fields[fieldIndex] = field;
            }
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template = _this.updateRoleField(template, field, roleIndex, oldName);
            }
            _this.templateSubject.next(template);
            _this.saveStatusSubject.next('saved');
            return template;
        })));
    };
    /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    BuilderDataService.prototype.updateRoleField = /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    function (template, updated_field, role_index, old_name) {
        /** @type {?} */
        var field_index = findIndex(template.roles[role_index].fields, { name: old_name });
        if (field_index >= 0) {
            template.roles[role_index].fields[field_index] = updated_field;
        }
        else {
            template.roles[role_index].fields.push(updated_field);
        }
        return template;
    };
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderDataService.prototype.updateDropdownField = /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, body, oldName, i, j) {
        var _this = this;
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            template.pages[i].fields[fieldIndex] = field;
            _this.templateSubject.next(template);
            _this.saveStatusSubject.next('saved');
            return template;
        })));
    };
    /**
     * @param {?} template_id
     * @param {?} sequence_number
     * @return {?}
     */
    BuilderDataService.prototype.deleteSequence = /**
     * @param {?} template_id
     * @param {?} sequence_number
     * @return {?}
     */
    function (template_id, sequence_number) {
        return this.templatesService.deleteSequence(template_id, sequence_number);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BuilderDataService.prototype.prepareFieldDuplication = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.duplicateFieldSubject.next(field);
    };
    ;
    /**
     * @param {?} roles
     * @return {?}
     */
    BuilderDataService.prototype.checkForFields = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        var e_2, _a;
        /** @type {?} */
        var hasFields = true;
        if (roles && roles.length > 0) {
            try {
                for (var roles_1 = tslib_1.__values(roles), roles_1_1 = roles_1.next(); !roles_1_1.done; roles_1_1 = roles_1.next()) {
                    var role = roles_1_1.value;
                    if (role && role.type === 'signer' && role.fields.length === 0) {
                        hasFields = false;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (roles_1_1 && !roles_1_1.done && (_a = roles_1.return)) _a.call(roles_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else {
            hasFields = false;
        }
        this.hasFields = hasFields;
        this.hasFieldsSubject.next(this.hasFields);
    };
    /**
     * @param {?} title
     * @param {?=} buttonTitle
     * @return {?}
     */
    BuilderDataService.prototype.createSnackBar = /**
     * @param {?} title
     * @param {?=} buttonTitle
     * @return {?}
     */
    function (title, buttonTitle) {
        if (buttonTitle === void 0) { buttonTitle = 'OK'; }
        //   let snackbarConfig: MatSnackBarConfig
        //   if (window.innerWidth >= 920) {
        //     snackbarConfig = {
        //       verticalPosition: 'bottom',
        //       horizontalPosition: 'left',
        //       duration: 5000
        //     }
        //   } else {
        //     snackbarConfig = {
        //       verticalPosition: 'top',
        //       duration: 5000
        //     }
        //   }
        //   this.snackbar.open(title, buttonTitle, snackbarConfig);
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.editDocsUrl = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        /** @type {?} */
        var editDocsPageUrl = "/builder/" + templateId + "/docs";
        return editDocsPageUrl;
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.editRolesUrl = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        /** @type {?} */
        var editRolesPageUrl = "/builder/" + templateId + "/roles";
        return editRolesPageUrl;
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.editTemplateUrl = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        /** @type {?} */
        var editPageUrl = "/builder/" + templateId + "/fields";
        return editPageUrl;
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    BuilderDataService.prototype.previewTemplateUrl = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        /** @type {?} */
        var reviewTemplateUrl = "/document/" + templateId;
        return reviewTemplateUrl;
    };
    /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderDataService.prototype.addFieldRole = /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (templateId, fieldId, roleId, i, j) {
        /** @type {?} */
        var fieldRoleInfo = JSON.stringify({
            field_id: fieldId,
            role_id: roleId
        });
        return this.http
            .post(this.rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
         * @param {?} fieldRole
         * @return {?}
         */
        function (fieldRole) {
            return fieldRole;
        }));
    };
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.addRole = /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    function (role, template) {
        var _this = this;
        /** @type {?} */
        var templateBackend = this.rForm_backend_url + '/templates/' + template.id + '/roles';
        this.roles = [];
        this.roles = this.roles.concat(role);
        /** @type {?} */
        var roleRequests = [];
        this.roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            roleRequests.push(_this.http.post(templateBackend, role));
        }));
        if (this.roles && this.roles.length > 0) {
            return forkJoin(roleRequests).pipe(map((/**
             * @param {?} savedRoles
             * @return {?}
             */
            function (savedRoles) {
                savedRoles.concat((/** @type {?} */ (savedRoles)));
                if (!template['roles']) {
                    template['roles'] = (/** @type {?} */ ([]));
                }
                /** @type {?} */
                var savedRolesWithFields = savedRoles.map((/**
                 * @param {?} newRole
                 * @return {?}
                 */
                function (newRole) {
                    newRole['fields'] = [];
                    return newRole;
                }));
                template['roles'] = template['roles'].concat(savedRolesWithFields);
                _this.recipients = _this.sortRoles(template);
                _this.roles = _this.recipients;
                _this.templateSubject.next(template);
                _this.recipientsSubject.next(_this.recipients);
                _this.recipients;
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        }
        else {
            return of(template);
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BuilderDataService.prototype.addCheckboxGroup = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.newOptionSubject.next({
            type: 'checkbox_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BuilderDataService.prototype.addRadioGroup = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.newOptionSubject.next({
            type: 'radio_button_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    };
    /**
     * @param {?} roles
     * @return {?}
     */
    BuilderDataService.prototype.getRolesInSequence = /**
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        /** @type {?} */
        var rolesInSequence = [];
        for (var roleIndex = 0; roleIndex < roles.length; roleIndex++) {
            /** @type {?} */
            var sequenceIndex = roles[roleIndex]['sequence'] - 1;
            /** @type {?} */
            var role = tslib_1.__assign({}, roles[roleIndex]);
            role['style'] = {
                backgroundColor: "" + this.getRoleColor(role.name, roleIndex)
            };
            if (!rolesInSequence[sequenceIndex]) {
                rolesInSequence[sequenceIndex] = [role];
            }
            else {
                rolesInSequence[sequenceIndex].push(role);
            }
        }
        this.numberOfSequenceSubject.next(rolesInSequence.length);
        this.numberOfRolesSubject.next(roles.length);
        return rolesInSequence;
    };
    /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.deleteRole = /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    function (roleName, template) {
        var _this = this;
        return this.http.delete(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
            .toPromise()
            .then((/**
         * @return {?}
         */
        function () {
            remove(template.roles, (/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                var e_3, _a;
                _this.recipients = _this.sortRoles(template);
                if (role.name === roleName) {
                    /** @type {?} */
                    var fields = role.fields;
                    /** @type {?} */
                    var fieldNames = [];
                    try {
                        for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                            var field = fields_1_1.value;
                            fieldNames.push(field.name);
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    _this.deleteTemplateFields(fieldNames, template);
                }
                _this.templateSubject.next(template);
                _this.recipientsSubject.next(_this.recipients);
                return role.name === roleName;
            }));
        }));
    };
    /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.deleteRoles = /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    function (roleNames, template) {
        var _this = this;
        /** @type {?} */
        var deleteCalls = [];
        roleNames.forEach((/**
         * @param {?} role_name
         * @return {?}
         */
        function (role_name) {
            template = tslib_1.__assign({}, template, { roles: template.roles.filter((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) { return role.name !== role_name; })) });
            deleteCalls.push(_this.http.delete(_this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
        }));
        return forkJoin(deleteCalls).pipe(map((/**
         * @return {?}
         */
        function () {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            console.error('Couldn\'t delete all the roles');
            return err;
        })));
    };
    /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.updateRoles = /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    function (roles, template) {
        var _this = this;
        /** @type {?} */
        var updateCalls = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            /** @type {?} */
            var body = {
                template_id: template.id,
                name: role.name.trim(),
                full_name: role.full_name,
                email: role.email,
                sequence: role.sequence,
                type: role.type,
                delegator: role.delegator,
                message: role.message,
                phone: role.phone
            };
            /** @type {?} */
            var role_index = findIndex(template.roles, { name: role.old_name });
            if (role_index >= 0) {
                template.roles[role_index] = tslib_1.__assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
            }
            _this.eventTracker.createEvent({
                category: 'document',
                action: 'document role updated',
                label: "document id: " + template.id
            });
            updateCalls.push(_this.http.put(_this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
        }));
        return forkJoin(updateCalls)
            .pipe(map((/**
         * @return {?}
         */
        function () {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            console.error('Couldn\'t save all the roles');
            return err;
        })));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.sortRoles = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (template.roles.length < 1) {
            return [];
        }
        /** @type {?} */
        var roles = template.roles.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.sequence === b.sequence) {
                return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0;
            }
            return a.sequence - b.sequence;
        }));
        for (var x = 0; x < roles.length; x++) {
            roles[x]['rgba'] = getRGBA(x);
        }
        template.roles = roles;
        return roles;
    };
    /**
     * @param {?} name
     * @param {?=} index
     * @param {?=} template
     * @return {?}
     */
    BuilderDataService.prototype.getRoleColor = /**
     * @param {?} name
     * @param {?=} index
     * @param {?=} template
     * @return {?}
     */
    function (name, index, template) {
        if (index !== null && index > -1) {
            return getRGBA(index);
        }
        else if (template) {
            if (template.roles && template.roles.length > 0) {
                index = findIndex(template.roles, { name: name });
                if (index >= 0) {
                    return template.roles[index].rgba ? template.roles[index].rgba : getRGBA(index);
                }
            }
            else {
                return nameToRGBA(name);
            }
        }
        else {
            return nameToRGBA(name);
        }
    };
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.updateFullName = /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    function (role, template) {
        var _this = this;
        for (var i = 0; i < template.pages.length; i++) {
            if (template.pages[i].fields.length > 0) {
                for (var j = 0; j < template.pages[i].fields.length; j++) {
                    if (template.pages[i].fields[j].type === 'placeholder' && template.pages[i].fields[j].setting['type'] === 'full_name') {
                        if (template.pages[i].fields[j].setting['result'] !== role.full_name &&
                            template.pages[i].fields[j].role_name === role.name) {
                            template.pages[i].fields[j].setting['result'] = role.full_name;
                            /** @type {?} */
                            var updatedField = tslib_1.__assign({}, template.pages[i].fields[j]);
                            this.updateTemplateField(template, updatedField, updatedField.name, i, j).toPromise().then((/**
                             * @return {?}
                             */
                            function () {
                                _this.templateSubject.next(template);
                            }));
                        }
                    }
                }
            }
        }
    };
    /**
     * @param {?} activeFieldIndex
     * @return {?}
     */
    BuilderDataService.prototype.setActiveFieldIndex = /**
     * @param {?} activeFieldIndex
     * @return {?}
     */
    function (activeFieldIndex) {
        this.activeFieldIndex = activeFieldIndex;
        this.activeFieldIndexSubject.next(this.activeFieldIndex);
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.autoAddSigner = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var recipients;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.addRole((/** @type {?} */ ({ name: 'Signer 1', type: 'signer', sequence: 1 })), template).toPromise()];
                                case 1:
                                    recipients = _a.sent();
                                    this.activeRecipientSubject.next(recipients[0]);
                                    setTimeout((/**
                                     * @return {?}
                                     */
                                    function () {
                                        resolve();
                                    }), 500);
                                    return [2 /*return*/];
                            }
                        });
                    }); }))];
            });
        });
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.openTemplate = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (this.canUserPreview(template)) {
            this.router.navigate(["document/" + template.id]);
        }
        else if (this.canUserEdit(template)) {
            this.router.navigate(["builder/" + template.id + "/fields"]);
        }
        else {
            this.snackbarService.open("Template is in build mode, and not ready for use.  Please check back soon.");
        }
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.canUserEdit = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        /** @type {?} */
        var response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    };
    /**
     * @param {?} template
     * @return {?}
     */
    BuilderDataService.prototype.canUserPreview = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var e_4, _a;
        /** @type {?} */
        var hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        var canPreview;
        /** @type {?} */
        var signers = filter(template.roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        try {
            for (var signers_1 = tslib_1.__values(signers), signers_1_1 = signers_1.next(); !signers_1_1.done; signers_1_1 = signers_1.next()) {
                var signer = signers_1_1.value;
                canPreview = signer['fields'] && signer['fields'].length > 0;
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (signers_1_1 && !signers_1_1.done && (_a = signers_1.return)) _a.call(signers_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return hasPermission && canPreview;
    };
    BuilderDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BuilderDataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Router },
        { type: TemplatesService },
        { type: TemplatesGuardService },
        { type: SnackbarService },
        { type: EventTrackerService },
        { type: Injector }
    ]; };
    return BuilderDataService;
}());
export { BuilderDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.recipients;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.template;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateDoc;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatePages;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateName;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.activeFieldIndex;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.roles;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateId;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.hasFields;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.rForm_backend_url;
    /** @type {?} */
    BuilderDataService.prototype.templateNameSubject;
    /** @type {?} */
    BuilderDataService.prototype.templatePagesSubject;
    /** @type {?} */
    BuilderDataService.prototype.recipientsSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeRecipientSubject;
    /** @type {?} */
    BuilderDataService.prototype.scrollInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.screenInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.newTypeSubject;
    /** @type {?} */
    BuilderDataService.prototype.newOptionSubject;
    /** @type {?} */
    BuilderDataService.prototype.duplicateFieldSubject;
    /** @type {?} */
    BuilderDataService.prototype.saveStatusSubject;
    /** @type {?} */
    BuilderDataService.prototype.renderedSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeFieldIndexSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfRolesSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfSequenceSubject;
    /** @type {?} */
    BuilderDataService.prototype.hasFieldsSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatesService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.snackbarService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.eventTracker;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.injector;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9lc3NlbnRpYWxzLyIsInNvdXJjZXMiOlsibGliL2J1aWxkZXIvYnVpbGRlci1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQ0wsZ0JBQWdCLEVBUWhCLHFCQUFxQixFQUNyQixlQUFlLEVBQ2hCLE1BQU0sY0FBYyxDQUFDOztBQUV0QixPQUFPLEVBQUUsVUFBVSxJQUFJLG9CQUFvQixFQUFFLGFBQWEsRUFBYyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEgsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDaEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdELE9BQU8sRUFBb0IscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUvRTtJQStCRSw0QkFDVSxJQUFnQixFQUNoQixNQUFjLEVBQ2QsZ0JBQWtDLEVBRWxDLGFBQW9DLEVBQ3BDLGVB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SUE4cEJDO1NBN3BCWSxrQkFBa0I7Ozs7OztJQUM3QiwyQ0FBd0M7Ozs7O0lBQ3hDLHdDQUF3Qjs7Ozs7SUFDeEIsc0NBQWlCOzs7OztJQUNqQix5Q0FBb0I7Ozs7O0lBQ3BCLDJDQUFzQjs7Ozs7SUFDdEIsMENBQTZCOzs7OztJQUM3Qiw4Q0FBOEI7Ozs7O0lBQzlCLG1DQUE0Qjs7Ozs7SUFDNUIsNkNBQXlGOzs7OztJQUN6Rix3Q0FBMkI7Ozs7O0lBQzNCLHVDQUEwQjs7Ozs7SUFDMUIsK0NBQWtDOztJQUVsQyxpREFBc0Y7O0lBQ3RGLGtEQUF1Rjs7SUFDdkYsK0NBQWdGOztJQUNoRixvREFBaUY7O0lBQ2pGLCtDQUF3RTs7SUFDeEUsK0NBQXdFOztJQUN4RSw0Q0FBNkU7O0lBQzdFLDhDQUEyRjs7SUFDM0YsbURBQWtGOztJQUNsRiwrQ0FBOEU7O0lBQzlFLDZDQUE0RTs7SUFDNUUscURBQW9GOztJQUNwRixrREFBaUY7O0lBQ2pGLHFEQUFvRjs7SUFDcEYsOENBQStFOzs7OztJQUc3RSxrQ0FBd0I7Ozs7O0lBQ3hCLG9DQUFzQjs7Ozs7SUFDdEIsOENBQTBDOzs7OztJQUUxQywyQ0FBNEM7Ozs7O0lBQzVDLDZDQUF3Qzs7Ozs7SUFDeEMsMENBQXlDOzs7OztJQUN6QyxzQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBcbiAgVGVtcGxhdGVzU2VydmljZSxcbiAgSVRlbXBsYXRlLFxuICBJVGVtcGxhdGVEb2N1bWVudCxcbiAgSVBhZ2UsXG4gIElSb2xlLFxuICBJRmllbGQsXG4gIE9wdGlvblR5cGUsXG4gIEZpZWxkUm9sZSxcbiAgVGVtcGxhdGVzR3VhcmRTZXJ2aWNlLFxuICBUZW1wbGF0ZUFjdGlvbnNcbn0gZnJvbSAnQHZlcmRvY3Mvc2RrJztcbi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyLCBNYXRTbmFja0JhckNvbmZpZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3NuYWNrLWJhcic7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIGFzIG9ic2VydmFibGVUaHJvd0Vycm9yLCBSZXBsYXlTdWJqZWN0LCBPYnNlcnZhYmxlLCBmcm9tLCBmb3JrSm9pbiwgU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgZGVsYXksIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGZpbmRJbmRleCwgcmVtb3ZlIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgbmFtZVRvUkdCQSwgZ2V0UkdCQSB9IGZyb20gJ0B2ZXJkb2NzL3Nkayc7XG5pbXBvcnQgeyBTbmFja2JhclNlcnZpY2UgfSBmcm9tICcuLi9zbmFja2Jhci9zbmFja2Jhci5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50VHJhY2tlclNlcnZpY2UgfSBmcm9tICdAdmVyZG9jcy9ldmVudC10cmFja2VyJztcblxuaW1wb3J0IHsgRXNzZW50aWFsc0NvbmZpZywgRXNzZW50aWFsc0NvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vZXNzZW50aWFscy5tb2R1bGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnVpbGRlckRhdGFTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnX3Rva2VuOiBFc3NlbnRpYWxzQ29uZmlnO1xuICBwcml2YXRlIHJlY2lwaWVudHMgPSBbXTtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZTtcbiAgcHJpdmF0ZSB0ZW1wbGF0ZURvYztcbiAgcHJpdmF0ZSB0ZW1wbGF0ZVBhZ2VzO1xuICBwcml2YXRlIHRlbXBsYXRlTmFtZTogc3RyaW5nO1xuICBwcml2YXRlIGFjdGl2ZUZpZWxkSW5kZXg6IGFueTtcbiAgcHJpdmF0ZSByb2xlczogSVJvbGVbXSA9IFtdO1xuICBwcml2YXRlIHRlbXBsYXRlU3ViamVjdDogUmVwbGF5U3ViamVjdDxJVGVtcGxhdGU+ID0gbmV3IFJlcGxheVN1YmplY3Q8SVRlbXBsYXRlPigxLCA1MDApO1xuICBwcml2YXRlIHRlbXBsYXRlSWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBoYXNGaWVsZHMgPSBmYWxzZTtcbiAgcHJpdmF0ZSByRm9ybV9iYWNrZW5kX3VybDogc3RyaW5nO1xuXG4gIHB1YmxpYyB0ZW1wbGF0ZU5hbWVTdWJqZWN0OiBSZXBsYXlTdWJqZWN0PHN0cmluZz4gPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmc+KDEsIDUwMCk7XG4gIHB1YmxpYyB0ZW1wbGF0ZVBhZ2VzU3ViamVjdDogUmVwbGF5U3ViamVjdDxudW1iZXI+ID0gbmV3IFJlcGxheVN1YmplY3Q8bnVtYmVyPigxLCA1MDApO1xuICBwdWJsaWMgcmVjaXBpZW50c1N1YmplY3Q6IFJlcGxheVN1YmplY3Q8SVJvbGVbXT4gPSBuZXcgUmVwbGF5U3ViamVjdDxJUm9sZVtdPigpO1xuICBwdWJsaWMgYWN0aXZlUmVjaXBpZW50U3ViamVjdDogUmVwbGF5U3ViamVjdDxJUm9sZT4gPSBuZXcgUmVwbGF5U3ViamVjdDxJUm9sZT4oKTtcbiAgcHVibGljIHNjcm9sbEluZm9TdWJqZWN0OiBSZXBsYXlTdWJqZWN0PGFueT4gPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBzY3JlZW5JbmZvU3ViamVjdDogUmVwbGF5U3ViamVjdDxhbnk+ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMgbmV3VHlwZVN1YmplY3Q6IFN1YmplY3Q8c3RyaW5nIHwgbnVsbD4gPSBuZXcgU3ViamVjdDxzdHJpbmcgfCBudWxsPigpO1xuICBwdWJsaWMgbmV3T3B0aW9uU3ViamVjdDogUmVwbGF5U3ViamVjdDxPcHRpb25UeXBlPiA9IG5ldyBSZXBsYXlTdWJqZWN0PE9wdGlvblR5cGU+KDEsIDEwMCk7XG4gIHB1YmxpYyBkdXBsaWNhdGVGaWVsZFN1YmplY3Q6IFJlcGxheVN1YmplY3Q8SUZpZWxkPiA9IG5ldyBSZXBsYXlTdWJqZWN0PElGaWVsZD4oKTtcbiAgcHVibGljIHNhdmVTdGF0dXNTdWJqZWN0OiBSZXBsYXlTdWJqZWN0PHN0cmluZz4gPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmc+KCk7XG4gIHB1YmxpYyByZW5kZXJlZFN1YmplY3Q6IFJlcGxheVN1YmplY3Q8c3RyaW5nPiA9IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZz4oKTtcbiAgcHVibGljIGFjdGl2ZUZpZWxkSW5kZXhTdWJqZWN0OiBSZXBsYXlTdWJqZWN0PGFueT4gPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KDEsIDEwMCk7XG4gIHB1YmxpYyBudW1iZXJPZlJvbGVzU3ViamVjdDogUmVwbGF5U3ViamVjdDxudW1iZXI+ID0gbmV3IFJlcGxheVN1YmplY3Q8bnVtYmVyPigpO1xuICBwdWJsaWMgbnVtYmVyT2ZTZXF1ZW5jZVN1YmplY3Q6IFJlcGxheVN1YmplY3Q8bnVtYmVyPiA9IG5ldyBSZXBsYXlTdWJqZWN0PG51bWJlcj4oKTtcbiAgcHVibGljIGhhc0ZpZWxkc1N1YmplY3Q6IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgdGVtcGxhdGVzU2VydmljZTogVGVtcGxhdGVzU2VydmljZSxcbiAgICAvLyBwcml2YXRlIHNuYWNrYmFyOiBNYXRTbmFja0JhcixcbiAgICBwcml2YXRlIHRlbXBsYXRlR3VhcmQ6IFRlbXBsYXRlc0d1YXJkU2VydmljZSxcbiAgICBwcml2YXRlIHNuYWNrYmFyU2VydmljZTogU25hY2tiYXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgZXZlbnRUcmFja2VyOiBFdmVudFRyYWNrZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZ190b2tlbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KEVzc2VudGlhbHNDb25maWdUb2tlbik7XG4gICAgdGhpcy5yRm9ybV9iYWNrZW5kX3VybCA9IHRoaXMuX2NvbmZpZ190b2tlbi5yRm9ybV9iYWNrZW5kX3VybDtcbiAgICAvKiBVc2UgTkdSWCB0byBkbyB0aGUgc3Vic2NyaXB0aW9ucyAqL1xuICAgIHRoaXMudGVtcGxhdGVTdWJqZWN0LnN1YnNjcmliZSh0ZW1wbGF0ZSA9PiB7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUubmFtZSkge1xuICAgICAgICB0aGlzLnRlbXBsYXRlTmFtZVN1YmplY3QubmV4dCh0ZW1wbGF0ZS5uYW1lKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnRlbXBsYXRlTmFtZVN1YmplY3Quc3Vic2NyaWJlKG5hbWUgPT4ge1xuICAgICAgdGhpcy50ZW1wbGF0ZU5hbWUgPSBuYW1lO1xuICAgIH0pO1xuICAgIC8qIFJlbW92ZSBhYm92ZSBhZnRlciByZWZhY3RvcmluZyAqL1xuICB9XG5cbiAgY3JlYXRlVGVtcGxhdGUodGVtcGxhdGVfYm9keTogSVRlbXBsYXRlKTogT2JzZXJ2YWJsZTxJVGVtcGxhdGU+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucG9zdDxJVGVtcGxhdGU+KHRoaXMuckZvcm1fYmFja2VuZF91cmwgKyAnL3RlbXBsYXRlcycsIHRlbXBsYXRlX2JvZHkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKChyZXMpID0+IHtcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlU3ViamVjdC5uZXh0KHJlcyk7XG4gICAgICAgICAgdGhpcy5yZWNpcGllbnRzU3ViamVjdC5uZXh0KFtdKTtcbiAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHVwZGF0ZUxvY2FsVGVtcGxhdGVEYXRhKCkge1xuICAgIHRoaXMudGVtcGxhdGVOYW1lID0gdGhpcy50ZW1wbGF0ZS5uYW1lO1xuICAgIHRoaXMudGVtcGxhdGVOYW1lU3ViamVjdC5uZXh0KHRoaXMudGVtcGxhdGVOYW1lKTtcbiAgICB0aGlzLnRlbXBsYXRlUGFnZXMgPSB0aGlzLnRlbXBsYXRlLnBhZ2VzLmxlbmd0aDtcbiAgICB0aGlzLnRlbXBsYXRlUGFnZXNTdWJqZWN0Lm5leHQodGhpcy50ZW1wbGF0ZVBhZ2VzKTtcbiAgfVxuXG4gIHVwZGF0ZVRlbXBsYXRlKHRlbXBsYXRlX2JvZHk6IElUZW1wbGF0ZSkge1xuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlc1NlcnZpY2UudXBkYXRlVGVtcGxhdGVPYnNlcnZhYmxlKHRlbXBsYXRlX2JvZHkuaWQsIHRlbXBsYXRlX2JvZHkpLnBpcGUoXG4gICAgICBtYXAodGVtcGxhdGUgPT4gdGVtcGxhdGUpXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZVRlbXBsYXRlTmFtZSh0ZW1wbGF0ZSwgbmFtZSkge1xuICAgIGlmICh0ZW1wbGF0ZSAmJiB0ZW1wbGF0ZS5pZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzU2VydmljZS51cGRhdGVUZW1wbGF0ZU9ic2VydmFibGUodGVtcGxhdGUuaWQsIHsgbmFtZTogbmFtZSB9KVxuICAgICAgICAucGlwZShcbiAgICAgICAgICBtYXAocmVzID0+IHtcbiAgICAgICAgICAgIHRlbXBsYXRlLm5hbWUgPSByZXMubmFtZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTG9jYWxUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICB0aGlzLnNhdmVTdGF0dXNTdWJqZWN0Lm5leHQoJ3NhdmVkJyk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVNuYWNrQmFyKCdOYW1lIENoYW5nZWQgdG86ICcgKyBuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiByZXMubmFtZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5zYXZlU3RhdHVzU3ViamVjdC5uZXh0KCdGYWlsZWQgdG8gc2F2ZScpO1xuICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVNuYWNrQmFyKCdGYWlsZWQgdG8gY2hhbmdlIFRlbXBsYXRlIG5hbWUnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZW1wbGF0ZU5hbWVTdWJqZWN0Lm5leHQobmFtZSk7XG4gICAgICB0aGlzLnNhdmVTdGF0dXNTdWJqZWN0Lm5leHQoJ05hbWUgd2lsbCBiZSB1cGRhdGVkJyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0VGVtcGxhdGVPYnNlcnZhYmxlKHRlbXBsYXRlSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8SVRlbXBsYXRlPiB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzU2VydmljZS5nZXRUZW1wbGF0ZU9ic2VydmFibGUodGVtcGxhdGVJZCk7XG4gIH1cblxuICBnZXRUZW1wbGF0ZSh0ZW1wbGF0ZUlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZXNTZXJ2aWNlLmdldFRlbXBsYXRlKHRlbXBsYXRlSWQpLnRvUHJvbWlzZSgpLnRoZW4odGVtcGxhdGUgPT4ge1xuICAgICAgdGhpcy51cGRhdGVMb2NhbFRlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgIHRoaXMucmVjaXBpZW50cyA9IHRoaXMuc29ydFJvbGVzKHRoaXMudGVtcGxhdGUpO1xuICAgICAgdGhpcy50ZW1wbGF0ZS5yb2xlcyA9IHRoaXMucmVjaXBpZW50cztcbiAgICAgIHRoaXMucm9sZXMgPSB0aGlzLnJlY2lwaWVudHM7XG4gICAgICB0aGlzLnJlY2lwaWVudHNTdWJqZWN0Lm5leHQodGhpcy5yZWNpcGllbnRzKTtcbiAgICAgIHRoaXMuYWN0aXZlUmVjaXBpZW50U3ViamVjdC5uZXh0KHRoaXMucmVjaXBpZW50c1swXSk7XG4gICAgICByZXR1cm4gdGhpcy50ZW1wbGF0ZTtcbiAgICB9KVxuICB9XG5cbiAgd2F0Y2hGb3JVcGRhdGVkVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVTdWJqZWN0LnBpcGUobWFwKHRlbXBsYXRlID0+IHRlbXBsYXRlKSk7XG4gIH1cblxuICB1cGRhdGVMb2NhbFRlbXBsYXRlKHRlbXBsYXRlKSB7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICBpZiAodGhpcy50ZW1wbGF0ZSAmJiB0aGlzLnRlbXBsYXRlLnBhZ2VzKSB7XG4gICAgICAgIHRoaXMudGVtcGxhdGUucGFnZXMgPSB0aGlzLnRlbXBsYXRlLnBhZ2VzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICByZXR1cm4gYS5zZXF1ZW5jZSAtIGIuc2VxdWVuY2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudGVtcGxhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVMb2NhbFRlbXBsYXRlRGF0YSgpO1xuICAgICAgICB0aGlzLmNoZWNrRm9yRmllbGRzKHRoaXMudGVtcGxhdGUucm9sZXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWNpcGllbnRzU3ViamVjdC5uZXh0KHRoaXMudGVtcGxhdGUucm9sZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICByZXR1cm4gYS5zZXF1ZW5jZSAtIGIuc2VxdWVuY2U7XG4gICAgICB9KSk7XG4gICAgICB0aGlzLnRlbXBsYXRlU3ViamVjdC5uZXh0KHRoaXMudGVtcGxhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRlbXBsYXRlTmFtZVN1YmplY3QubmV4dChudWxsKTtcbiAgICAgIHRoaXMudGVtcGxhdGVQYWdlc1N1YmplY3QubmV4dChudWxsKTtcbiAgICAgIHRoaXMubnVtYmVyT2ZSb2xlc1N1YmplY3QubmV4dChudWxsKTtcbiAgICAgIHRoaXMubnVtYmVyT2ZTZXF1ZW5jZVN1YmplY3QubmV4dChudWxsKTtcbiAgICAgIHRoaXMuaGFzRmllbGRzU3ViamVjdC5uZXh0KGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICB1cGxvYWRUZW1wbGF0ZURvY3VtZW50KGZpbGU6IEZpbGUsIHRlbXBsYXRlOiBJVGVtcGxhdGUpIHtcbiAgICBjb25zdCBmb3JtZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1kYXRhLmFwcGVuZCgnZG9jdW1lbnQnLCBmaWxlLCBmaWxlLm5hbWUpO1xuICAgIGNvbnN0IHJlcSA9IG5ldyBIdHRwUmVxdWVzdCgnUE9TVCcsIHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZS5pZCArICcvZG9jdW1lbnRzJywgZm9ybWRhdGEsIHtcbiAgICAgIHJlcG9ydFByb2dyZXNzOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KHJlcSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzID0+IHJlcyksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVRocm93RXJyb3IoZXJyKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgfVxuXG4gIGdldFRlbXBsYXRlRG9jdW1lbnQodGVtcGxhdGVJZCkge1xuICAgIHRoaXMudGVtcGxhdGVEb2MgPSB0aGlzLnRlbXBsYXRlc1NlcnZpY2UuZ2V0QWxsVGVtcGxhdGVEb2N1bWVudHNPYnNlcnZhYmxlKHRlbXBsYXRlSWQpLnBpcGUoXG4gICAgICBtYXAoKGRvY3M6IEFycmF5PElUZW1wbGF0ZURvY3VtZW50PikgPT4ge1xuICAgICAgICB0aGlzLnRlbXBsYXRlRG9jID0gZG9jc1swXTtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVEb2NcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlRG9jO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGVEb2N1bWVudEZpbGUodGVtcGxhdGVJZCwgdGVtcGxhdGVEb2MpIHtcbiAgICBpZiAodGVtcGxhdGVJZCAmJiB0ZW1wbGF0ZURvYykge1xuICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzU2VydmljZS5nZXRUZW1wbGF0ZURvY3VtZW50UERGT2JzZXJ2YWJsZSh0ZW1wbGF0ZUlkLCB0ZW1wbGF0ZURvYykucGlwZShcbiAgICAgICAgbWFwKHBkZiA9PiB7XG4gICAgICAgICAgY29uc3QgcGRmVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChwZGYpO1xuICAgICAgICAgIHJldHVybiBwZGZVcmw7XG4gICAgICAgIH0pKVxuICAgIH1cbiAgfVxuXG4gIHNldFRlbXBsYXRlRG9jdW1lbnQodGVtcGxhdGVEb2N1bWVudCkge1xuICAgIHRoaXMudGVtcGxhdGVEb2MgPSB0ZW1wbGF0ZURvY3VtZW50O1xuICB9XG5cbiAgYWRkVGVtcGxhdGVQYWdlKGRvY3VtZW50LCBwYWdlTnVtLCB0ZW1wbGF0ZUlkKSB7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHNlcXVlbmNlOiBwYWdlTnVtLFxuICAgICAgcGFnZV9udW1iZXI6IHBhZ2VOdW0sXG4gICAgICBkb2N1bWVudF9pZDogZG9jdW1lbnQuaWRcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PElQYWdlPih0aGlzLnJGb3JtX2JhY2tlbmRfdXJsKyBgL3RlbXBsYXRlcy8ke3RlbXBsYXRlSWR9L3BhZ2VzYCwgYm9keSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoKHJlczogSVBhZ2UpID0+IHJlcyksXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVRocm93RXJyb3IoZXJyKTtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgfVxuXG4gIGFkZFRlbXBsYXRlUGFnZXMoZG9jdW1lbnQsIHBhZ2VOdW1zOiBudW1iZXJbXSwgdGVtcGxhdGVJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZyb20ocGFnZU51bXMpXG4gICAgICAucGlwZShcbiAgICAgICAgbWVyZ2VNYXAocGFnZU51bSA9PiB7XG4gICAgICAgICAgY29uc3QgcGFnZSA9IHtcbiAgICAgICAgICAgIHNlcXVlbmNlOiBwYWdlTnVtLFxuICAgICAgICAgICAgcGFnZV9udW1iZXI6IHBhZ2VOdW0sXG4gICAgICAgICAgICBkb2N1bWVudF9pZDogZG9jdW1lbnQuaWRcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiA8T2JzZXJ2YWJsZTxJUGFnZT4+dGhpcy5odHRwLnBvc3QodGhpcy5yRm9ybV9iYWNrZW5kX3VybCsgYC90ZW1wbGF0ZXMvJHt0ZW1wbGF0ZUlkfS9wYWdlc2AsIHBhZ2UpLnBpcGUoZGVsYXkoMjAwKSk7XG4gICAgICAgIH0pXG4gICAgICApXG4gIH1cblxuICBkZWxldGVUZW1wbGF0ZUZpZWxkKHRlbXBsYXRlOiBJVGVtcGxhdGUsIGZpZWxkTmFtZTogc3RyaW5nLCBpLCBqKTogT2JzZXJ2YWJsZTxJVGVtcGxhdGU+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZGVsZXRlPHZvaWQ+KHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZS5pZCArICcvZmllbGRzLycgKyBmaWVsZE5hbWUudHJpbSgpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChmaWVsZCA9PiB7XG4gICAgICAgICAgY29uc3QgZmllbGRJbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHMsIHsgbmFtZTogZmllbGROYW1lIH0pO1xuICAgICAgICAgIGNvbnN0IHJvbGVJbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5yb2xlcywgeyBuYW1lOiB0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHNbZmllbGRJbmRleF0ucm9sZV9uYW1lIH0pO1xuXG4gICAgICAgICAgaWYgKHJvbGVJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBjb25zdCByb2xlRmllbGRJbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5yb2xlc1tyb2xlSW5kZXhdLmZpZWxkcywgeyBuYW1lOiBmaWVsZE5hbWUgfSk7XG4gICAgICAgICAgICBpZiAocm9sZUZpZWxkSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZS5yb2xlc1tyb2xlSW5kZXhdLmZpZWxkcy5zcGxpY2Uocm9sZUZpZWxkSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHMuc3BsaWNlKGZpZWxkSW5kZXgsIDEpO1xuICAgICAgICAgIHRoaXMudXBkYXRlTG9jYWxUZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgICAgICAgdGhpcy5zYXZlU3RhdHVzU3ViamVjdC5uZXh0KCdzYXZlZCcpO1xuICAgICAgICAgIHRoaXMuY2hlY2tGb3JGaWVsZHModGVtcGxhdGUucm9sZXMpO1xuICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBkZWxldGVUZW1wbGF0ZUZpZWxkcyhmaWVsZE5hbWVzOiBzdHJpbmdbXSwgdGVtcGxhdGU6IElUZW1wbGF0ZSkge1xuICAgIGlmIChmaWVsZE5hbWVzICYmIGZpZWxkTmFtZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcGFnZXMgPSB0ZW1wbGF0ZS5wYWdlcztcbiAgICAgIGZvciAoY29uc3QgZmllbGROYW1lIG9mIGZpZWxkTmFtZXMpIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBwYWdlcy5sZW5ndGg7IHgrKykge1xuICAgICAgICAgIGNvbnN0IGZpZWxkSW5kZXggPSBmaW5kSW5kZXgocGFnZXNbeF0uZmllbGRzLCB7IG5hbWU6IGZpZWxkTmFtZSB9KTtcbiAgICAgICAgICBpZiAoZmllbGRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5wYWdlc1t4XS5maWVsZHMuc3BsaWNlKGZpZWxkSW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jaGVja0ZvckZpZWxkcyh0ZW1wbGF0ZS5yb2xlcyk7XG4gICAgfVxuICB9XG5cbiAgYWRkVGVtcGxhdGVGaWVsZChuZXdGaWVsZDogSUZpZWxkLCBpLCBqLCB0ZW1wbGF0ZTogSVRlbXBsYXRlKTogT2JzZXJ2YWJsZTxJVGVtcGxhdGU+IHtcbiAgICBuZXdGaWVsZC5uYW1lID0gbmV3RmllbGQubmFtZS50cmltKCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnBvc3Q8SUZpZWxkPih0aGlzLnJGb3JtX2JhY2tlbmRfdXJsKyAnL3RlbXBsYXRlcy8nICsgbmV3RmllbGQudGVtcGxhdGVfaWQgKyAnL2ZpZWxkcycsIG5ld0ZpZWxkKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChmaWVsZCA9PiB7XG4gICAgICAgICAgdGhpcy5ldmVudFRyYWNrZXIuY3JlYXRlRXZlbnQoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICBhY3Rpb246IGBkb2N1bWVudCAke2ZpZWxkLnR5cGV9IGZpZWxkIGFkZGVkYCxcbiAgICAgICAgICAgIGxhYmVsOiBgZG9jdW1lbnQgaWQ6ICR7bmV3RmllbGQudGVtcGxhdGVfaWR9YFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkc1tqXSA9IGZpZWxkO1xuICAgICAgICAgIHRoaXMuY2hlY2tGb3JGaWVsZHModGVtcGxhdGUucm9sZXMpO1xuICAgICAgICAgIGNvbnN0IHJvbGVJbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5yb2xlcywgeyBuYW1lOiBmaWVsZC5yb2xlX25hbWUgfSk7XG4gICAgICAgICAgaWYgKHJvbGVJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yb2xlc1tyb2xlSW5kZXhdWydmaWVsZHMnXS5wdXNoKGZpZWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZVN1YmplY3QubmV4dCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIGdldFRlbXBsYXRlT3duZXJJbmZvKGlkOiBzdHJpbmcpOiBQcm9taXNlPHsgcHJvZmlsZV9pZDogc3RyaW5nLCBlbWFpbDogc3RyaW5nLCBuYW1lOiBzdHJpbmcgfT4ge1xuICAgIHJldHVybiB0aGlzLnRlbXBsYXRlc1NlcnZpY2UuZ2V0VGVtcGxhdGVPd25lckluZm8oaWQpO1xuICB9XG5cbiAgdXBkYXRlVGVtcGxhdGVGaWVsZCh0ZW1wbGF0ZTogSVRlbXBsYXRlLCBib2R5OiBJRmllbGQsIG9sZE5hbWUsIGksIGopOiBPYnNlcnZhYmxlPElUZW1wbGF0ZT4ge1xuICAgIG9sZE5hbWUgPSBvbGROYW1lLnRyaW0oKTtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucHV0PElGaWVsZD4odGhpcy5yRm9ybV9iYWNrZW5kX3VybCsgJy90ZW1wbGF0ZXMvJyArIHRlbXBsYXRlLmlkICsgJy9maWVsZHMvJyArIG9sZE5hbWUsIGJvZHkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGZpZWxkID0+IHtcbiAgICAgICAgICB0aGlzLmV2ZW50VHJhY2tlci5jcmVhdGVFdmVudCh7XG4gICAgICAgICAgICBjYXRlZ29yeTogJ2RvY3VtZW50JyxcbiAgICAgICAgICAgIGFjdGlvbjogYGRvY3VtZW50ICR7ZmllbGQudHlwZX0gZmllbGQgdXBkYXRlZGAsXG4gICAgICAgICAgICBsYWJlbDogYGRvY3VtZW50IGlkOiAke3RlbXBsYXRlLmlkfWBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25zdCBmaWVsZEluZGV4ID0gZmluZEluZGV4KHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkcywgeyBuYW1lOiBvbGROYW1lIH0pO1xuICAgICAgICAgIGlmIChmaWVsZC5wYWdlX3NlcXVlbmNlIC0gMSAhPT0gaSkge1xuICAgICAgICAgICAgdGVtcGxhdGUucGFnZXNbaV0uZmllbGRzLnNwbGljZShmaWVsZEluZGV4LCAxKTtcbiAgICAgICAgICAgIHRlbXBsYXRlLnBhZ2VzW2ZpZWxkLnBhZ2Vfc2VxdWVuY2UgLSAxXS5maWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkc1tmaWVsZEluZGV4XSA9IGZpZWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCByb2xlSW5kZXggPSBmaW5kSW5kZXgodGVtcGxhdGUucm9sZXMsIHsgbmFtZTogZmllbGQucm9sZV9uYW1lIH0pO1xuICAgICAgICAgIGlmIChyb2xlSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGVtcGxhdGUgPSB0aGlzLnVwZGF0ZVJvbGVGaWVsZCh0ZW1wbGF0ZSwgZmllbGQsIHJvbGVJbmRleCwgb2xkTmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudGVtcGxhdGVTdWJqZWN0Lm5leHQodGVtcGxhdGUpO1xuICAgICAgICAgIHRoaXMuc2F2ZVN0YXR1c1N1YmplY3QubmV4dCgnc2F2ZWQnKTtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgIH0pXG4gICAgICApO1xuICB9XG5cbiAgdXBkYXRlUm9sZUZpZWxkKHRlbXBsYXRlOiBJVGVtcGxhdGUsIHVwZGF0ZWRfZmllbGQsIHJvbGVfaW5kZXgsIG9sZF9uYW1lKSB7XG4gICAgY29uc3QgZmllbGRfaW5kZXggPSBmaW5kSW5kZXgodGVtcGxhdGUucm9sZXNbcm9sZV9pbmRleF0uZmllbGRzLCB7IG5hbWU6IG9sZF9uYW1lIH0pO1xuICAgIGlmIChmaWVsZF9pbmRleCA+PSAwKSB7XG4gICAgICB0ZW1wbGF0ZS5yb2xlc1tyb2xlX2luZGV4XS5maWVsZHNbZmllbGRfaW5kZXhdID0gdXBkYXRlZF9maWVsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGVtcGxhdGUucm9sZXNbcm9sZV9pbmRleF0uZmllbGRzLnB1c2godXBkYXRlZF9maWVsZCk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIHVwZGF0ZURyb3Bkb3duRmllbGQodGVtcGxhdGU6IElUZW1wbGF0ZSwgYm9keTogYW55LCBvbGROYW1lLCBpLCBqKTogT2JzZXJ2YWJsZTxJVGVtcGxhdGU+IHtcbiAgICBvbGROYW1lID0gb2xkTmFtZS50cmltKCk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dDxhbnk+KHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZS5pZCArICcvZmllbGRzLycgKyBvbGROYW1lLCBib2R5KVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChmaWVsZCA9PiB7XG4gICAgICAgICAgY29uc3QgZmllbGRJbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHMsIHsgbmFtZTogb2xkTmFtZSB9KTtcbiAgICAgICAgICB0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHNbZmllbGRJbmRleF0gPSBmaWVsZDtcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlU3ViamVjdC5uZXh0KHRlbXBsYXRlKTtcbiAgICAgICAgICB0aGlzLnNhdmVTdGF0dXNTdWJqZWN0Lm5leHQoJ3NhdmVkJyk7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIGRlbGV0ZVNlcXVlbmNlKHRlbXBsYXRlX2lkOiBzdHJpbmcsIHNlcXVlbmNlX251bWJlcjogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzU2VydmljZS5kZWxldGVTZXF1ZW5jZSh0ZW1wbGF0ZV9pZCwgc2VxdWVuY2VfbnVtYmVyKTtcbiAgfVxuXG4gIHByZXBhcmVGaWVsZER1cGxpY2F0aW9uKGZpZWxkKSB7XG4gICAgdGhpcy5kdXBsaWNhdGVGaWVsZFN1YmplY3QubmV4dChmaWVsZCk7XG4gIH07XG5cbiAgY2hlY2tGb3JGaWVsZHMocm9sZXMpIHtcbiAgICBsZXQgaGFzRmllbGRzID0gdHJ1ZTtcbiAgICBpZiAocm9sZXMgJiYgcm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgZm9yIChsZXQgcm9sZSBvZiByb2xlcykge1xuICAgICAgICBpZiAocm9sZSAmJiByb2xlLnR5cGUgPT09ICdzaWduZXInICYmIHJvbGUuZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGhhc0ZpZWxkcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhc0ZpZWxkcyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmhhc0ZpZWxkcyA9IGhhc0ZpZWxkcztcbiAgICB0aGlzLmhhc0ZpZWxkc1N1YmplY3QubmV4dCh0aGlzLmhhc0ZpZWxkcyk7XG4gIH1cblxuICBjcmVhdGVTbmFja0Jhcih0aXRsZTogc3RyaW5nLCBidXR0b25UaXRsZSA9ICdPSycpOiB2b2lkIHtcbiAgLy8gICBsZXQgc25hY2tiYXJDb25maWc6IE1hdFNuYWNrQmFyQ29uZmlnXG4gIC8vICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDkyMCkge1xuICAvLyAgICAgc25hY2tiYXJDb25maWcgPSB7XG4gIC8vICAgICAgIHZlcnRpY2FsUG9zaXRpb246ICdib3R0b20nLFxuICAvLyAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICdsZWZ0JyxcbiAgLy8gICAgICAgZHVyYXRpb246IDUwMDBcbiAgLy8gICAgIH1cbiAgLy8gICB9IGVsc2Uge1xuICAvLyAgICAgc25hY2tiYXJDb25maWcgPSB7XG4gIC8vICAgICAgIHZlcnRpY2FsUG9zaXRpb246ICd0b3AnLFxuICAvLyAgICAgICBkdXJhdGlvbjogNTAwMFxuICAvLyAgICAgfVxuICAvLyAgIH1cbiAgLy8gICB0aGlzLnNuYWNrYmFyLm9wZW4odGl0bGUsIGJ1dHRvblRpdGxlLCBzbmFja2JhckNvbmZpZyk7XG4gIH1cblxuICBlZGl0RG9jc1VybCh0ZW1wbGF0ZUlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBlZGl0RG9jc1BhZ2VVcmwgPSBgL2J1aWxkZXIvJHt0ZW1wbGF0ZUlkfS9kb2NzYDtcbiAgICByZXR1cm4gZWRpdERvY3NQYWdlVXJsO1xuICB9XG5cbiAgZWRpdFJvbGVzVXJsKHRlbXBsYXRlSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGVkaXRSb2xlc1BhZ2VVcmwgPSBgL2J1aWxkZXIvJHt0ZW1wbGF0ZUlkfS9yb2xlc2A7XG4gICAgcmV0dXJuIGVkaXRSb2xlc1BhZ2VVcmw7XG4gIH1cblxuICBlZGl0VGVtcGxhdGVVcmwodGVtcGxhdGVJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgZWRpdFBhZ2VVcmwgPSBgL2J1aWxkZXIvJHt0ZW1wbGF0ZUlkfS9maWVsZHNgXG4gICAgcmV0dXJuIGVkaXRQYWdlVXJsO1xuICB9XG5cbiAgcHJldmlld1RlbXBsYXRlVXJsKHRlbXBsYXRlSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHJldmlld1RlbXBsYXRlVXJsID0gYC9kb2N1bWVudC8ke3RlbXBsYXRlSWR9YDtcbiAgICByZXR1cm4gcmV2aWV3VGVtcGxhdGVVcmw7XG4gIH1cblxuICBhZGRGaWVsZFJvbGUodGVtcGxhdGVJZDogc3RyaW5nLCBmaWVsZElkOiBzdHJpbmcsIHJvbGVJZDogc3RyaW5nLCBpLCBqKTogUHJvbWlzZTxGaWVsZFJvbGU+IHtcbiAgICBjb25zdCBmaWVsZFJvbGVJbmZvID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgZmllbGRfaWQ6IGZpZWxkSWQsXG4gICAgICByb2xlX2lkOiByb2xlSWRcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAucG9zdDxGaWVsZFJvbGU+KHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGUvJyArIHRlbXBsYXRlSWQgKyAnL2ZpZWxkX3JvbGUnLCBmaWVsZFJvbGVJbmZvKS50b1Byb21pc2UoKS50aGVuKGZpZWxkUm9sZSA9PiB7XG4gICAgICAgIHJldHVybiBmaWVsZFJvbGU7XG4gICAgICB9KTtcbiAgfVxuXG4gIGFkZFJvbGUocm9sZTogSVJvbGUgfCBJUm9sZVtdLCB0ZW1wbGF0ZTogSVRlbXBsYXRlKTogT2JzZXJ2YWJsZTxJVGVtcGxhdGU+IHtcbiAgICBjb25zdCB0ZW1wbGF0ZUJhY2tlbmQgPSB0aGlzLnJGb3JtX2JhY2tlbmRfdXJsKyAnL3RlbXBsYXRlcy8nICsgdGVtcGxhdGUuaWQgKyAnL3JvbGVzJztcbiAgICB0aGlzLnJvbGVzID0gW107XG4gICAgdGhpcy5yb2xlcyA9IHRoaXMucm9sZXMuY29uY2F0KHJvbGUpO1xuICAgIGNvbnN0IHJvbGVSZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMucm9sZXMuZm9yRWFjaChyb2xlID0+IHtcbiAgICAgIHJvbGVSZXF1ZXN0cy5wdXNoKHRoaXMuaHR0cC5wb3N0KHRlbXBsYXRlQmFja2VuZCwgcm9sZSkpO1xuICAgIH0pXG5cbiAgICBpZiAodGhpcy5yb2xlcyAmJiB0aGlzLnJvbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBmb3JrSm9pbihyb2xlUmVxdWVzdHMpLnBpcGUoXG4gICAgICAgIG1hcChzYXZlZFJvbGVzID0+IHtcbiAgICAgICAgICBzYXZlZFJvbGVzLmNvbmNhdChzYXZlZFJvbGVzIGFzIElSb2xlW10pO1xuICAgICAgICAgIGlmICghdGVtcGxhdGVbJ3JvbGVzJ10pIHtcbiAgICAgICAgICAgIHRlbXBsYXRlWydyb2xlcyddID0gPElSb2xlW10+W107XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHNhdmVkUm9sZXNXaXRoRmllbGRzID0gc2F2ZWRSb2xlcy5tYXAobmV3Um9sZSA9PiB7XG4gICAgICAgICAgICBuZXdSb2xlWydmaWVsZHMnXSA9IFtdO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1JvbGU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGVtcGxhdGVbJ3JvbGVzJ10gPSB0ZW1wbGF0ZVsncm9sZXMnXS5jb25jYXQoc2F2ZWRSb2xlc1dpdGhGaWVsZHMpO1xuICAgICAgICAgIHRoaXMucmVjaXBpZW50cyA9IHRoaXMuc29ydFJvbGVzKHRlbXBsYXRlKTtcbiAgICAgICAgICB0aGlzLnJvbGVzID0gdGhpcy5yZWNpcGllbnRzO1xuICAgICAgICAgIHRoaXMudGVtcGxhdGVTdWJqZWN0Lm5leHQodGVtcGxhdGUpO1xuICAgICAgICAgIHRoaXMucmVjaXBpZW50c1N1YmplY3QubmV4dCh0aGlzLnJlY2lwaWVudHMpO1xuICAgICAgICAgIHRoaXMucmVjaXBpZW50cztcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGVcbiAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdDb3VsZG5cXCd0IHNhdmUgYWxsIHRoZSByb2xlcycpO1xuICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gb2YodGVtcGxhdGUpO1xuICAgIH1cbiAgfVxuXG4gIGFkZENoZWNrYm94R3JvdXAoZmllbGQpIHtcbiAgICB0aGlzLm5ld09wdGlvblN1YmplY3QubmV4dChcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2NoZWNrYm94X2dyb3VwJyxcbiAgICAgICAgcGFnZV9zZXF1ZW5jZTogZmllbGQucGFnZV9zZXF1ZW5jZSxcbiAgICAgICAgZmllbGRfbmFtZTogZmllbGQubmFtZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgYWRkUmFkaW9Hcm91cChmaWVsZCkge1xuICAgIHRoaXMubmV3T3B0aW9uU3ViamVjdC5uZXh0KFxuICAgICAge1xuICAgICAgICB0eXBlOiAncmFkaW9fYnV0dG9uX2dyb3VwJyxcbiAgICAgICAgcGFnZV9zZXF1ZW5jZTogZmllbGQucGFnZV9zZXF1ZW5jZSxcbiAgICAgICAgZmllbGRfbmFtZTogZmllbGQubmFtZSxcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0Um9sZXNJblNlcXVlbmNlKHJvbGVzKSB7XG4gICAgY29uc3Qgcm9sZXNJblNlcXVlbmNlID0gW107XG4gICAgZm9yIChsZXQgcm9sZUluZGV4ID0gMDsgcm9sZUluZGV4IDwgcm9sZXMubGVuZ3RoOyByb2xlSW5kZXgrKykge1xuICAgICAgY29uc3Qgc2VxdWVuY2VJbmRleCA9IHJvbGVzW3JvbGVJbmRleF1bJ3NlcXVlbmNlJ10gLSAxO1xuICAgICAgY29uc3Qgcm9sZSA9IHsgLi4ucm9sZXNbcm9sZUluZGV4XSB9O1xuICAgICAgcm9sZVsnc3R5bGUnXSA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBgJHt0aGlzLmdldFJvbGVDb2xvcihyb2xlLm5hbWUsIHJvbGVJbmRleCl9YFxuICAgICAgfTtcbiAgICAgIGlmICghcm9sZXNJblNlcXVlbmNlW3NlcXVlbmNlSW5kZXhdKSB7XG4gICAgICAgIHJvbGVzSW5TZXF1ZW5jZVtzZXF1ZW5jZUluZGV4XSA9IFtyb2xlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvbGVzSW5TZXF1ZW5jZVtzZXF1ZW5jZUluZGV4XS5wdXNoKHJvbGUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm51bWJlck9mU2VxdWVuY2VTdWJqZWN0Lm5leHQocm9sZXNJblNlcXVlbmNlLmxlbmd0aCk7XG4gICAgdGhpcy5udW1iZXJPZlJvbGVzU3ViamVjdC5uZXh0KHJvbGVzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHJvbGVzSW5TZXF1ZW5jZVxuICB9XG5cbiAgZGVsZXRlUm9sZShyb2xlTmFtZSwgdGVtcGxhdGU6IElUZW1wbGF0ZSkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZS5pZCArICcvcm9sZXMvJyArIHJvbGVOYW1lKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJlbW92ZSh0ZW1wbGF0ZS5yb2xlcywgKHJvbGU6IElSb2xlKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZWNpcGllbnRzID0gdGhpcy5zb3J0Um9sZXModGVtcGxhdGUpO1xuICAgICAgICAgIGlmIChyb2xlLm5hbWUgPT09IHJvbGVOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSByb2xlLmZpZWxkcztcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgICAgICAgICAgIGZpZWxkTmFtZXMucHVzaChmaWVsZC5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGVsZXRlVGVtcGxhdGVGaWVsZHMoZmllbGROYW1lcywgdGVtcGxhdGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnRlbXBsYXRlU3ViamVjdC5uZXh0KHRlbXBsYXRlKTtcbiAgICAgICAgICB0aGlzLnJlY2lwaWVudHNTdWJqZWN0Lm5leHQodGhpcy5yZWNpcGllbnRzKTtcbiAgICAgICAgICByZXR1cm4gcm9sZS5uYW1lID09PSByb2xlTmFtZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlUm9sZXMocm9sZU5hbWVzOiBBcnJheTxzdHJpbmc+LCB0ZW1wbGF0ZTogSVRlbXBsYXRlKSB7XG4gICAgY29uc3QgZGVsZXRlQ2FsbHMgPSBbXTtcbiAgICByb2xlTmFtZXMuZm9yRWFjaChyb2xlX25hbWUgPT4ge1xuICAgICAgdGVtcGxhdGUgPSB7XG4gICAgICAgIC4uLnRlbXBsYXRlLFxuICAgICAgICByb2xlczogdGVtcGxhdGUucm9sZXMuZmlsdGVyKHJvbGUgPT4gcm9sZS5uYW1lICE9PSByb2xlX25hbWUpXG4gICAgICB9XG4gICAgICBkZWxldGVDYWxscy5wdXNoKHRoaXMuaHR0cC5kZWxldGUodGhpcy5yRm9ybV9iYWNrZW5kX3VybCsgJy90ZW1wbGF0ZXMvJyArIHRlbXBsYXRlLmlkICsgJy9yb2xlcy8nICsgcm9sZV9uYW1lKSlcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ya0pvaW4oZGVsZXRlQ2FsbHMpLnBpcGUoXG4gICAgICBtYXAoKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9LCBlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkblxcJ3QgZGVsZXRlIGFsbCB0aGUgcm9sZXMnKTtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgdXBkYXRlUm9sZXMocm9sZXMsIHRlbXBsYXRlOiBJVGVtcGxhdGUpOiBPYnNlcnZhYmxlPElUZW1wbGF0ZT4ge1xuICAgIGNvbnN0IHVwZGF0ZUNhbGxzID0gW107XG4gICAgcm9sZXMuZm9yRWFjaChyb2xlID0+IHtcbiAgICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAgIHRlbXBsYXRlX2lkOiB0ZW1wbGF0ZS5pZCxcbiAgICAgICAgbmFtZTogcm9sZS5uYW1lLnRyaW0oKSxcbiAgICAgICAgZnVsbF9uYW1lOiByb2xlLmZ1bGxfbmFtZSxcbiAgICAgICAgZW1haWw6IHJvbGUuZW1haWwsXG4gICAgICAgIHNlcXVlbmNlOiByb2xlLnNlcXVlbmNlLFxuICAgICAgICB0eXBlOiByb2xlLnR5cGUsXG4gICAgICAgIGRlbGVnYXRvcjogcm9sZS5kZWxlZ2F0b3IsXG4gICAgICAgIG1lc3NhZ2U6IHJvbGUubWVzc2FnZSxcbiAgICAgICAgcGhvbmU6IHJvbGUucGhvbmVcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm9sZV9pbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5yb2xlcywgeyBuYW1lOiByb2xlLm9sZF9uYW1lIH0pO1xuICAgICAgaWYgKHJvbGVfaW5kZXggPj0gMCkge1xuICAgICAgICB0ZW1wbGF0ZS5yb2xlc1tyb2xlX2luZGV4XSA9IHtcbiAgICAgICAgICAuLi50ZW1wbGF0ZS5yb2xlc1tyb2xlX2luZGV4XSxcbiAgICAgICAgICB0ZW1wbGF0ZV9pZDogdGVtcGxhdGUuaWQsXG4gICAgICAgICAgbmFtZTogcm9sZS5uYW1lLnRyaW0oKSxcbiAgICAgICAgICBmdWxsX25hbWU6IHJvbGUuZnVsbF9uYW1lLFxuICAgICAgICAgIGVtYWlsOiByb2xlLmVtYWlsLFxuICAgICAgICAgIHNlcXVlbmNlOiByb2xlLnNlcXVlbmNlLFxuICAgICAgICAgIHR5cGU6IHJvbGUudHlwZSxcbiAgICAgICAgICBkZWxlZ2F0b3I6IHJvbGUuZGVsZWdhdG9yLFxuICAgICAgICAgIG1lc3NhZ2U6IHJvbGUubWVzc2FnZSxcbiAgICAgICAgICBwaG9uZTogcm9sZS5waG9uZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmV2ZW50VHJhY2tlci5jcmVhdGVFdmVudCh7XG4gICAgICAgIGNhdGVnb3J5OiAnZG9jdW1lbnQnLFxuICAgICAgICBhY3Rpb246ICdkb2N1bWVudCByb2xlIHVwZGF0ZWQnLFxuICAgICAgICBsYWJlbDogYGRvY3VtZW50IGlkOiAke3RlbXBsYXRlLmlkfWBcbiAgICAgIH0pO1xuICAgICAgdXBkYXRlQ2FsbHMucHVzaCh0aGlzLmh0dHAucHV0KHRoaXMuckZvcm1fYmFja2VuZF91cmwrICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZS5pZCArICcvcm9sZXMvJyArIHJvbGUub2xkX25hbWUsIGJvZHkpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZm9ya0pvaW4odXBkYXRlQ2FsbHMpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignQ291bGRuXFwndCBzYXZlIGFsbCB0aGUgcm9sZXMnKTtcbiAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuICBzb3J0Um9sZXModGVtcGxhdGU6IElUZW1wbGF0ZSk6IElSb2xlW10ge1xuICAgIGlmICh0ZW1wbGF0ZS5yb2xlcy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3Qgcm9sZXMgPSB0ZW1wbGF0ZS5yb2xlcy5zb3J0KChhOiBJUm9sZSwgYjogSVJvbGUpID0+IHtcbiAgICAgIGlmIChhLnNlcXVlbmNlID09PSBiLnNlcXVlbmNlKSB7XG4gICAgICAgIHJldHVybiBhLm5hbWUudG9Mb3dlckNhc2UoKSA8IGIubmFtZS50b0xvd2VyQ2FzZSgpID8gLTEgOiBhLm5hbWUudG9Mb3dlckNhc2UoKSA+IGIubmFtZS50b0xvd2VyQ2FzZSgpID8gMSA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYS5zZXF1ZW5jZSAtIGIuc2VxdWVuY2U7XG4gICAgfSk7XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHJvbGVzLmxlbmd0aDsgeCsrKSB7XG4gICAgICByb2xlc1t4XVsncmdiYSddID0gZ2V0UkdCQSh4KTtcbiAgICB9XG4gICAgdGVtcGxhdGUucm9sZXMgPSByb2xlcztcblxuICAgIHJldHVybiByb2xlcztcbiAgfVxuXG4gIGdldFJvbGVDb2xvcihuYW1lLCBpbmRleD8sIHRlbXBsYXRlPzogSVRlbXBsYXRlKSB7XG4gICAgaWYgKGluZGV4ICE9PSBudWxsICYmIGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBnZXRSR0JBKGluZGV4KTtcbiAgICB9IGVsc2UgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBpZiAodGVtcGxhdGUucm9sZXMgJiYgdGVtcGxhdGUucm9sZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpbmRleCA9IGZpbmRJbmRleCh0ZW1wbGF0ZS5yb2xlcywgeyBuYW1lOiBuYW1lIH0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5yb2xlc1tpbmRleF0ucmdiYSA/IHRlbXBsYXRlLnJvbGVzW2luZGV4XS5yZ2JhIDogZ2V0UkdCQShpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuYW1lVG9SR0JBKG5hbWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmFtZVRvUkdCQShuYW1lKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVGdWxsTmFtZShyb2xlOiBJUm9sZSwgdGVtcGxhdGU6IElUZW1wbGF0ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVtcGxhdGUucGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHNbal0udHlwZSA9PT0gJ3BsYWNlaG9sZGVyJyAmJiB0ZW1wbGF0ZS5wYWdlc1tpXS5maWVsZHNbal0uc2V0dGluZ1sndHlwZSddID09PSAnZnVsbF9uYW1lJykge1xuICAgICAgICAgICAgaWYgKHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkc1tqXS5zZXR0aW5nWydyZXN1bHQnXSAhPT0gcm9sZS5mdWxsX25hbWUgJiZcbiAgICAgICAgICAgICAgdGVtcGxhdGUucGFnZXNbaV0uZmllbGRzW2pdLnJvbGVfbmFtZSA9PT0gcm9sZS5uYW1lKSB7XG4gICAgICAgICAgICAgIHRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkc1tqXS5zZXR0aW5nWydyZXN1bHQnXSA9IHJvbGUuZnVsbF9uYW1lO1xuICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkRmllbGQgPSB7IC4uLnRlbXBsYXRlLnBhZ2VzW2ldLmZpZWxkc1tqXSB9O1xuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVRlbXBsYXRlRmllbGQodGVtcGxhdGUsIHVwZGF0ZWRGaWVsZCwgdXBkYXRlZEZpZWxkLm5hbWUsIGksIGopLnRvUHJvbWlzZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVTdWJqZWN0Lm5leHQodGVtcGxhdGUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXRBY3RpdmVGaWVsZEluZGV4KGFjdGl2ZUZpZWxkSW5kZXgpIHtcbiAgICB0aGlzLmFjdGl2ZUZpZWxkSW5kZXggPSBhY3RpdmVGaWVsZEluZGV4O1xuICAgIHRoaXMuYWN0aXZlRmllbGRJbmRleFN1YmplY3QubmV4dCh0aGlzLmFjdGl2ZUZpZWxkSW5kZXgpO1xuICB9XG5cbiAgYXN5bmMgYXV0b0FkZFNpZ25lcih0ZW1wbGF0ZTogSVRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlY2lwaWVudHMgPSBhd2FpdCB0aGlzLmFkZFJvbGUoeyBuYW1lOiAnU2lnbmVyIDEnLCB0eXBlOiAnc2lnbmVyJywgc2VxdWVuY2U6IDEgfSBhcyBJUm9sZSwgdGVtcGxhdGUpLnRvUHJvbWlzZSgpO1xuICAgICAgdGhpcy5hY3RpdmVSZWNpcGllbnRTdWJqZWN0Lm5leHQocmVjaXBpZW50c1swXSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpXG4gICAgICB9LCA1MDApO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlblRlbXBsYXRlKHRlbXBsYXRlOiBJVGVtcGxhdGUpIHtcbiAgICBpZiAodGhpcy5jYW5Vc2VyUHJldmlldyh0ZW1wbGF0ZSkpIHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgZG9jdW1lbnQvJHt0ZW1wbGF0ZS5pZH1gXSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNhblVzZXJFZGl0KHRlbXBsYXRlKSkge1xuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2BidWlsZGVyLyR7dGVtcGxhdGUuaWR9L2ZpZWxkc2BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zbmFja2JhclNlcnZpY2Uub3BlbihgVGVtcGxhdGUgaXMgaW4gYnVpbGQgbW9kZSwgYW5kIG5vdCByZWFkeSBmb3IgdXNlLiAgUGxlYXNlIGNoZWNrIGJhY2sgc29vbi5gKVxuICAgIH1cbiAgfVxuXG4gIGNhblVzZXJFZGl0KHRlbXBsYXRlOiBJVGVtcGxhdGUpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IHRoaXMudGVtcGxhdGVHdWFyZC5jYW5QZXJmb3JtQWN0aW9uKFRlbXBsYXRlQWN0aW9ucy5XUklURSwgdGVtcGxhdGUpO1xuICAgIHJldHVybiByZXNwb25zZVsnY2FuUGVyZm9ybSddXG4gIH1cblxuICBjYW5Vc2VyUHJldmlldyh0ZW1wbGF0ZTogSVRlbXBsYXRlKSB7XG4gICAgY29uc3QgaGFzUGVybWlzc2lvbiA9ICh0aGlzLnRlbXBsYXRlR3VhcmQuY2FuUGVyZm9ybUFjdGlvbihUZW1wbGF0ZUFjdGlvbnMuUkVBRCwgdGVtcGxhdGUpKS5jYW5QZXJmb3JtO1xuICAgIGxldCBjYW5QcmV2aWV3O1xuICAgIGNvbnN0IHNpZ25lcnMgPSBmaWx0ZXIodGVtcGxhdGUucm9sZXMsIHsgdHlwZTogJ3NpZ25lcicgfSk7XG4gICAgY2FuUHJldmlldyA9IHNpZ25lcnMgJiYgc2lnbmVycy5sZW5ndGggPiAwO1xuICAgIGZvciAoY29uc3Qgc2lnbmVyIG9mIHNpZ25lcnMpIHtcbiAgICAgIGNhblByZXZpZXcgPSBzaWduZXJbJ2ZpZWxkcyddICYmIHNpZ25lclsnZmllbGRzJ10ubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgcmV0dXJuIGhhc1Blcm1pc3Npb24gJiYgY2FuUHJldmlldztcbiAgfVxufVxuIl19