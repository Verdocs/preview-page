/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { PlansDialog } from '../dialogs/plan-dialogs/plans-dialog.component';
import { VerdocsStateService } from '@verdocs/tokens';
import { EssentialsConfigToken } from '../essentials.module';
var GuardService = /** @class */ (function () {
    function GuardService(injector, stateService, dialog, platform) {
        this.injector = injector;
        this.stateService = stateService;
        this.dialog = dialog;
        this.platform = platform;
        this._redirectUrl = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._plans = this._config_token.plans;
        this._rAccount_frontend_url = this._config_token.rAccount_frontend_url;
    }
    /**
     * @param {?} type
     * @param {?} subscriptionType
     * @param {?} openDialog
     * @return {?}
     */
    GuardService.prototype.checkSubscription = /**
     * @param {?} type
     * @param {?} subscriptionType
     * @param {?} openDialog
     * @return {?}
     */
    function (type, subscriptionType, openDialog) {
        /** @type {?} */
        var idToken = this.stateService.getIDToken();
        /** @type {?} */
        var userId = this.toTokenObject(idToken)['sub'].slice(6);
        this._redirectUrl = this._rAccount_frontend_url + "/rAccount/user/" + userId + "/billing";
        switch (type) {
            case 'reminders':
                if (subscriptionType === this._plans['level-2'] || subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        var essentialDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        essentialDialog.componentInstance.type = 'essential';
                        essentialDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'live-link':
            case 'attachment':
            case 'payment':
                if (subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        var proDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        proDialog.componentInstance.type = 'pro';
                        proDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'open-free-envelopes':
                /** @type {?} */
                var freeDialog = this.dialog.open(PlansDialog, {
                    panelClass: 'confirmation'
                });
                freeDialog.componentInstance.type = 'free';
                freeDialog.componentInstance.redirectUrl = this._redirectUrl;
                return false;
            default:
                return false;
        }
    };
    /**
     * @param {?} accessToken
     * @return {?}
     */
    GuardService.prototype.toTokenObject = /**
     * @param {?} accessToken
     * @return {?}
     */
    function (accessToken) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var base64Url = accessToken.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
    };
    /**
     * @param {?} plans
     * @return {?}
     */
    GuardService.prototype.getHighestEnvelopePlan = /**
     * @param {?} plans
     * @return {?}
     */
    function (plans) {
        /** @type {?} */
        var plan = null;
        for (var x = 0; x < plans.length; x++) {
            if (plans[x] === this._plans['level-3']) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-2'] && (plan === null || plan === 'env:free')) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-1'] && plan === null) {
                plan = plans[x];
            }
        }
        return plan;
    };
    GuardService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GuardService.ctorParameters = function () { return [
        { type: Injector },
        { type: VerdocsStateService },
        { type: MatDialog },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return GuardService;
}());
export { GuardService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._plans;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._rAccount_frontend_url;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._redirectUrl;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VhcmQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL2Vzc2VudGlhbHMvIiwic291cmNlcyI6WyJsaWIvZ3VhcmRzL2d1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUM3RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQW9CLHFCQUFxQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFL0U7SUFXRSxzQkFDVSxRQUFrQixFQUNsQixZQUFpQyxFQUNqQyxNQUFpQixFQUNJLFFBQVE7UUFIN0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixpQkFBWSxHQUFaLFlBQVksQ0FBcUI7UUFDakMsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUNJLGFBQVEsR0FBUixRQUFRLENBQUE7UUFOL0IsaUJBQVksR0FBRyxJQUFJLENBQUM7UUFRMUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDdkMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUM7SUFDekUsQ0FBQzs7Ozs7OztJQUVELHdDQUFpQjs7Ozs7O0lBQWpCLFVBQWtCLElBQVksRUFBRSxnQkFBd0IsRUFBRSxVQUFtQjs7WUFDckUsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFOztZQUN4QyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxZQUFZLEdBQU0sSUFBSSxDQUFDLHNCQUFzQix1QkFBa0IsTUFBTSxhQUFVLENBQUM7UUFFckYsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFdBQVc7Z0JBQ2QsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLGdCQUFnQixLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7b0JBQzlGLE9BQU8sSUFBSSxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLElBQUksVUFBVSxLQUFLLElBQUksRUFBRTs7NEJBQ2pCLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7NEJBQ3BELFVBQVUsRUFBRSxjQUFjO3lCQUMzQixDQUFDO3dCQUNGLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDO3dCQUNyRCxlQUFlLENBQUMsaUJBQWlCLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7cUJBQ25FO29CQUNELE9BQU8sS0FBSyxDQUFDO2lCQUNkO1lBQ0gsS0FBSyxXQUFXLENBQUM7WUFDakIsS0FBSyxZQUFZLENBQUM7WUFDbEIsS0FBSyxTQUFTO2dCQUNaLElBQUksZ0JBQWdCLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRTtvQkFDL0MsT0FBTyxJQUFJLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsSUFBSSxVQUFVLEtBQUssSUFBSSxFQUFFOzs0QkFDakIsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTs0QkFDOUMsVUFBVSxFQUFFLGNBQWM7eUJBQzNCLENBQUM7d0JBQ0YsU0FBUyxDQUFDLGlCQUFpQixDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7d0JBQ3pDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztxQkFDN0Q7b0JBQ0QsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7WUFDSCxLQUFLLHFCQUFxQjs7b0JBQ2xCLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQy9DLFVBQVUsRUFBRSxjQUFjO2lCQUMzQixDQUFDO2dCQUNGLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO2dCQUMzQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7Z0JBQzdELE9BQU8sS0FBSyxDQUFDO1lBQ2Y7Z0JBQ0UsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDSCxDQUFDOzs7OztJQUVELG9DQUFhOzs7O0lBQWIsVUFBYyxXQUFXO1FBQ3ZCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFOztnQkFDOUIsU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztnQkFDckMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDO1lBQzVELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDOzs7OztJQUVELDZDQUFzQjs7OztJQUF0QixVQUF1QixLQUFLOztZQUN0QixJQUFJLEdBQUcsSUFBSTtRQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3ZDLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakI7aUJBQU0sSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxFQUFFO2dCQUN4RixJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pCO2lCQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDL0QsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqQjtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztnQkF6RkYsVUFBVTs7OztnQkFSa0IsUUFBUTtnQkFLNUIsbUJBQW1CO2dCQUhuQixTQUFTO2dEQXFCYixNQUFNLFNBQUMsV0FBVzs7SUEyRXZCLG1CQUFDO0NBQUEsQUExRkQsSUEwRkM7U0F6RlksWUFBWTs7Ozs7O0lBQ3ZCLHFDQUF3Qzs7Ozs7SUFDeEMsOEJBSUU7Ozs7O0lBQ0YsOENBQXVDOzs7OztJQUN2QyxvQ0FBNEI7Ozs7O0lBRzFCLGdDQUEwQjs7Ozs7SUFDMUIsb0NBQXlDOzs7OztJQUN6Qyw4QkFBeUI7Ozs7O0lBQ3pCLGdDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgSW5qZWN0b3IsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNYXREaWFsb2cgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9kaWFsb2cnO1xuXG5pbXBvcnQgeyBQbGFuc0RpYWxvZyB9IGZyb20gJy4uL2RpYWxvZ3MvcGxhbi1kaWFsb2dzL3BsYW5zLWRpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJ0B2ZXJkb2NzL3Rva2Vucyc7XG5pbXBvcnQgeyBFc3NlbnRpYWxzQ29uZmlnLCBFc3NlbnRpYWxzQ29uZmlnVG9rZW4gfSBmcm9tICcuLi9lc3NlbnRpYWxzLm1vZHVsZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHdWFyZFNlcnZpY2Uge1xuICBwcml2YXRlIF9jb25maWdfdG9rZW46IEVzc2VudGlhbHNDb25maWc7XG4gIHByaXZhdGUgX3BsYW5zOiB7XG4gICAgJ2xldmVsLTEnOiBzdHJpbmc7XG4gICAgJ2xldmVsLTInOiBzdHJpbmc7XG4gICAgJ2xldmVsLTMnOiBzdHJpbmc7XG4gIH07XG4gIHByaXZhdGUgX3JBY2NvdW50X2Zyb250ZW5kX3VybDogc3RyaW5nO1xuICBwcml2YXRlIF9yZWRpcmVjdFVybCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJpdmF0ZSBzdGF0ZVNlcnZpY2U6IFZlcmRvY3NTdGF0ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZ190b2tlbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KEVzc2VudGlhbHNDb25maWdUb2tlbik7XG4gICAgdGhpcy5fcGxhbnMgPSB0aGlzLl9jb25maWdfdG9rZW4ucGxhbnM7XG4gICAgdGhpcy5fckFjY291bnRfZnJvbnRlbmRfdXJsID0gdGhpcy5fY29uZmlnX3Rva2VuLnJBY2NvdW50X2Zyb250ZW5kX3VybDtcbiAgfVxuXG4gIGNoZWNrU3Vic2NyaXB0aW9uKHR5cGU6IHN0cmluZywgc3Vic2NyaXB0aW9uVHlwZTogc3RyaW5nLCBvcGVuRGlhbG9nOiBib29sZWFuKSB7XG4gICAgY29uc3QgaWRUb2tlbiA9IHRoaXMuc3RhdGVTZXJ2aWNlLmdldElEVG9rZW4oKTtcbiAgICBjb25zdCB1c2VySWQgPSB0aGlzLnRvVG9rZW5PYmplY3QoaWRUb2tlbilbJ3N1YiddLnNsaWNlKDYpO1xuXG4gICAgdGhpcy5fcmVkaXJlY3RVcmwgPSBgJHt0aGlzLl9yQWNjb3VudF9mcm9udGVuZF91cmx9L3JBY2NvdW50L3VzZXIvJHt1c2VySWR9L2JpbGxpbmdgO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdyZW1pbmRlcnMnOlxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uVHlwZSA9PT0gdGhpcy5fcGxhbnNbJ2xldmVsLTInXSB8fCBzdWJzY3JpcHRpb25UeXBlID09PSB0aGlzLl9wbGFuc1snbGV2ZWwtMyddKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG9wZW5EaWFsb2cgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVzc2VudGlhbERpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oUGxhbnNEaWFsb2csIHtcbiAgICAgICAgICAgICAgcGFuZWxDbGFzczogJ2NvbmZpcm1hdGlvbidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXNzZW50aWFsRGlhbG9nLmNvbXBvbmVudEluc3RhbmNlLnR5cGUgPSAnZXNzZW50aWFsJztcbiAgICAgICAgICAgIGVzc2VudGlhbERpYWxvZy5jb21wb25lbnRJbnN0YW5jZS5yZWRpcmVjdFVybCA9IHRoaXMuX3JlZGlyZWN0VXJsO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgJ2xpdmUtbGluayc6XG4gICAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICAgIGNhc2UgJ3BheW1lbnQnOlxuICAgICAgICBpZiAoc3Vic2NyaXB0aW9uVHlwZSA9PT0gdGhpcy5fcGxhbnNbJ2xldmVsLTMnXSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChvcGVuRGlhbG9nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9EaWFsb2cgPSB0aGlzLmRpYWxvZy5vcGVuKFBsYW5zRGlhbG9nLCB7XG4gICAgICAgICAgICAgIHBhbmVsQ2xhc3M6ICdjb25maXJtYXRpb24nXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByb0RpYWxvZy5jb21wb25lbnRJbnN0YW5jZS50eXBlID0gJ3Bybyc7XG4gICAgICAgICAgICBwcm9EaWFsb2cuY29tcG9uZW50SW5zdGFuY2UucmVkaXJlY3RVcmwgPSB0aGlzLl9yZWRpcmVjdFVybDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICBjYXNlICdvcGVuLWZyZWUtZW52ZWxvcGVzJzpcbiAgICAgICAgY29uc3QgZnJlZURpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oUGxhbnNEaWFsb2csIHtcbiAgICAgICAgICBwYW5lbENsYXNzOiAnY29uZmlybWF0aW9uJ1xuICAgICAgICB9KTtcbiAgICAgICAgZnJlZURpYWxvZy5jb21wb25lbnRJbnN0YW5jZS50eXBlID0gJ2ZyZWUnO1xuICAgICAgICBmcmVlRGlhbG9nLmNvbXBvbmVudEluc3RhbmNlLnJlZGlyZWN0VXJsID0gdGhpcy5fcmVkaXJlY3RVcmw7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB0b1Rva2VuT2JqZWN0KGFjY2Vzc1Rva2VuKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKSB7XG4gICAgICBjb25zdCBiYXNlNjRVcmwgPSBhY2Nlc3NUb2tlbi5zcGxpdCgnLicpWzFdO1xuICAgICAgY29uc3QgYmFzZTY0ID0gYmFzZTY0VXJsLnJlcGxhY2UoJy0nLCAnKycpLnJlcGxhY2UoJ18nLCAnLycpO1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmF0b2IoYmFzZTY0KSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SGlnaGVzdEVudmVsb3BlUGxhbihwbGFucykge1xuICAgIGxldCBwbGFuID0gbnVsbDtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHBsYW5zLmxlbmd0aDsgeCsrKSB7XG4gICAgICBpZiAocGxhbnNbeF0gPT09IHRoaXMuX3BsYW5zWydsZXZlbC0zJ10pIHtcbiAgICAgICAgcGxhbiA9IHBsYW5zW3hdO1xuICAgICAgfSBlbHNlIGlmIChwbGFuc1t4XSA9PT0gdGhpcy5fcGxhbnNbJ2xldmVsLTInXSAmJiAocGxhbiA9PT0gbnVsbCB8fCBwbGFuID09PSAnZW52OmZyZWUnKSkge1xuICAgICAgICBwbGFuID0gcGxhbnNbeF07XG4gICAgICB9IGVsc2UgaWYgKHBsYW5zW3hdID09PSB0aGlzLl9wbGFuc1snbGV2ZWwtMSddICYmIHBsYW4gPT09IG51bGwpIHtcbiAgICAgICAgcGxhbiA9IHBsYW5zW3hdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGxhbjtcbiAgfVxufVxuIl19