/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { VSDKConfigToken } from '../angular-api.module';
export class TemplatesRemindersService {
    /**
     * @param {?} http
     * @param {?} injector
     */
    constructor(http, injector) {
        this.http = http;
        this.injector = injector;
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} templateId
     * @param {?} reminderId
     * @return {?}
     */
    getReminder(templateId, reminderId) {
        return this.http.get(`${this._rForm_backend_url}/templates/${templateId}/reminder/${reminderId}`).toPromise()
            .then((/**
         * @param {?} reminder
         * @return {?}
         */
        (reminder) => {
            return reminder;
        }));
    }
    /**
     * @param {?} templateId
     * @param {?} reminderId
     * @param {?} body
     * @return {?}
     */
    updateReminder(templateId, reminderId, body) {
        return this.http
            .put(`${this._rForm_backend_url}/templates/${templateId}/reminder/${reminderId}`, body)
            .toPromise();
    }
    /**
     * @param {?} templateId
     * @param {?} reminderId
     * @return {?}
     */
    deleteReminder(templateId, reminderId) {
        return this.http.delete(`${this._rForm_backend_url}/templates/${templateId}/reminder/${reminderId}`).toPromise();
    }
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    createReminder(templateId, body) {
        return this.http.post(`${this._rForm_backend_url}/templates/${templateId}/reminder`, body).toPromise()
            .then((/**
         * @param {?} reminder
         * @return {?}
         */
        (reminder) => {
            return reminder;
        }));
    }
}
TemplatesRemindersService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TemplatesRemindersService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TemplatesRemindersService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    TemplatesRemindersService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    TemplatesRemindersService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TemplatesRemindersService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtcmVtaW5kZXJzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9zZGsvIiwic291cmNlcyI6WyJsaWIvdGVtcGxhdGVzL3RlbXBsYXRlLXJlbWluZGVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3BFLE1BQU0sT0FBTyx5QkFBeUI7Ozs7O0lBS3BDLFlBQ1UsSUFBZ0IsRUFDaEIsUUFBa0I7UUFEbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRTFCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7SUFDakUsQ0FBQzs7Ozs7O0lBR0QsV0FBVyxDQUFDLFVBQVUsRUFBRSxVQUFVO1FBQ2hDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLGNBQWMsVUFBVSxhQUFhLFVBQVUsRUFBRSxDQUFDLENBQUMsU0FBUyxFQUFFO2FBQ3JILElBQUk7Ozs7UUFBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxVQUFrQixFQUFFLFVBQVUsRUFBRSxJQUFJO1FBQ2pELE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLGNBQWMsVUFBVSxhQUFhLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQzthQUNqRyxTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsVUFBVSxFQUFFLFVBQVU7UUFDbkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsY0FBYyxVQUFVLGFBQWEsVUFBVSxFQUFFLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuSCxDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsVUFBVSxFQUFFLElBQW1EO1FBQzVFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLGNBQWMsVUFBVSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFO2FBQzlHLElBQUk7Ozs7UUFBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBckNGLFVBQVU7Ozs7WUFORixVQUFVO1lBREUsUUFBUTs7Ozs7OztJQVUzQixrREFBa0M7Ozs7O0lBQ2xDLHVEQUFtQzs7Ozs7SUFHakMseUNBQXdCOzs7OztJQUN4Qiw2Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgVlNES0NvbmZpZywgVlNES0NvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vYW5ndWxhci1hcGkubW9kdWxlJztcbmltcG9ydCB7IElSZW1pbmRlciB9IGZyb20gJy4uL21vZGVscy9yZW1pbmRlci5tb2RlbCc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlc1JlbWluZGVyc1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgX2NvbmZpZ190b2tlbjogVlNES0NvbmZpZztcbiAgcHJpdmF0ZSBfckZvcm1fYmFja2VuZF91cmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3JcbiAgKSB7XG4gICAgdGhpcy5fY29uZmlnX3Rva2VuID0gdGhpcy5pbmplY3Rvci5nZXQoVlNES0NvbmZpZ1Rva2VuKTtcbiAgICB0aGlzLl9yRm9ybV9iYWNrZW5kX3VybCA9IHRoaXMuX2NvbmZpZ190b2tlbi5yRm9ybV9iYWNrZW5kX3VybDtcbiAgfVxuXG5cbiAgZ2V0UmVtaW5kZXIodGVtcGxhdGVJZCwgcmVtaW5kZXJJZCk6IFByb21pc2U8SVJlbWluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8SVJlbWluZGVyPihgJHt0aGlzLl9yRm9ybV9iYWNrZW5kX3VybH0vdGVtcGxhdGVzLyR7dGVtcGxhdGVJZH0vcmVtaW5kZXIvJHtyZW1pbmRlcklkfWApLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbigocmVtaW5kZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlbWluZGVyO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVSZW1pbmRlcih0ZW1wbGF0ZUlkOiBzdHJpbmcsIHJlbWluZGVySWQsIGJvZHkpOiBQcm9taXNlPElSZW1pbmRlcj4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5wdXQ8SVJlbWluZGVyPihgJHt0aGlzLl9yRm9ybV9iYWNrZW5kX3VybH0vdGVtcGxhdGVzLyR7dGVtcGxhdGVJZH0vcmVtaW5kZXIvJHtyZW1pbmRlcklkfWAsIGJvZHkpXG4gICAgICAudG9Qcm9taXNlKCk7XG4gIH1cblxuICBkZWxldGVSZW1pbmRlcih0ZW1wbGF0ZUlkLCByZW1pbmRlcklkKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUoYCR7dGhpcy5fckZvcm1fYmFja2VuZF91cmx9L3RlbXBsYXRlcy8ke3RlbXBsYXRlSWR9L3JlbWluZGVyLyR7cmVtaW5kZXJJZH1gKS50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGNyZWF0ZVJlbWluZGVyKHRlbXBsYXRlSWQsIGJvZHk6IHsgc2V0dXBfdGltZTogbnVtYmVyLCBpbnRlcnZhbF90aW1lOiBudW1iZXIgfSk6IFByb21pc2U8SVJlbWluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PElSZW1pbmRlcj4oYCR7dGhpcy5fckZvcm1fYmFja2VuZF91cmx9L3RlbXBsYXRlcy8ke3RlbXBsYXRlSWR9L3JlbWluZGVyYCwgYm9keSkudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKChyZW1pbmRlcikgPT4ge1xuICAgICAgICByZXR1cm4gcmVtaW5kZXI7XG4gICAgICB9KTtcbiAgfVxuXG59XG4iXX0=