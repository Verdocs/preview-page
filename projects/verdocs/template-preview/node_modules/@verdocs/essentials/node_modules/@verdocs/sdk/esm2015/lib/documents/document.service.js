/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, empty } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { findIndex } from 'lodash';
import { differenceBy } from 'lodash';
import { VerdocsTokenObjectService, VerdocsStateService } from '@verdocs/tokens';
// import { saveAs } from 'file-saver';
// import * as jszip from 'jszip';
// import * as moment from 'moment';
import { ValidatorService } from '../validators/validator.service';
import { getRGBA, nameToRGBA } from '../functions/rgb';
import { VSDKConfigToken } from '../angular-api.module';
import { FieldData } from '../models/field-data.model';
export class DocumentsService {
    /**
     * @param {?} httpClient
     * @param {?} validatorService
     * @param {?} tokenObjectService
     * @param {?} vTokenStateService
     * @param {?} injector
     * @param {?} platform
     */
    constructor(httpClient, validatorService, tokenObjectService, vTokenStateService, injector, platform) {
        this.httpClient = httpClient;
        this.validatorService = validatorService;
        this.tokenObjectService = tokenObjectService;
        this.vTokenStateService = vTokenStateService;
        this.injector = injector;
        this.platform = platform;
        this._currentFields = new BehaviorSubject([]);
        this._currEnvelope = new BehaviorSubject('');
        this.allEnvelopes = new BehaviorSubject([]);
        this._currentExtendedEnvelope = new BehaviorSubject({});
        this._customFilterSubject = new BehaviorSubject({});
        this.currEnvelope$ = this._currEnvelope.asObservable();
        this.fieldsStream = this._currentFields.asObservable();
        this.inProgressSubject = new BehaviorSubject(false);
        this.workingField = new FieldData({ order: 0 });
        this.envelope = null;
        this.validators = {};
        this.toggleNextSubject = new BehaviorSubject(false);
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
        this._documentUrl = `${this._rForm_backend_url}/envelopes`;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setCurrentEnvelope(id) {
        this.currEnvelope = id;
        this._currEnvelope.next(id);
    }
    /**
     * @param {?} envId
     * @param {?} roleId
     * @return {?}
     */
    setEnvData(envId, roleId) {
        this.currEnvelope = envId;
        this.currRoleName = roleId;
    }
    /**
     * @param {?} envelopes
     * @return {?}
     */
    updateEnvelopes(envelopes) {
        this.allEnvelopes.next(envelopes);
    }
    /**
     * @return {?}
     */
    get role_name() {
        return this.currRoleName;
    }
    /**
     * @return {?}
     */
    get env_id() {
        return this.currEnvelope;
    }
    /**
     * @param {?} body
     * @return {?}
     */
    sendInvite(body) {
        return this.httpClient.post(this._documentUrl, body)
            .pipe(map((/**
         * @param {?} envelope
         * @return {?}
         */
        (envelope) => envelope), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return err;
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} role
     * @return {?}
     */
    sendDelegate(envelopeId, role) {
        return this.httpClient.post(this._documentUrl + `/${envelopeId}/recipients/${this.currRoleName}/delegate`, role)
            .pipe(map((/**
         * @param {?} envelope
         * @return {?}
         */
        (envelope) => envelope), (/**
         * @param {?} err
         * @return {?}
         */
        err => err)));
    }
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    resendInvitation(envelopeId, roleName) {
        return this.httpClient.post(this._documentUrl + `/${envelopeId}/recipients/${roleName}/resend_invitation`, null);
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    getEnvelope(id) {
        /** @type {?} */
        const envelopeId = id ? id : this.currEnvelope;
        this.setCurrentEnvelope(envelopeId);
        return this.httpClient.get(this._documentUrl + `/${envelopeId}`)
            .pipe(map((/**
         * @param {?} envelopeExtended
         * @return {?}
         */
        (envelopeExtended) => {
            this.envelope = (/** @type {?} */ (envelopeExtended));
            this.envelope.recipients = this.sortRecipients(this.envelope);
            this._currentExtendedEnvelope.next(this.envelope);
            this.envelopeData = this.envelope;
            return this.envelope;
        })));
    }
    /**
     * @param {?=} templateId
     * @return {?}
     */
    getAllEnvelopes(templateId) {
        /** @type {?} */
        const endpoint = templateId ? this._documentUrl + `?template_id=${templateId}` : this._documentUrl;
        return this.httpClient.request(new HttpRequest('GET', endpoint, {}, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof HttpResponse) {
                this.updateEnvelopes(event.body);
                return (/** @type {?} */ (event));
            }
            return event;
        })));
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchEnvelopes(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.httpClient.request(new HttpRequest('POST', this._documentUrl + '/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof HttpResponse) {
                this.updateEnvelopes(event.body);
                return (/** @type {?} */ (event));
            }
            return event;
        })));
    }
    /**
     * @param {?=} page
     * @return {?}
     */
    getRecentActivities(page) {
        /** @type {?} */
        const searchBody = {
            sort_by: (/** @type {?} */ ('updated_at')),
            ascending: false,
            row: 5,
            page: page ? page : 1
        };
        return this.searchEnvelopes(searchBody);
    }
    /**
     * @param {?} filters
     * @param {?} searchParams
     * @return {?}
     */
    applyCustomSearch(filters, searchParams) {
        if (filters['envelope_status'] && !searchParams['envelope_status']) {
            searchParams['envelope_status'] = filters['envelope_status'];
        }
        if (filters['updated_at']) {
            if (!searchParams['updated_at'] && !!searchParams['envelope_status']) {
                searchParams['updated_at'] = filters['updated_at'];
            }
            else if (!searchParams['envelope_status']) {
                searchParams['created_at'] = filters['updated_at'];
                if (!searchParams['sort_by']) {
                    searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                }
            }
        }
        if (filters['recipient_name']) {
            searchParams['recipient_name'] = filters['recipient_name'];
        }
        if (filters['envelope_name']) {
            searchParams['envelope_name'] = filters['envelope_name'];
        }
        if (filters['recipient_email']) {
            searchParams['recipient_email'] = filters['recipient_email'];
        }
        if (filters['text_field_value']) {
            searchParams['text_field_value'] = filters['text_field_value'];
        }
        return searchParams;
    }
    /**
     * @param {?} type
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    filterSearchBy(type, ascending, row, page, filterTime, sortBy, customFilters) {
        /** @type {?} */
        let searchParams = {
            ascending: ascending || false,
            row: row || 10,
            page: page || 1
        };
        switch (type) {
            case 'action_required':
                searchParams['is_recipient'] = true;
                searchParams['recipient_status'] = ['invited', 'opened', 'signed'];
                searchParams['envelope_status'] = ['pending', 'in progress'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy));
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'waiting_on_others':
                return this.getWaitingOnOthers(ascending, row, page, filterTime, sortBy, customFilters);
            case 'waiting_on_others_unfiltered':
                searchParams['is_owner'] = true;
                searchParams['envelope_status'] = ['pending', 'in progress'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'inbox':
                searchParams['is_recipient'] = true;
                searchParams['recipient_status'] = ['invited', 'declined', 'opened', 'signed', 'submitted', 'canceled'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            case 'completed':
                searchParams['envelope_status'] = ['complete'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'sent':
                searchParams['is_owner'] = true;
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            case 'all':
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            default:
                break;
        }
        if (!!customFilters) {
            searchParams = this.applyCustomSearch(customFilters, Object.assign({}, searchParams));
        }
        return this.searchEnvelopes(searchParams);
    }
    /**
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    getWaitingOnOthers(ascending, row, page, filterTime, sortBy, customFilters) {
        /** @type {?} */
        let actionRequiredEnvelopes = null;
        return this.filterSearchBy('action_required', ascending, row, page, filterTime, sortBy, customFilters)
            .pipe(concatMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res instanceof HttpResponse) {
                actionRequiredEnvelopes = res.body['result'];
                return this.filterSearchBy('waiting_on_others_unfiltered', ascending, row, page, filterTime, sortBy, customFilters);
            }
            else {
                return empty();
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response instanceof HttpResponse && actionRequiredEnvelopes) {
                /** @type {?} */
                const unfilteredWaitingOnOthers = response['body']['result'];
                /** @type {?} */
                const filteredWaitingOnOthers = differenceBy(unfilteredWaitingOnOthers, actionRequiredEnvelopes, 'id');
                response.body['result'] = filteredWaitingOnOthers;
                response.body['total'] = filteredWaitingOnOthers.length;
            }
            return response;
        })));
    }
    /**
     * @param {?} envId
     * @return {?}
     */
    getEnvelopeOwnerInfo(envId) {
        return this.httpClient.get(this._documentUrl + `/${envId}?owner_info=true`).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return res;
        })));
    }
    /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    getEnvelopeDocUrl(envId, docId) {
        return this.httpClient.get(this._documentUrl + `/${envId}/envelope_documents/${docId}?file=true`, { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            if (isPlatformBrowser(this.platform)) {
                /** @type {?} */
                const urlCreator = window.URL;
                /** @type {?} */
                const pdfUrl = urlCreator.createObjectURL(res);
                return pdfUrl;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            // use a snackBar/error.service
            console.error(err);
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} documentId
     * @return {?}
     */
    getEnvelopePdfWithProgress(envelopeId, documentId) {
        /** @type {?} */
        const requestUrl = this._documentUrl + `/${envelopeId}/envelope_documents/${documentId}?file=true`;
        return this.httpClient.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => event)));
    }
    /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    getEnvelopeDocBlob(envId, docId) {
        return this.httpClient.get(this._documentUrl + `/${envId}/envelope_documents/${docId}?file=true`, { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        file => {
            return file;
        })));
    }
    /**
     * @param {?} envId
     * @return {?}
     */
    getEnvelopeCertificateBlob(envId) {
        return this.httpClient.get(this._documentUrl + `/${envId}?certificate_file=true`, { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        file => {
            return file;
        })));
    }
    /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} templateId
     * @param {?} token
     * @param {?} file
     * @return {?}
     */
    // downloadEnvelope(envelope) {
    //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
    //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
    //   });
    // }
    // downloadEnvelopeCertificate(envelope) {
    //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
    //     if (pdfBlob) {
    //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
    //     }
    //   });
    // }
    getTemplateDoc(templateId, token, file) {
        /** @type {?} */
        const requestUrl = this._rForm_backend_url + `/liveview/${templateId}/token/${token}`;
        return this.httpClient.get(requestUrl, { responseType: 'json' })
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            return err;
        })));
    }
    /**
     * @param {?} templateId
     * @param {?} token
     * @return {?}
     */
    getTemplatePDF(templateId, token) {
        /** @type {?} */
        const requestUrl = this._rForm_backend_url + `/liveview/${templateId}/token/${token}?file=true`;
        return this.httpClient.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event;
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    cancelEnvelope(id) {
        return this.httpClient.put(this._documentUrl + `/${id}`, { action: 'cancel' }, { responseType: 'json' })
            .pipe(map((/**
         * @param {?} envelopeData
         * @return {?}
         */
        envelopeData => envelopeData), (/**
         * @param {?} err
         * @return {?}
         */
        err => err)));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    submitEnvelope(envId, roleName) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}`, { action: 'submit' }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res;
        })));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    declineEnvelope(envId, roleName) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}`, { action: 'decline' }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res;
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} file
     * @param {?} fieldName
     * @return {?}
     */
    uploadAttachment(envelopeId, file, fieldName) {
        /** @type {?} */
        let req;
        if (file) {
            /** @type {?} */
            const formdata = new FormData();
            formdata.append('document', file, file.name);
            req = new HttpRequest('PUT', this._rForm_backend_url + '/envelopes/' + envelopeId +
                '/fields/' + fieldName, formdata, {
                reportProgress: true
            });
            return this.httpClient.request(req).pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            res => res)));
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    downloadAttachment(field) {
        /** @type {?} */
        const header = new HttpHeaders().set('content-type', field.settings.type);
        return this.httpClient.get(this._rForm_backend_url + '/envelopes/' + field.envelope_id +
            '/fields/' + field.name + '/document', { headers: header, responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        file => {
            return file;
        })));
    }
    /**
     * @param {?} envelope
     * @return {?}
     */
    getAttachmentDataByRecipients(envelope) {
        /** @type {?} */
        const recipients = envelope['recipients'];
        if (recipients && recipients.length > 0) {
            /** @type {?} */
            const attachments = [];
            for (const recipient of recipients) {
                if (recipient.fields && recipient.fields.length > 0) {
                    for (const field of recipient.fields) {
                        if (field.type === 'attachment' && !!field.settings.url) {
                            attachments.push({
                                recipient: recipient.full_name,
                                fieldObject: field
                            });
                        }
                    }
                }
            }
            return attachments;
        }
        return [];
    }
    /**
     * **************
     * Signature API *
     * **************
     * @param {?} signatureBlob
     * @return {?}
     */
    postSignatureBlob(signatureBlob) {
        /** @type {?} */
        const blobFile = signatureBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('signature', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload signature image');
            }
        }));
    }
    /**
     * @param {?} initialBlob
     * @return {?}
     */
    postInitialBlob(initialBlob) {
        /** @type {?} */
        const blobFile = initialBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('initial', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload Initial');
            }
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    putSignatureField(envelopeId, fieldName, signatureId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this._documentUrl + `/${envelopeId}/fields/${fieldName}/signature/${signatureId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    putInitialField(envelopeId, fieldName, initialId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this._documentUrl + `/${envelopeId}/fields/${fieldName}/initial/${initialId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    putEnvelopeField(envelopeId, result) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this._documentUrl + `/${envelopeId}/fields/${this.workingField.fName}`, result).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    updateGroupedField(envelopeId, body, fieldName, ifPrepared) {
        if (typeof (ifPrepared) === 'boolean') {
            body['prepared'] = ifPrepared;
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this._documentUrl + `/${envelopeId}/fields/${fieldName}`, body).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getPublicIp() {
        /** @type {?} */
        const apiUrl = 'https://api.ipify.org?format=jsonp';
        /** @type {?} */
        const callback = 'callback=JSONP_CALLBACK';
        return this.httpClient
            .jsonp(apiUrl, callback)
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res['ip'];
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error('Failed to get ip', err);
            return 'ip_unavailable';
        }));
    }
    /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} envelope
     * @return {?}
     */
    // async zipEnvelopeDocs(envelope) {
    //   const zip = new jszip();
    //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
    //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
    //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
    //   });
    //   if (this.hasCertificate(envelope)) {
    //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
    //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
    //     });
    //   }
    //   const attachment = zip.folder('attachments');
    //   const fields = envelope.fields;
    //   let numOfAttachments = 0;
    //   for (let x = 0; x < fields.length; x++) {
    //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
    //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
    //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
    //         numOfAttachments++;
    //       });
    //     }
    //   }
    //   if (numOfAttachments === 0) {
    //     zip.remove('attachments');
    //   }
    //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
    //     saveAs(content, envelopeZipName + '.zip');
    //   })
    // }
    sortRecipients(envelope) {
        if (envelope.recipients.length < 1) {
            return [];
        }
        /** @type {?} */
        const recipients = envelope.recipients.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.sequence === b.sequence) {
                return a.role_name < b.role_name ? -1 : a.role_name > b.role_name ? 1 : 0;
            }
            return b.sequence > a.sequence ? -1 : b.sequence < a.sequence ? 1 : 0;
        }));
        /** @type {?} */
        const signers = recipients.filter((/**
         * @param {?} recipient
         * @return {?}
         */
        recipient => {
            return recipient.type === 'signer';
        }));
        for (let x = 0; x < signers.length; x++) {
            /** @type {?} */
            const rIndex = findIndex(recipients, { sequence: signers[x].sequence, role_name: signers[x].role_name });
            if (rIndex >= 0) {
                recipients[rIndex]['rgba'] = getRGBA(x);
            }
        }
        return recipients;
    }
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    getRecipientColor(name, index) {
        if (index) {
            return getRGBA(index);
        }
        else if (this.envelope && this.envelope.recipients && this.envelope.recipients.length > 0) {
            /** @type {?} */
            let index = findIndex(this.envelope.recipients, { role_name: name });
            if (index >= 0 && this.envelope.recipients[index].rgba) {
                return this.envelope.recipients[index].rgba;
            }
        }
        else {
            return nameToRGBA(name);
        }
    }
    // Check the logic
    /**
     * @return {?}
     */
    validateEnvelopeField() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.workingField.vName != null && this.workingField.value !== '') {
                /** @type {?} */
                const validators = yield this.validatorService.getValidatorsObject();
                return validators[this.workingField.vName].test(this.workingField.value) && this.satisfyRequired();
            }
            else {
                return this.satisfyRequired();
            }
        });
    }
    /**
     * @private
     * @return {?}
     */
    satisfyRequired() {
        if (!!this.workingField.required && this.workingField.type !== 'checkbox' && this.workingField.type !== 'timestamp') {
            return !!this.workingField.value;
        }
        return true;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    sortFields(fields) {
        fields = fields.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            return a.page - b.page;
        }));
        /** @type {?} */
        let previousDistance = null;
        fields = fields.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            let setting = 'settings';
            /** @type {?} */
            let distance = this.canBeSameRow(a, b).distance;
            /** @type {?} */
            let higherHeight = this.canBeSameRow(a, b).higherHeight;
            if (!a[setting]) {
                setting = 'setting';
            }
            if (a.page < b.page) {
                return -1;
            }
            if (a.page > b.page) {
                return 1;
            }
            /** @type {?} */
            const ax = a[setting].x;
            /** @type {?} */
            const bx = b[setting].x;
            /** @type {?} */
            const ay = a[setting].y;
            /** @type {?} */
            const by = b[setting].y;
            if (distance >= -3 && distance <= higherHeight) {
                previousDistance = previousDistance === null ? distance : distance < previousDistance ? distance : previousDistance;
                if (ax < bx) {
                    return -1;
                }
                else if (ax > bx) {
                    return 1;
                }
                else if (previousDistance >= distance) {
                    return -1;
                }
                else if (previousDistance <= distance) {
                    return 1;
                }
                return 0;
            }
            return b[setting].y - a[setting].y;
        }));
        return fields;
    }
    /**
     * @param {?} envelope
     * @return {?}
     */
    checkIfEnvelopeOwner(envelope) {
        /** @type {?} */
        const signer_token = this.vTokenStateService.getOtherCookie('signer_token');
        /** @type {?} */
        const profile = this.tokenObjectService.getProfile();
        if (signer_token && !profile) {
            return false;
        }
        else if (envelope) {
            /** @type {?} */
            const currentUserId = profile['id'];
            return currentUserId === envelope['profile_id'];
        }
    }
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    canBeSameRow(a, b) {
        /** @type {?} */
        let setting = 'setting';
        if (!a[setting]) {
            setting = 'settings';
        }
        /** @type {?} */
        const aHeight = this.getHeight(a);
        /** @type {?} */
        const bHeight = this.getHeight(b);
        /** @type {?} */
        const aBottom = a[setting].y;
        /** @type {?} */
        const bBottom = b[setting].y;
        /** @type {?} */
        let top;
        /** @type {?} */
        let higherBottom;
        /** @type {?} */
        let higherHeight;
        if (aBottom < bBottom) {
            top = aHeight + aBottom;
            higherBottom = bBottom;
            higherHeight = bHeight;
        }
        else {
            top = bHeight + bBottom;
            higherBottom = aBottom;
            higherHeight = aHeight;
        }
        /** @type {?} */
        const distance = top - higherBottom;
        return { distance, higherHeight };
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    getHeight(field) {
        /** @type {?} */
        let setting = 'setting';
        if (!field[setting]) {
            setting = 'settings';
        }
        /** @type {?} */
        let height = 0;
        switch (field.type) {
            case 'signature':
            case 'initial':
                height = 36;
                break;
            case 'checkbox':
                height = 13.5;
                break;
            case 'attachment':
            case 'payment':
                height = 24;
                break;
            default:
                height = field[setting]['height'] || 0;
                break;
        }
        return height;
    }
    /**
     * @param {?} envelope
     * @return {?}
     */
    hasCertificate(envelope) {
        return envelope.certificate_document_id || ['complete', 'canceled', 'declined'].indexOf(this.envelope.status) !== -1;
    }
}
DocumentsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DocumentsService.ctorParameters = () => [
    { type: HttpClient },
    { type: ValidatorService },
    { type: VerdocsTokenObjectService },
    { type: VerdocsStateService },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._currentFields;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._currEnvelope;
    /** @type {?} */
    DocumentsService.prototype.allEnvelopes;
    /** @type {?} */
    DocumentsService.prototype._currentExtendedEnvelope;
    /** @type {?} */
    DocumentsService.prototype._customFilterSubject;
    /** @type {?} */
    DocumentsService.prototype.currEnvelope$;
    /** @type {?} */
    DocumentsService.prototype.fieldsStream;
    /** @type {?} */
    DocumentsService.prototype.inProgressSubject;
    /** @type {?} */
    DocumentsService.prototype.envelopeData;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.currEnvelope;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.currRoleName;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._documentUrl;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.workingField;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.envelope;
    /** @type {?} */
    DocumentsService.prototype.validators;
    /** @type {?} */
    DocumentsService.prototype.toggleNextSubject;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.validatorService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.tokenObjectService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,