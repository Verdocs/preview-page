(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@verdocs/tokens'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('lodash'), require('@verdocs/event-tracker')) :
    typeof define === 'function' && define.amd ? define('@verdocs/sdk', ['exports', '@angular/core', '@angular/common/http', '@verdocs/tokens', '@angular/common', 'rxjs', 'rxjs/operators', 'lodash', '@verdocs/event-tracker'], factory) :
    (global = global || self, factory((global.verdocs = global.verdocs || {}, global.verdocs.sdk = {}), global.ng.core, global.ng.common.http, global.tokens, global.ng.common, global.rxjs, global.rxjs.operators, global.lodash, global.eventTracker));
}(this, function (exports, core, http, tokens, common, rxjs, operators, lodash, eventTracker) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ComponentData() { }
    if (false) {
        /** @type {?} */
        ComponentData.prototype.component;
        /** @type {?} */
        ComponentData.prototype.inputs;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var TemplateSenderTypes = {
        CREATOR: 'creator',
        ORGANIZATION_MEMBER: 'organization_member',
        ORGANIZATION_MEMBER_AS_CREATOR: 'organization_member_as_creator',
        EVERYONE: 'everyone',
        EVERYONE_AS_CREATOR: 'everyone_as_creator' // Creator would be sender of envelope no matter who creates the envelope
        ,
    };
    /** @enum {string} */
    var TemplatePermissions = {
        TEMPLATE_CREATOR_CREATE_PUBLIC: 'template:creator:create:public',
        TEMPLATE_CREATOR_CREATE_ORG: 'template:creator:create:org',
        TEMPLATE_CREATOR_CREATE_PERSONAL: 'template:creator:create:personal',
        TEMPLATE_CREATOR_DELETE: 'template:creator:delete',
        TEMPLATE_CREATOR_VISIBILITY: 'template:creator:visibility',
        TEMPLATE_MEMBER_READ: 'template:member:read',
        TEMPLATE_MEMBER_WRITE: 'template:member:write',
        TEMPLATE_MEMBER_DELETE: 'template:member:delete',
        TEMPLATE_MEMBER_VISIBILITY: 'template:member:visibility',
    };
    ;
    /** @enum {string} */
    var TemplateActions = {
        CREATE_PERSONAL: 'create_personal',
        CREATE_ORG: 'create_org',
        CREATE_PUBLIC: 'create_public',
        READ: 'read',
        WRITE: 'write',
        DELETE: 'delete',
        CHANGE_VISIBILITY_PERSONAL: 'change_visibility_personal',
        CHANGE_VISIBILITY_ORG: 'change_visibility_org',
        CHANGE_VISIBILITY_PUBLIC: 'change_visibility_public',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IDocument() { }
    if (false) {
        /** @type {?|undefined} */
        IDocument.prototype.id;
        /** @type {?} */
        IDocument.prototype.status;
        /** @type {?} */
        IDocument.prototype.profile_id;
        /** @type {?} */
        IDocument.prototype.template_id;
        /** @type {?|undefined} */
        IDocument.prototype.created_at;
        /** @type {?|undefined} */
        IDocument.prototype.updated_at;
        /** @type {?|undefined} */
        IDocument.prototype.canceled_at;
        /** @type {?} */
        IDocument.prototype.envelope_document_id;
        /** @type {?|undefined} */
        IDocument.prototype.certificate_document_id;
        /** @type {?|undefined} */
        IDocument.prototype.document;
        /** @type {?|undefined} */
        IDocument.prototype.certificate;
        /** @type {?|undefined} */
        IDocument.prototype.fields;
        /** @type {?|undefined} */
        IDocument.prototype.recipients;
        /** @type {?|undefined} */
        IDocument.prototype.histories;
        /** @type {?|undefined} */
        IDocument.prototype.component;
        /** @type {?|undefined} */
        IDocument.prototype.name;
        /** @type {?|undefined} */
        IDocument.prototype.reminder_id;
        /** @type {?|undefined} */
        IDocument.prototype.reminder;
        /** @type {?|undefined} */
        IDocument.prototype.owner;
    }
    /**
     * @record
     */
    function EnvelopeComponent() { }
    if (false) {
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.progress;
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.status_color;
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.selected_format_time;
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.format_time;
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.selected;
        /** @type {?|undefined} */
        EnvelopeComponent.prototype.envelope__list__class;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IDocumentField() { }
    if (false) {
        /** @type {?|undefined} */
        IDocumentField.prototype.name;
        /** @type {?} */
        IDocumentField.prototype.recipient_role;
        /** @type {?} */
        IDocumentField.prototype.envelope_id;
        /** @type {?} */
        IDocumentField.prototype.page;
        /** @type {?} */
        IDocumentField.prototype.type;
        /** @type {?} */
        IDocumentField.prototype.required;
        /** @type {?|undefined} */
        IDocumentField.prototype.settings;
        /** @type {?|undefined} */
        IDocumentField.prototype.recipients;
        /** @type {?|undefined} */
        IDocumentField.prototype.validator;
        /** @type {?|undefined} */
        IDocumentField.prototype.label;
        /** @type {?} */
        IDocumentField.prototype.prepared;
    }
    /**
     * @record
     */
    function ISetting() { }
    if (false) {
        /** @type {?|undefined} */
        ISetting.prototype.x;
        /** @type {?|undefined} */
        ISetting.prototype.y;
        /** @type {?|undefined} */
        ISetting.prototype.width;
        /** @type {?|undefined} */
        ISetting.prototype.height;
        /** @type {?|undefined} */
        ISetting.prototype.result;
        /** @type {?|undefined} */
        ISetting.prototype.type;
        /** @type {?|undefined} */
        ISetting.prototype.options;
        /** @type {?|undefined} */
        ISetting.prototype.leading;
        /** @type {?|undefined} */
        ISetting.prototype.alignment;
        /** @type {?|undefined} */
        ISetting.prototype.upperCase;
        /** @type {?|undefined} */
        ISetting.prototype.url;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IEnvelopeHistory() { }
    if (false) {
        /** @type {?|undefined} */
        IEnvelopeHistory.prototype.id;
        /** @type {?|undefined} */
        IEnvelopeHistory.prototype.envelope_id;
        /** @type {?|undefined} */
        IEnvelopeHistory.prototype.role_name;
        /** @type {?} */
        IEnvelopeHistory.prototype.event;
        /** @type {?|undefined} */
        IEnvelopeHistory.prototype.event_detail;
        /** @type {?} */
        IEnvelopeHistory.prototype.created_at;
    }
    /**
     * @record
     */
    function IActivity() { }
    if (false) {
        /** @type {?} */
        IActivity.prototype.date;
        /** @type {?} */
        IActivity.prototype.log;
        /** @type {?} */
        IActivity.prototype.icon;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IEnvelopeSearchParams() { }
    if (false) {
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.envelope_status;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.recipient_status;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.envelope_name;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.recipient_name;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.recipient_email;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.updated_at;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.canceled_at;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.created_at;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.text_field_value;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.is_owner;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.is_recipient;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.sort_by;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.ascending;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.row;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.page;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.template_id;
        /** @type {?|undefined} */
        IEnvelopeSearchParams.prototype.recipient_claimed;
    }
    /**
     * @record
     */
    function IEnvelopeSearchResult() { }
    if (false) {
        /** @type {?} */
        IEnvelopeSearchResult.prototype.page;
        /** @type {?} */
        IEnvelopeSearchResult.prototype.row;
        /** @type {?} */
        IEnvelopeSearchResult.prototype.result;
        /** @type {?} */
        IEnvelopeSearchResult.prototype.total;
    }
    /**
     * @record
     */
    function IEnvelopeFilterParams() { }
    if (false) {
        /** @type {?} */
        IEnvelopeFilterParams.prototype.type;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.ascending;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.row;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.page;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.filterTime;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.sortBy;
        /** @type {?|undefined} */
        IEnvelopeFilterParams.prototype.customerFilters;
    }
    /** @enum {string} */
    var DocumentSortOptions = {
        created_at: 'created_at',
        updated_at: 'updated_at',
        envelope_name: 'envelope_name',
        canceled_at: 'canceled_at',
        envelope_status: 'envelope_status',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IEnvelopeDocument() { }
    if (false) {
        /** @type {?|undefined} */
        IEnvelopeDocument.prototype.id;
        /** @type {?} */
        IEnvelopeDocument.prototype.url;
        /** @type {?} */
        IEnvelopeDocument.prototype.name;
        /** @type {?|undefined} */
        IEnvelopeDocument.prototype.created_at;
        /** @type {?|undefined} */
        IEnvelopeDocument.prototype.updated_at;
        /** @type {?} */
        IEnvelopeDocument.prototype.page_numbers;
        /** @type {?} */
        IEnvelopeDocument.prototype.mime;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var   /**
     * @template T
     */
    FieldData = /** @class */ (function () {
        function FieldData(options) {
            if (options === void 0) { options = {}; }
            this.value = options.value;
            this.pageNum = options.pageNum;
            this.id = options.id;
            this.fName = options.fName;
            this.required = options.required;
            this.order = options.order;
            this.vName = options.vName;
            this.error = options.error || '';
            this.type = options.type;
        }
        return FieldData;
    }());
    if (false) {
        /** @type {?} */
        FieldData.prototype.value;
        /** @type {?} */
        FieldData.prototype.pageNum;
        /** @type {?} */
        FieldData.prototype.id;
        /** @type {?} */
        FieldData.prototype.fName;
        /** @type {?} */
        FieldData.prototype.required;
        /** @type {?} */
        FieldData.prototype.order;
        /** @type {?} */
        FieldData.prototype.vName;
        /** @type {?} */
        FieldData.prototype.error;
        /** @type {?} */
        FieldData.prototype.type;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function FieldRole() { }
    if (false) {
        /** @type {?} */
        FieldRole.prototype.role_id;
        /** @type {?} */
        FieldRole.prototype.field_id;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IField() { }
    if (false) {
        /** @type {?} */
        IField.prototype.label;
        /** @type {?} */
        IField.prototype.name;
        /** @type {?} */
        IField.prototype.role_name;
        /** @type {?} */
        IField.prototype.template_id;
        /** @type {?} */
        IField.prototype.type;
        /** @type {?} */
        IField.prototype.required;
        /** @type {?} */
        IField.prototype.setting;
        /** @type {?} */
        IField.prototype.page_sequence;
        /** @type {?|undefined} */
        IField.prototype.validator;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function OptionType() { }
    if (false) {
        /** @type {?} */
        OptionType.prototype.type;
        /** @type {?} */
        OptionType.prototype.page_sequence;
        /** @type {?|undefined} */
        OptionType.prototype.field_name;
        /** @type {?|undefined} */
        OptionType.prototype.field_index;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IPage() { }
    if (false) {
        /** @type {?} */
        IPage.prototype.template_id;
        /** @type {?} */
        IPage.prototype.document_id;
        /** @type {?|undefined} */
        IPage.prototype.document;
        /** @type {?} */
        IPage.prototype.sequence;
        /** @type {?} */
        IPage.prototype.page_number;
        /** @type {?|undefined} */
        IPage.prototype.thumbnail_url;
        /** @type {?|undefined} */
        IPage.prototype.thumbnail_safe;
        /** @type {?|undefined} */
        IPage.prototype.fields;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IRecipient() { }
    if (false) {
        /** @type {?} */
        IRecipient.prototype.role_name;
        /** @type {?} */
        IRecipient.prototype.envelope_id;
        /** @type {?} */
        IRecipient.prototype.status;
        /** @type {?} */
        IRecipient.prototype.email;
        /** @type {?} */
        IRecipient.prototype.full_name;
        /** @type {?} */
        IRecipient.prototype.sequence;
        /** @type {?} */
        IRecipient.prototype.type;
        /** @type {?} */
        IRecipient.prototype.delegator;
        /** @type {?} */
        IRecipient.prototype.token;
        /** @type {?|undefined} */
        IRecipient.prototype.profile_id;
        /** @type {?|undefined} */
        IRecipient.prototype.created_at;
        /** @type {?|undefined} */
        IRecipient.prototype.updated_at;
        /** @type {?|undefined} */
        IRecipient.prototype.message;
        /** @type {?|undefined} */
        IRecipient.prototype.fields;
        /** @type {?|undefined} */
        IRecipient.prototype.delegated_to;
        /** @type {?|undefined} */
        IRecipient.prototype.claimed;
        /** @type {?|undefined} */
        IRecipient.prototype.agreed;
        /** @type {?|undefined} */
        IRecipient.prototype.signatureUrl;
        /** @type {?|undefined} */
        IRecipient.prototype.signatures;
        /** @type {?|undefined} */
        IRecipient.prototype.rgba;
    }
    /**
     * @record
     */
    function IEnvelopeSignature() { }
    if (false) {
        /** @type {?} */
        IEnvelopeSignature.prototype.envelope_id;
        /** @type {?} */
        IEnvelopeSignature.prototype.signature_id;
        /** @type {?} */
        IEnvelopeSignature.prototype.role_name;
        /** @type {?|undefined} */
        IEnvelopeSignature.prototype.signed_at;
        /** @type {?|undefined} */
        IEnvelopeSignature.prototype.ip_address;
        /** @type {?|undefined} */
        IEnvelopeSignature.prototype.hash;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IReminder() { }
    if (false) {
        /** @type {?|undefined} */
        IReminder.prototype.id;
        /** @type {?|undefined} */
        IReminder.prototype.created_at;
        /** @type {?} */
        IReminder.prototype.is_on;
        /** @type {?} */
        IReminder.prototype.setup_time;
        /** @type {?} */
        IReminder.prototype.interval_time;
        /** @type {?} */
        IReminder.prototype.last_time;
        /** @type {?} */
        IReminder.prototype.next_time;
        /** @type {?} */
        IReminder.prototype.envelope_id;
        /** @type {?} */
        IReminder.prototype.template_id;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function IRole() { }
    if (false) {
        /** @type {?|undefined} */
        IRole.prototype.id;
        /** @type {?} */
        IRole.prototype.template_id;
        /** @type {?} */
        IRole.prototype.name;
        /** @type {?|undefined} */
        IRole.prototype.full_name;
        /** @type {?|undefined} */
        IRole.prototype.old_name;
        /** @type {?|undefined} */
        IRole.prototype.email;
        /** @type {?|undefined} */
        IRole.prototype.phone;
        /** @type {?} */
        IRole.prototype.type;
        /** @type {?} */
        IRole.prototype.sequence;
        /** @type {?|undefined} */
        IRole.prototype.fields;
        /** @type {?|undefined} */
        IRole.prototype.message;
        /** @type {?|undefined} */
        IRole.prototype.rgba;
        /** @type {?} */
        IRole.prototype.delegator;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ITemplate() { }
    if (false) {
        /** @type {?|undefined} */
        ITemplate.prototype.template_documents;
        /** @type {?|undefined} */
        ITemplate.prototype.pages;
        /** @type {?|undefined} */
        ITemplate.prototype.roles;
        /** @type {?|undefined} */
        ITemplate.prototype.counter;
        /** @type {?|undefined} */
        ITemplate.prototype.tags;
        /** @type {?|undefined} */
        ITemplate.prototype.description;
        /** @type {?} */
        ITemplate.prototype.name;
        /** @type {?|undefined} */
        ITemplate.prototype.id;
        /** @type {?|undefined} */
        ITemplate.prototype.profile_id;
        /** @type {?|undefined} */
        ITemplate.prototype.created_at;
        /** @type {?|undefined} */
        ITemplate.prototype.updated_at;
        /** @type {?|undefined} */
        ITemplate.prototype.token;
        /** @type {?|undefined} */
        ITemplate.prototype.reminder_id;
        /** @type {?|undefined} */
        ITemplate.prototype.reminder;
        /** @type {?|undefined} */
        ITemplate.prototype.template_stars;
        /** @type {?|undefined} */
        ITemplate.prototype.organization_id;
        /** @type {?|undefined} */
        ITemplate.prototype.is_personal;
        /** @type {?|undefined} */
        ITemplate.prototype.is_public;
        /** @type {?|undefined} */
        ITemplate.prototype.sender;
        /** @type {?|undefined} */
        ITemplate.prototype.last_used;
        /** @type {?|undefined} */
        ITemplate.prototype.thumbnail_base64;
    }
    /**
     * @record
     */
    function IStarTemplate() { }
    if (false) {
        /** @type {?} */
        IStarTemplate.prototype.profile_id;
        /** @type {?} */
        IStarTemplate.prototype.template_id;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ITemplateDocument() { }
    if (false) {
        /** @type {?} */
        ITemplateDocument.prototype.url;
        /** @type {?} */
        ITemplateDocument.prototype.name;
        /** @type {?} */
        ITemplateDocument.prototype.page_numbers;
        /** @type {?|undefined} */
        ITemplateDocument.prototype.id;
        /** @type {?|undefined} */
        ITemplateDocument.prototype.updated_at;
        /** @type {?|undefined} */
        ITemplateDocument.prototype.created_at;
        /** @type {?} */
        ITemplateDocument.prototype.template_id;
        /** @type {?} */
        ITemplateDocument.prototype.thumbnail_url;
        /** @type {?|undefined} */
        ITemplateDocument.prototype.thumbnail_safe;
        /** @type {?} */
        ITemplateDocument.prototype.mime;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ITemplateSearchParams() { }
    if (false) {
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.name;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.sender;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.description;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.profile_id;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.organization_id;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.updated_at;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.created_at;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.last_used_at;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.is_personal;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.is_public;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.tags;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.document_name;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.sort_by;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.ascending;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.row;
        /** @type {?|undefined} */
        ITemplateSearchParams.prototype.page;
    }
    /**
     * @record
     */
    function ITemplateSearchResult() { }
    if (false) {
        /** @type {?} */
        ITemplateSearchResult.prototype.page;
        /** @type {?} */
        ITemplateSearchResult.prototype.row;
        /** @type {?} */
        ITemplateSearchResult.prototype.total;
        /** @type {?} */
        ITemplateSearchResult.prototype.result;
    }
    /** @enum {string} */
    var SortOptions = {
        CREATED_AT: 'created_at',
        UPDATED_AT: 'updated_at',
        NAME: 'name',
        LAST_USED_AT: 'last_used_at',
        COUNTER: 'counter',
        STAR_COUNTER: 'star_counter',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function ITimePeriod() { }
    if (false) {
        /** @type {?} */
        ITimePeriod.prototype.start_time;
        /** @type {?} */
        ITimePeriod.prototype.end_time;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} string
     * @return {?}
     */
    function regParse(string) {
        return JSON.parse(string, (/**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (key, value) {
            /** @type {?} */
            var prefix;
            if (typeof value !== 'string') {
                return value;
            }
            if (value.length < 8) {
                return value;
            }
            prefix = value.substring(0, 8);
            if (prefix === 'function') {
                return eval('(' + value + ')');
            }
            if (prefix === '_PxEgEr_') {
                return eval(value.slice(8));
            }
            if (prefix === '_NuFrRa_') {
                return eval(value.slice(8));
            }
            return value;
        }));
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} rgba
     * @return {?}
     */
    function getRGB(rgba) {
        /** @type {?} */
        var rgbNumbers = rgba.replace('rgba(', '').replace(')', '').split(',');
        /** @type {?} */
        var rgbObject = {
            red: rgbNumbers[0],
            green: rgbNumbers[1],
            blue: rgbNumbers[2],
            alpha: rgbNumbers[3]
        };
        /** @type {?} */
        var alpha = 1 - rgbObject.alpha;
        /** @type {?} */
        var red = Math.round((rgbObject.alpha * (rgbObject.red / 255) + alpha) * 255);
        /** @type {?} */
        var green = Math.round((rgbObject.alpha * (rgbObject.green / 255) + alpha) * 255);
        /** @type {?} */
        var blue = Math.round((rgbObject.alpha * (rgbObject.blue / 255) + alpha) * 255);
        return ('#' + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue));
    }
    /**
     * @param {?} rgb
     * @return {?}
     */
    function rgbToHex(rgb) {
        /** @type {?} */
        var hex = rgb.toString(16);
        if (hex.length < 2) {
            return '0' + hex;
        }
        return hex;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    function getRGBA(index) {
        switch (index % 10) {
            case 0:
                return index === 0 ? 'rgba(255, 193, 7, 0.4)' : 'rgba(134, 134, 134, 0.3)'; //#FFE69C
            case 1:
                return 'rgba(156, 39, 176, .4)'; //'#E3C3E9'
            case 2:
                return 'rgba(33, 150, 243, .4)'; //'#C1E1FB'
            case 3:
                return 'rgba(220, 231, 117, 0.3)';
            case 4:
                return 'rgba(121, 134, 203, 0.3)';
            case 5:
                return 'rgba(77, 182, 172, 0.3)';
            case 6:
                return 'rgba(255, 202, 165, 0.3)';
            case 7:
                return 'rgba(2, 247, 190, 0.3)';
            case 8:
                return 'rgba(255, 138, 101, 0.3)';
            case 9:
                return 'rgba(82, 255, 79, 0.3)';
            default:
                return 'rgba(229, 115, 155, 0.3)';
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function nameToRGBA(str) {
        if (!!str) {
            /** @type {?} */
            var validNum = parseInt(str.slice(-1), 10);
            if (!isNaN(validNum)) {
                str += (validNum * 99).toString();
            }
            /** @type {?} */
            var hash = 0;
            for (var i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            hash = Math.round(hash / 1.3);
            /** @type {?} */
            var c = (hash & 0x00FFFF08)
                .toString(16)
                .toUpperCase();
            /** @type {?} */
            var hex = '#' + '00000'.substring(0, 6 - c.length) + c;
            /** @type {?} */
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            /** @type {?} */
            var color = {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            };
            return "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 0.2)";
        }
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var countries = [
        {
            "code": "+7 840",
            "name": "Abkhazia",
            "value": "+7"
        },
        {
            "code": "+93",
            "name": "Afghanistan",
            "value": "+93"
        },
        {
            "code": "+355",
            "name": "Albania",
            "value": "+355"
        },
        {
            "code": "+213",
            "name": "Algeria",
            "value": "+213"
        },
        {
            "code": "+1",
            "name": "American Samoa",
            "value": "+1"
        },
        {
            "code": "+376",
            "name": "Andorra",
            "value": "+376"
        },
        {
            "code": "+244",
            "name": "Angola",
            "value": "+244"
        },
        {
            "code": "+1",
            "name": "Anguilla",
            "value": "+1"
        },
        {
            "code": "+1",
            "name": "Antigua and Barbuda",
            "value": "+1"
        },
        {
            "code": "+54",
            "name": "Argentina",
            "value": "+54"
        },
        {
            "code": "+374",
            "name": "Armenia",
            "value": "+374"
        },
        {
            "code": "+297",
            "name": "Aruba",
            "value": "+297"
        },
        {
            "code": "+247",
            "name": "Ascension",
            "value": "+247"
        },
        {
            "code": "+61",
            "name": "Australia",
            "value": "+61"
        },
        {
            "code": "+672",
            "name": "Australian External Territories",
            "value": "+672"
        },
        {
            "code": "+43",
            "name": "Austria",
            "value": "+43"
        },
        {
            "code": "+994",
            "name": "Azerbaijan",
            "value": "+994"
        },
        {
            "code": "+1",
            "name": "Bahamas",
            "value": "+1"
        },
        {
            "code": "+973",
            "name": "Bahrain",
            "value": "+973"
        },
        {
            "code": "+880",
            "name": "Bangladesh",
            "value": "+880"
        },
        {
            "code": "+1",
            "name": "Barbados",
            "value": "+1"
        },
        {
            "code": "+1",
            "name": "Barbuda",
            "value": "+1"
        },
        {
            "code": "+375",
            "name": "Belarus",
            "value": "+375"
        },
        {
            "code": "+32",
            "name": "Belgium",
            "value": "+32"
        },
        {
            "code": "+501",
            "name": "Belize",
            "value": "+501"
        },
        {
            "code": "+229",
            "name": "Benin",
            "value": "+229"
        },
        {
            "code": "+1",
            "name": "Bermuda",
            "value": "+1"
        },
        {
            "code": "+975",
            "name": "Bhutan",
            "value": "+975"
        },
        {
            "code": "+591",
            "name": "Bolivia",
            "value": "+591"
        },
        {
            "code": "+387",
            "name": "Bosnia and Herzegovina",
            "value": "+387"
        },
        {
            "code": "+267",
            "name": "Botswana",
            "value": "+267"
        },
        {
            "code": "+55",
            "name": "Brazil",
            "value": "+55"
        },
        {
            "code": "+246",
            "name": "British Indian Ocean Territory",
            "value": "+246"
        },
        {
            "code": "+1",
            "name": "British Virgin Islands",
            "value": "+1"
        },
        {
            "code": "+673",
            "name": "Brunei",
            "value": "+673"
        },
        {
            "code": "+359",
            "name": "Bulgaria",
            "value": "+359"
        },
        {
            "code": "+226",
            "name": "Burkina Faso",
            "value": "+226"
        },
        {
            "code": "+257",
            "name": "Burundi",
            "value": "+257"
        },
        {
            "code": "+855",
            "name": "Cambodia",
            "value": "+855"
        },
        {
            "code": "+237",
            "name": "Cameroon",
            "value": "+237"
        },
        {
            "code": "+1",
            "name": "Canada",
            "value": "+1"
        },
        {
            "code": "+238",
            "name": "Cape Verde",
            "value": "+238"
        },
        {
            "code": "+1",
            "name": "Cayman Islands",
            "value": "+1"
        },
        {
            "code": "+236",
            "name": "Central African Republic",
            "value": "+236"
        },
        {
            "code": "+235",
            "name": "Chad",
            "value": "+235"
        },
        {
            "code": "+56",
            "name": "Chile",
            "value": "+56"
        },
        {
            "code": "+86",
            "name": "China",
            "value": "+86"
        },
        {
            "code": "+61",
            "name": "Christmas Island",
            "value": "+61"
        },
        {
            "code": "+61",
            "name": "Cocos-Keeling Islands",
            "value": "+61"
        },
        {
            "code": "+57",
            "name": "Colombia",
            "value": "+57"
        },
        {
            "code": "+269",
            "name": "Comoros",
            "value": "+269"
        },
        {
            "code": "+242",
            "name": "Congo",
            "value": "+242"
        },
        {
            "code": "+243",
            "name": "Congo, Dem. Rep. of (Zaire)",
            "value": "+243"
        },
        {
            "code": "+682",
            "name": "Cook Islands",
            "value": "+682"
        },
        {
            "code": "+506",
            "name": "Costa Rica",
            "value": "+506"
        },
        {
            "code": "+385",
            "name": "Croatia",
            "value": "+385"
        },
        {
            "code": "+53",
            "name": "Cuba",
            "value": "+53"
        },
        {
            "code": "+599",
            "name": "Curacao",
            "value": "+599"
        },
        {
            "code": "+537",
            "name": "Cyprus",
            "value": "+537"
        },
        {
            "code": "+420",
            "name": "Czech Republic",
            "value": "+420"
        },
        {
            "code": "+45",
            "name": "Denmark",
            "value": "+45"
        },
        {
            "code": "+246",
            "name": "Diego Garcia",
            "value": "+246"
        },
        {
            "code": "+253",
            "name": "Djibouti",
            "value": "+253"
        },
        {
            "code": "+1",
            "name": "Dominica",
            "value": "+1"
        },
        {
            "code": "+1",
            "name": "Dominican Republic",
            "value": "+1"
        },
        {
            "code": "+670",
            "name": "East Timor",
            "value": "+670"
        },
        {
            "code": "+56",
            "name": "Easter Island",
            "value": "+56"
        },
        {
            "code": "+593",
            "name": "Ecuador",
            "value": "+593"
        },
        {
            "code": "+20",
            "name": "Egypt",
            "value": "+20"
        },
        {
            "code": "+503",
            "name": "El Salvador",
            "value": "+503"
        },
        {
            "code": "+240",
            "name": "Equatorial Guinea",
            "value": "+240"
        },
        {
            "code": "+291",
            "name": "Eritrea",
            "value": "+291"
        },
        {
            "code": "+372",
            "name": "Estonia",
            "value": "+372"
        },
        {
            "code": "+251",
            "name": "Ethiopia",
            "value": "+251"
        },
        {
            "code": "+500",
            "name": "Falkland Islands",
            "value": "+500"
        },
        {
            "code": "+298",
            "name": "Faroe Islands",
            "value": "+298"
        },
        {
            "code": "+679",
            "name": "Fiji",
            "value": "+679"
        },
        {
            "code": "+358",
            "name": "Finland",
            "value": "+358"
        },
        {
            "code": "+33",
            "name": "France",
            "value": "+33"
        },
        {
            "code": "+596",
            "name": "Martinique",
            "value": "+596"
        },
        {
            "code": "+594",
            "name": "French Guiana",
            "value": "+594"
        },
        {
            "code": "+689",
            "name": "French Polynesia",
            "value": "+689"
        },
        {
            "code": "+241",
            "name": "Gabon",
            "value": "+241"
        },
        {
            "code": "+220",
            "name": "Gambia",
            "value": "+220"
        },
        {
            "code": "+995",
            "name": "Georgia",
            "value": "+995"
        },
        {
            "code": "+49",
            "name": "Germany",
            "value": "+49"
        },
        {
            "code": "+233",
            "name": "Ghana",
            "value": "+233"
        },
        {
            "code": "+350",
            "name": "Gibraltar",
            "value": "+350"
        },
        {
            "code": "+30",
            "name": "Greece",
            "value": "+30"
        },
        {
            "code": "+299",
            "name": "Greenland",
            "value": "+299"
        },
        {
            "code": "+1",
            "name": "Grenada",
            "value": "+1"
        },
        {
            "code": "+590",
            "name": "Guadeloupe",
            "value": "+590"
        },
        {
            "code": "+1",
            "name": "Guam",
            "value": "+1"
        },
        {
            "code": "+502",
            "name": "Guatemala",
            "value": "+502"
        },
        {
            "code": "+224",
            "name": "Guinea",
            "value": "+224"
        },
        {
            "code": "+245",
            "name": "Guinea-Bissau",
            "value": "+245"
        },
        {
            "code": "+595",
            "name": "Guyana",
            "value": "+595"
        },
        {
            "code": "+509",
            "name": "Haiti",
            "value": "+509"
        },
        {
            "code": "+504",
            "name": "Honduras",
            "value": "+504"
        },
        {
            "code": "+852",
            "name": "Hong Kong SAR China",
            "value": "+852"
        },
        {
            "code": "+36",
            "name": "Hungary",
            "value": "+36"
        },
        {
            "code": "+354",
            "name": "Iceland",
            "value": "+354"
        },
        {
            "code": "+91",
            "name": "India",
            "value": "+91"
        },
        {
            "code": "+62",
            "name": "Indonesia",
            "value": "+62"
        },
        {
            "code": "+98",
            "name": "Iran",
            "value": "+98"
        },
        {
            "code": "+964",
            "name": "Iraq",
            "value": "+964"
        },
        {
            "code": "+353",
            "name": "Ireland",
            "value": "+353"
        },
        {
            "code": "+972",
            "name": "Israel",
            "value": "+972"
        },
        {
            "code": "+39",
            "name": "Italy",
            "value": "+39"
        },
        {
            "code": "+225",
            "name": "Ivory Coast",
            "value": "+225"
        },
        {
            "code": "+1",
            "name": "Jamaica",
            "value": "+1"
        },
        {
            "code": "+81",
            "name": "Japan",
            "value": "+81"
        },
        {
            "code": "+962",
            "name": "Jordan",
            "value": "+962"
        },
        {
            "code": "+77",
            "name": "Kazakhstan",
            "value": "+7"
        },
        {
            "code": "+254",
            "name": "Kenya",
            "value": "+254"
        },
        {
            "code": "+686",
            "name": "Kiribati",
            "value": "+686"
        },
        {
            "code": "+965",
            "name": "Kuwait",
            "value": "+965"
        },
        {
            "code": "+996",
            "name": "Kyrgyzstan",
            "value": "+996"
        },
        {
            "code": "+856",
            "name": "Laos",
            "value": "+856"
        },
        {
            "code": "+371",
            "name": "Latvia",
            "value": "+371"
        },
        {
            "code": "+961",
            "name": "Lebanon",
            "value": "+961"
        },
        {
            "code": "+266",
            "name": "Lesotho",
            "value": "+266"
        },
        {
            "code": "+231",
            "name": "Liberia",
            "value": "+231"
        },
        {
            "code": "+218",
            "name": "Libya",
            "value": "+218"
        },
        {
            "code": "+423",
            "name": "Liechtenstein",
            "value": "+423"
        },
        {
            "code": "+370",
            "name": "Lithuania",
            "value": "+370"
        },
        {
            "code": "+352",
            "name": "Luxembourg",
            "value": "+352"
        },
        {
            "code": "+853",
            "name": "Macau SAR China",
            "value": "+853"
        },
        {
            "code": "+389",
            "name": "Macedonia",
            "value": "+389"
        },
        {
            "code": "+261",
            "name": "Madagascar",
            "value": "+261"
        },
        {
            "code": "+265",
            "name": "Malawi",
            "value": "+265"
        },
        {
            "code": "+60",
            "name": "Malaysia",
            "value": "+60"
        },
        {
            "code": "+960",
            "name": "Maldives",
            "value": "+960"
        },
        {
            "code": "+223",
            "name": "Mali",
            "value": "+223"
        },
        {
            "code": "+356",
            "name": "Malta",
            "value": "+356"
        },
        {
            "code": "+692",
            "name": "Marshall Islands",
            "value": "+692"
        },
        {
            "code": "+596",
            "name": "Martinique",
            "value": "+596"
        },
        {
            "code": "+222",
            "name": "Mauritania",
            "value": "+222"
        },
        {
            "code": "+230",
            "name": "Mauritius",
            "value": "+230"
        },
        {
            "code": "+262",
            "name": "Mayotte or Réunion",
            "value": "+262"
        },
        {
            "code": "+52",
            "name": "Mexico",
            "value": "+52"
        },
        {
            "code": "+691",
            "name": "Micronesia",
            "value": "+691"
        },
        {
            "code": "+1",
            "name": "Midway Island",
            "value": "+1"
        },
        {
            "code": "+373",
            "name": "Moldova",
            "value": "+373"
        },
        {
            "code": "+377",
            "name": "Monaco",
            "value": "+377"
        },
        {
            "code": "+976",
            "name": "Mongolia",
            "value": "+976"
        },
        {
            "code": "+382",
            "name": "Montenegro",
            "value": "+382"
        },
        {
            "code": "+1",
            "name": "Montserrat",
            "value": "+1"
        },
        {
            "code": "+212",
            "name": "Morocco",
            "value": "+212"
        },
        {
            "code": "+95",
            "name": "Myanmar",
            "value": "+95"
        },
        {
            "code": "+264",
            "name": "Namibia",
            "value": "+264"
        },
        {
            "code": "+674",
            "name": "Nauru",
            "value": "+674"
        },
        {
            "code": "+977",
            "name": "Nepal",
            "value": "+977"
        },
        {
            "code": "+31",
            "name": "Netherlands",
            "value": "+31"
        },
        {
            "code": "+599",
            "name": "Netherlands Antilles",
            "value": "+599"
        },
        {
            "code": "+1",
            "name": "Nevis",
            "value": "+1"
        },
        {
            "code": "+687",
            "name": "New Caledonia",
            "value": "+687"
        },
        {
            "code": "+64",
            "name": "New Zealand",
            "value": "+64"
        },
        {
            "code": "+505",
            "name": "Nicaragua",
            "value": "+505"
        },
        {
            "code": "+227",
            "name": "Niger",
            "value": "+227"
        },
        {
            "code": "+234",
            "name": "Nigeria",
            "value": "+234"
        },
        {
            "code": "+683",
            "name": "Niue",
            "value": "+683"
        },
        {
            "code": "+672",
            "name": "Norfolk Island",
            "value": "+672"
        },
        {
            "code": "+850",
            "name": "North Korea",
            "value": "+850"
        },
        {
            "code": "+1",
            "name": "Northern Mariana Islands",
            "value": "+1"
        },
        {
            "code": "+47",
            "name": "Norway",
            "value": "+47"
        },
        {
            "code": "+968",
            "name": "Oman",
            "value": "+968"
        },
        {
            "code": "+92",
            "name": "Pakistan",
            "value": "+92"
        },
        {
            "code": "+680",
            "name": "Palau",
            "value": "+680"
        },
        {
            "code": "+970",
            "name": "Palestinian Territory",
            "value": "+970"
        },
        {
            "code": "+507",
            "name": "Panama",
            "value": "+507"
        },
        {
            "code": "+675",
            "name": "Papua New Guinea",
            "value": "+675"
        },
        {
            "code": "+595",
            "name": "Paraguay",
            "value": "+595"
        },
        {
            "code": "+51",
            "name": "Peru",
            "value": "+51"
        },
        {
            "code": "+63",
            "name": "Philippines",
            "value": "+63"
        },
        {
            "code": "+48",
            "name": "Poland",
            "value": "+48"
        },
        {
            "code": "+351",
            "name": "Portugal",
            "value": "+351"
        },
        {
            "code": "+1",
            "name": "Puerto Rico",
            "value": "+1"
        },
        {
            "code": "+974",
            "name": "Qatar",
            "value": "+974"
        },
        {
            "code": "+40",
            "name": "Romania",
            "value": "+40"
        },
        {
            "code": "+7",
            "name": "Russia",
            "value": "+7"
        },
        {
            "code": "+250",
            "name": "Rwanda",
            "value": "+250"
        },
        {
            "code": "508",
            "name": "Saint Pierre and Miquelon",
            "value": "508"
        },
        {
            "code": "+685",
            "name": "Samoa",
            "value": "+685"
        },
        {
            "code": "+378",
            "name": "San Marino",
            "value": "+378"
        },
        {
            "code": "+966",
            "name": "Saudi Arabia",
            "value": "+966"
        },
        {
            "code": "+221",
            "name": "Senegal",
            "value": "+221"
        },
        {
            "code": "+381",
            "name": "Serbia",
            "value": "+381"
        },
        {
            "code": "+248",
            "name": "Seychelles",
            "value": "+248"
        },
        {
            "code": "+232",
            "name": "Sierra Leone",
            "value": "+232"
        },
        {
            "code": "+65",
            "name": "Singapore",
            "value": "+65"
        },
        {
            "code": "+421",
            "name": "Slovakia",
            "value": "+421"
        },
        {
            "code": "+386",
            "name": "Slovenia",
            "value": "+386"
        },
        {
            "code": "+677",
            "name": "Solomon Islands",
            "value": "+677"
        },
        {
            "code": "+27",
            "name": "South Africa",
            "value": "+27"
        },
        {
            "code": "+500",
            "name": "South Georgia and the South Sandwich Islands",
            "value": "+500"
        },
        {
            "code": "+82",
            "name": "South Korea",
            "value": "+82"
        },
        {
            "code": "+34",
            "name": "Spain",
            "value": "+34"
        },
        {
            "code": "+94",
            "name": "Sri Lanka",
            "value": "+94"
        },
        {
            "code": "+249",
            "name": "Sudan",
            "value": "+249"
        },
        {
            "code": "+597",
            "name": "Suriname",
            "value": "+597"
        },
        {
            "code": "+268",
            "name": "Swaziland",
            "value": "+268"
        },
        {
            "code": "+46",
            "name": "Sweden",
            "value": "+46"
        },
        {
            "code": "+41",
            "name": "Switzerland",
            "value": "+41"
        },
        {
            "code": "+963",
            "name": "Syria",
            "value": "+963"
        },
        {
            "code": "+886",
            "name": "Taiwan",
            "value": "+886"
        },
        {
            "code": "+992",
            "name": "Tajikistan",
            "value": "+992"
        },
        {
            "code": "+255",
            "name": "Tanzania",
            "value": "+255"
        },
        {
            "code": "+66",
            "name": "Thailand",
            "value": "+66"
        },
        {
            "code": "+670",
            "name": "Timor Leste",
            "value": "+670"
        },
        {
            "code": "+228",
            "name": "Togo",
            "value": "+228"
        },
        {
            "code": "+690",
            "name": "Tokelau",
            "value": "+690"
        },
        {
            "code": "+676",
            "name": "Tonga",
            "value": "+676"
        },
        {
            "code": "+1",
            "name": "Trinidad and Tobago",
            "value": "+1"
        },
        {
            "code": "+216",
            "name": "Tunisia",
            "value": "+216"
        },
        {
            "code": "+90",
            "name": "Turkey",
            "value": "+90"
        },
        {
            "code": "+993",
            "name": "Turkmenistan",
            "value": "+993"
        },
        {
            "code": "+1",
            "name": "Turks and Caicos Islands",
            "value": "+1"
        },
        {
            "code": "+688",
            "name": "Tuvalu",
            "value": "+688"
        },
        {
            "code": "+1",
            "name": "U.S. Virgin Islands",
            "value": "+1"
        },
        {
            "code": "+256",
            "name": "Uganda",
            "value": "+256"
        },
        {
            "code": "+380",
            "name": "Ukraine",
            "value": "+380"
        },
        {
            "code": "+971",
            "name": "United Arab Emirates",
            "value": "+971"
        },
        {
            "code": "+44",
            "name": "United Kingdom",
            "value": "+44"
        },
        {
            "code": "+1",
            "name": "United States",
            "value": "+1"
        },
        {
            "code": "+598",
            "name": "Uruguay",
            "value": "+598"
        },
        {
            "code": "+998",
            "name": "Uzbekistan",
            "value": "+998"
        },
        {
            "code": "+678",
            "name": "Vanuatu",
            "value": "+678"
        },
        {
            "code": "+58",
            "name": "Venezuela",
            "value": "+58"
        },
        {
            "code": "+84",
            "name": "Vietnam",
            "value": "+84"
        },
        {
            "code": "+1",
            "name": "Wake Island",
            "value": "+1"
        },
        {
            "code": "+681",
            "name": "Wallis and Futuna",
            "value": "+681"
        },
        {
            "code": "+967",
            "name": "Yemen",
            "value": "+967"
        },
        {
            "code": "+260",
            "name": "Zambia",
            "value": "+260"
        },
        {
            "code": "+255",
            "name": "Zanzibar",
            "value": "+255"
        },
        {
            "code": "+263",
            "name": "Zimbabwe",
            "value": "+263"
        }
    ];
    /**
     * @param {?} number
     * @return {?}
     */
    function getCountryByCode(number) {
        if (number.substring(0, 2) === '+1') {
        }
        else if (isFrenchGuiana(number)) {
            return {
                "code": "+594",
                "name": "French Guiana",
                "value": "+594"
            };
        }
        else if (isGuadeloupe(number)) {
            return {
                "code": "+590",
                "name": "Guadeloupe",
                "value": "+590"
            };
        }
        else if (isMartinique(number)) {
            return {
                "code": "+596",
                "name": "Martinique",
                "value": "+596"
            };
        }
        else if (isMayotte(number)) {
            return {
                "code": "+262",
                "name": "Mayotte or Réunion",
                "value": "+262"
            };
        }
        else {
        }
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isFrenchGuiana(number) {
        return '+594' === number.substring(0, 4);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isGuadeloupe(number) {
        return '+590' === number.substring(0, 4);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isMartinique(number) {
        return '+596' === number.substring(0, 4);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isMayotte(number) {
        return '+262' === number.substring(0, 4);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function getPlusOneCountry(number) {
        /** @type {?} */
        var country_info;
        switch (number.substring(0, 5)) {
            case '+1684':
                country_info = {
                    "code": "+1",
                    "name": "American Samoa",
                    "value": "+1"
                };
                break;
            case '+1264':
                country_info = {
                    "code": "+1",
                    "name": "Anguilla",
                    "value": "+1"
                };
            case '+1268':
                country_info = {
                    "code": "+1",
                    "name": "Antigua and Barbuda",
                    "value": "+1"
                };
            case '+1242':
                country_info = {
                    "code": "+1",
                    "name": "Bahamas",
                    "value": "+1"
                };
                break;
            case '+1246':
                country_info = {
                    "code": "+1",
                    "name": "Barbados",
                    "value": "+1"
                };
                break;
            case '+1441':
                country_info = {
                    "code": "+1",
                    "name": "Bermuda",
                    "value": "+1"
                };
                break;
            case '+1284':
                country_info = {
                    "code": "+1",
                    "name": "British Virgin Islands",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            case '+1':
                country_info = {
                    "code": "+1",
                    "name": "",
                    "value": "+1"
                };
                break;
            default:
                break;
        }
        return country_info;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isCanada(number) {
        /** @type {?} */
        var canadianAreaCodes = [
            '403', '587', '780', '825', '604', '250', '778', '236', '204', '431', '506', '709', '867', '782', '902', '867',
            '548', '705', '365', '613', '807', '226', '289', '437', '519', '647', '905', '249', '343', '416', '902', '782',
            '450', '418', '579', '873', '367', '514', '581', '819', '438', '639', '306', '867'
        ];
        /** @type {?} */
        var areaCode = number.substring(0, 5);
        return canadianAreaCodes.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return "+1" + x === areaCode; })) > -1;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isAmericanSamoa(number) {
        return number.substring(0, 5) === '+1684';
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isDominicanRepublic(number) {
        return '+1809' === number.substring(0, 5) || '+1829' === number.substring(0, 5) || '+1849' === number.substring(0, 5);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function isPuertoRico(number) {
        return number.substring(0, 5) === '+' || number.substring(0, 5) === '+';
    }
    // need to finish
    /**
     * @param {?} number
     * @param {?} number_of_substrings
     * @return {?}
     */
    function getMatchingCountry(number, number_of_substrings) {
        /** @type {?} */
        var number_of_match = 0;
        for (var x = 0; x < countries.length; x++) {
            if (countries[x].code === number.substring(0, number_of_substrings)) {
                number_of_match++;
            }
        }
        return;
    }
    /**
     * @param {?} number
     * @return {?}
     */
    function simpleE164Validator(number) {
        /** @type {?} */
        var e164_regex = new RegExp(/\+[1-9]\d{6,14}/g);
        return number !== null && number.length < 16 && number.length > 6 && e164_regex.test(number) || number === '' || number === null;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuthGuardService = /** @class */ (function () {
        function AuthGuardService(vTokenAuth, vTokenAuthGuard, vTokenStateService, document) {
            this.vTokenAuth = vTokenAuth;
            this.vTokenAuthGuard = vTokenAuthGuard;
            this.vTokenStateService = vTokenStateService;
            this.document = document;
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        AuthGuardService.prototype.canActivate = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
            /** @type {?} */
            var signerToken = this.vTokenStateService.getOtherCookieObject('signer_token');
            /** @type {?} */
            var currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
            /** @type {?} */
            var matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
            if (route.routeConfig && !currentPath) {
                return true;
            }
            else if (signerToken && !!matchesPath) {
                return true;
            }
            else {
                return this.checkLogin(route, state.url);
            }
        };
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        AuthGuardService.prototype.canActivateChild = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
            return this.canActivate(route, state);
        };
        /**
         * @param {?} route
         * @param {?} url
         * @return {?}
         */
        AuthGuardService.prototype.checkLogin = /**
         * @param {?} route
         * @param {?} url
         * @return {?}
         */
        function (route, url) {
            if (this.vTokenAuth.isAuthenticated() || this.isGuestLink(route)) {
                return true;
            }
            this.vTokenAuthGuard.signOut();
            return false;
        };
        /**
         * @param {?} route
         * @return {?}
         */
        AuthGuardService.prototype.canLoad = /**
         * @param {?} route
         * @return {?}
         */
        function (route) {
            /** @type {?} */
            var url = "/" + route.path;
            return this.checkLogin(route, url);
        };
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        AuthGuardService.prototype.canLoadBuilder = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
        };
        /**
         * @param {?} route
         * @return {?}
         */
        AuthGuardService.prototype.isGuestLink = /**
         * @param {?} route
         * @return {?}
         */
        function (route) {
            /** @type {?} */
            var signer_token = this.vTokenStateService.getOtherCookie('signer_token');
            /** @type {?} */
            var currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
            /** @type {?} */
            var matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
            if (route && !!matchesPath && !!signer_token) {
                if (signer_token) {
                    return true;
                }
                this.vTokenStateService.setTimer(true);
            }
            return route._routeConfig && route._routeConfig.path.match(/(:id\/role\/:role)/g) && !!signer_token;
        };
        AuthGuardService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AuthGuardService.ctorParameters = function () { return [
            { type: tokens.VerdocsAuthService },
            { type: tokens.VerdocsAuthGuardService },
            { type: tokens.VerdocsStateService },
            { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
        ]; };
        return AuthGuardService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AuthGuardService.prototype.vTokenAuth;
        /**
         * @type {?}
         * @private
         */
        AuthGuardService.prototype.vTokenAuthGuard;
        /**
         * @type {?}
         * @private
         */
        AuthGuardService.prototype.vTokenStateService;
        /**
         * @type {?}
         * @private
         */
        AuthGuardService.prototype.document;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocumentsService = /** @class */ (function () {
        function DocumentsService(httpClient, validatorService, tokenObjectService, vTokenStateService, injector, platform) {
            this.httpClient = httpClient;
            this.validatorService = validatorService;
            this.tokenObjectService = tokenObjectService;
            this.vTokenStateService = vTokenStateService;
            this.injector = injector;
            this.platform = platform;
            this._currentFields = new rxjs.BehaviorSubject([]);
            this._currEnvelope = new rxjs.BehaviorSubject('');
            this.allEnvelopes = new rxjs.BehaviorSubject([]);
            this._currentExtendedEnvelope = new rxjs.BehaviorSubject({});
            this._customFilterSubject = new rxjs.BehaviorSubject({});
            this.currEnvelope$ = this._currEnvelope.asObservable();
            this.fieldsStream = this._currentFields.asObservable();
            this.inProgressSubject = new rxjs.BehaviorSubject(false);
            this.workingField = new FieldData({ order: 0 });
            this.envelope = null;
            this.validators = {};
            this.toggleNextSubject = new rxjs.BehaviorSubject(false);
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
            this._documentUrl = this._rForm_backend_url + "/envelopes";
        }
        /**
         * @param {?} id
         * @return {?}
         */
        DocumentsService.prototype.setCurrentEnvelope = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this.currEnvelope = id;
            this._currEnvelope.next(id);
        };
        /**
         * @param {?} envId
         * @param {?} roleId
         * @return {?}
         */
        DocumentsService.prototype.setEnvData = /**
         * @param {?} envId
         * @param {?} roleId
         * @return {?}
         */
        function (envId, roleId) {
            this.currEnvelope = envId;
            this.currRoleName = roleId;
        };
        /**
         * @param {?} envelopes
         * @return {?}
         */
        DocumentsService.prototype.updateEnvelopes = /**
         * @param {?} envelopes
         * @return {?}
         */
        function (envelopes) {
            this.allEnvelopes.next(envelopes);
        };
        Object.defineProperty(DocumentsService.prototype, "role_name", {
            get: /**
             * @return {?}
             */
            function () {
                return this.currRoleName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DocumentsService.prototype, "env_id", {
            get: /**
             * @return {?}
             */
            function () {
                return this.currEnvelope;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} body
         * @return {?}
         */
        DocumentsService.prototype.sendInvite = /**
         * @param {?} body
         * @return {?}
         */
        function (body) {
            return this.httpClient.post(this._documentUrl, body)
                .pipe(operators.map((/**
             * @param {?} envelope
             * @return {?}
             */
            function (envelope) { return envelope; }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                return err;
            })));
        };
        /**
         * @param {?} envelopeId
         * @param {?} role
         * @return {?}
         */
        DocumentsService.prototype.sendDelegate = /**
         * @param {?} envelopeId
         * @param {?} role
         * @return {?}
         */
        function (envelopeId, role) {
            return this.httpClient.post(this._documentUrl + ("/" + envelopeId + "/recipients/" + this.currRoleName + "/delegate"), role)
                .pipe(operators.map((/**
             * @param {?} envelope
             * @return {?}
             */
            function (envelope) { return envelope; }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return err; })));
        };
        /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @return {?}
         */
        DocumentsService.prototype.resendInvitation = /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @return {?}
         */
        function (envelopeId, roleName) {
            return this.httpClient.post(this._documentUrl + ("/" + envelopeId + "/recipients/" + roleName + "/resend_invitation"), null);
        };
        /**
         * @param {?=} id
         * @return {?}
         */
        DocumentsService.prototype.getEnvelope = /**
         * @param {?=} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            /** @type {?} */
            var envelopeId = id ? id : this.currEnvelope;
            this.setCurrentEnvelope(envelopeId);
            return this.httpClient.get(this._documentUrl + ("/" + envelopeId))
                .pipe(operators.map((/**
             * @param {?} envelopeExtended
             * @return {?}
             */
            function (envelopeExtended) {
                _this.envelope = (/** @type {?} */ (envelopeExtended));
                _this.envelope.recipients = _this.sortRecipients(_this.envelope);
                _this._currentExtendedEnvelope.next(_this.envelope);
                _this.envelopeData = _this.envelope;
                return _this.envelope;
            })));
        };
        /**
         * @param {?=} templateId
         * @return {?}
         */
        DocumentsService.prototype.getAllEnvelopes = /**
         * @param {?=} templateId
         * @return {?}
         */
        function (templateId) {
            var _this = this;
            /** @type {?} */
            var endpoint = templateId ? this._documentUrl + ("?template_id=" + templateId) : this._documentUrl;
            return this.httpClient.request(new http.HttpRequest('GET', endpoint, {}, {
                reportProgress: true,
                responseType: 'json'
            })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    _this.updateEnvelopes(event.body);
                    return (/** @type {?} */ (event));
                }
                return event;
            })));
        };
        /**
         * @param {?} searchParams
         * @return {?}
         */
        DocumentsService.prototype.searchEnvelopes = /**
         * @param {?} searchParams
         * @return {?}
         */
        function (searchParams) {
            var _this = this;
            for (var key in searchParams) {
                if (searchParams.hasOwnProperty(key)) {
                    if (searchParams[key] === null) {
                        delete searchParams[key];
                    }
                }
            }
            return this.httpClient.request(new http.HttpRequest('POST', this._documentUrl + '/search', searchParams, {
                reportProgress: true,
                responseType: 'json'
            })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    _this.updateEnvelopes(event.body);
                    return (/** @type {?} */ (event));
                }
                return event;
            })));
        };
        /**
         * @param {?=} page
         * @return {?}
         */
        DocumentsService.prototype.getRecentActivities = /**
         * @param {?=} page
         * @return {?}
         */
        function (page) {
            /** @type {?} */
            var searchBody = {
                sort_by: (/** @type {?} */ ('updated_at')),
                ascending: false,
                row: 5,
                page: page ? page : 1
            };
            return this.searchEnvelopes(searchBody);
        };
        /**
         * @param {?} filters
         * @param {?} searchParams
         * @return {?}
         */
        DocumentsService.prototype.applyCustomSearch = /**
         * @param {?} filters
         * @param {?} searchParams
         * @return {?}
         */
        function (filters, searchParams) {
            if (filters['envelope_status'] && !searchParams['envelope_status']) {
                searchParams['envelope_status'] = filters['envelope_status'];
            }
            if (filters['updated_at']) {
                if (!searchParams['updated_at'] && !!searchParams['envelope_status']) {
                    searchParams['updated_at'] = filters['updated_at'];
                }
                else if (!searchParams['envelope_status']) {
                    searchParams['created_at'] = filters['updated_at'];
                    if (!searchParams['sort_by']) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
            }
            if (filters['recipient_name']) {
                searchParams['recipient_name'] = filters['recipient_name'];
            }
            if (filters['envelope_name']) {
                searchParams['envelope_name'] = filters['envelope_name'];
            }
            if (filters['recipient_email']) {
                searchParams['recipient_email'] = filters['recipient_email'];
            }
            if (filters['text_field_value']) {
                searchParams['text_field_value'] = filters['text_field_value'];
            }
            return searchParams;
        };
        /**
         * @param {?} type
         * @param {?=} ascending
         * @param {?=} row
         * @param {?=} page
         * @param {?=} filterTime
         * @param {?=} sortBy
         * @param {?=} customFilters
         * @return {?}
         */
        DocumentsService.prototype.filterSearchBy = /**
         * @param {?} type
         * @param {?=} ascending
         * @param {?=} row
         * @param {?=} page
         * @param {?=} filterTime
         * @param {?=} sortBy
         * @param {?=} customFilters
         * @return {?}
         */
        function (type, ascending, row, page, filterTime, sortBy, customFilters) {
            /** @type {?} */
            var searchParams = {
                ascending: ascending || false,
                row: row || 10,
                page: page || 1
            };
            switch (type) {
                case 'action_required':
                    searchParams['is_recipient'] = true;
                    searchParams['recipient_status'] = ['invited', 'opened', 'signed'];
                    searchParams['envelope_status'] = ['pending', 'in progress'];
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy));
                    if (filterTime) {
                        searchParams['updated_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                        }
                    }
                    break;
                case 'waiting_on_others':
                    return this.getWaitingOnOthers(ascending, row, page, filterTime, sortBy, customFilters);
                case 'waiting_on_others_unfiltered':
                    searchParams['is_owner'] = true;
                    searchParams['envelope_status'] = ['pending', 'in progress'];
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                    if (filterTime) {
                        searchParams['updated_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                        }
                    }
                    break;
                case 'inbox':
                    searchParams['is_recipient'] = true;
                    searchParams['recipient_status'] = ['invited', 'declined', 'opened', 'signed', 'submitted', 'canceled'];
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                    if (filterTime) {
                        searchParams['created_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                        }
                    }
                    break;
                case 'completed':
                    searchParams['envelope_status'] = ['complete'];
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                    if (filterTime) {
                        searchParams['updated_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                        }
                    }
                    break;
                case 'sent':
                    searchParams['is_owner'] = true;
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                    if (filterTime) {
                        searchParams['created_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                        }
                    }
                    break;
                case 'all':
                    searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                    if (filterTime) {
                        searchParams['created_at'] = filterTime;
                        if (!sortBy) {
                            searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                        }
                    }
                    break;
                default:
                    break;
            }
            if (!!customFilters) {
                searchParams = this.applyCustomSearch(customFilters, __assign({}, searchParams));
            }
            return this.searchEnvelopes(searchParams);
        };
        /**
         * @param {?=} ascending
         * @param {?=} row
         * @param {?=} page
         * @param {?=} filterTime
         * @param {?=} sortBy
         * @param {?=} customFilters
         * @return {?}
         */
        DocumentsService.prototype.getWaitingOnOthers = /**
         * @param {?=} ascending
         * @param {?=} row
         * @param {?=} page
         * @param {?=} filterTime
         * @param {?=} sortBy
         * @param {?=} customFilters
         * @return {?}
         */
        function (ascending, row, page, filterTime, sortBy, customFilters) {
            var _this = this;
            /** @type {?} */
            var actionRequiredEnvelopes = null;
            return this.filterSearchBy('action_required', ascending, row, page, filterTime, sortBy, customFilters)
                .pipe(operators.concatMap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (res instanceof http.HttpResponse) {
                    actionRequiredEnvelopes = res.body['result'];
                    return _this.filterSearchBy('waiting_on_others_unfiltered', ascending, row, page, filterTime, sortBy, customFilters);
                }
                else {
                    return rxjs.empty();
                }
            })), operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response instanceof http.HttpResponse && actionRequiredEnvelopes) {
                    /** @type {?} */
                    var unfilteredWaitingOnOthers = response['body']['result'];
                    /** @type {?} */
                    var filteredWaitingOnOthers = lodash.differenceBy(unfilteredWaitingOnOthers, actionRequiredEnvelopes, 'id');
                    response.body['result'] = filteredWaitingOnOthers;
                    response.body['total'] = filteredWaitingOnOthers.length;
                }
                return response;
            })));
        };
        /**
         * @param {?} envId
         * @return {?}
         */
        DocumentsService.prototype.getEnvelopeOwnerInfo = /**
         * @param {?} envId
         * @return {?}
         */
        function (envId) {
            return this.httpClient.get(this._documentUrl + ("/" + envId + "?owner_info=true")).pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            })));
        };
        /**
         * @param {?} envId
         * @param {?} docId
         * @return {?}
         */
        DocumentsService.prototype.getEnvelopeDocUrl = /**
         * @param {?} envId
         * @param {?} docId
         * @return {?}
         */
        function (envId, docId) {
            var _this = this;
            return this.httpClient.get(this._documentUrl + ("/" + envId + "/envelope_documents/" + docId + "?file=true"), { responseType: 'blob' })
                .pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                if (common.isPlatformBrowser(_this.platform)) {
                    /** @type {?} */
                    var urlCreator = window.URL;
                    /** @type {?} */
                    var pdfUrl = urlCreator.createObjectURL(res);
                    return pdfUrl;
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                // use a snackBar/error.service
                console.error(err);
            })));
        };
        /**
         * @param {?} envelopeId
         * @param {?} documentId
         * @return {?}
         */
        DocumentsService.prototype.getEnvelopePdfWithProgress = /**
         * @param {?} envelopeId
         * @param {?} documentId
         * @return {?}
         */
        function (envelopeId, documentId) {
            /** @type {?} */
            var requestUrl = this._documentUrl + ("/" + envelopeId + "/envelope_documents/" + documentId + "?file=true");
            return this.httpClient.request(new http.HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event; })));
        };
        /**
         * @param {?} envId
         * @param {?} docId
         * @return {?}
         */
        DocumentsService.prototype.getEnvelopeDocBlob = /**
         * @param {?} envId
         * @param {?} docId
         * @return {?}
         */
        function (envId, docId) {
            return this.httpClient.get(this._documentUrl + ("/" + envId + "/envelope_documents/" + docId + "?file=true"), { responseType: 'blob' })
                .pipe(operators.map((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                return file;
            })));
        };
        /**
         * @param {?} envId
         * @return {?}
         */
        DocumentsService.prototype.getEnvelopeCertificateBlob = /**
         * @param {?} envId
         * @return {?}
         */
        function (envId) {
            return this.httpClient.get(this._documentUrl + ("/" + envId + "?certificate_file=true"), { responseType: 'blob' })
                .pipe(operators.map((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                return file;
            })));
        };
        /********************************
         * Move logic to public library *
         *******************************/
        // downloadEnvelope(envelope) {
        //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
        //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
        //   });
        // }
        // downloadEnvelopeCertificate(envelope) {
        //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
        //     if (pdfBlob) {
        //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
        //     }
        //   });
        // }
        /**
         * *****************************
         * Move logic to public library *
         * *****************************
         * @param {?} templateId
         * @param {?} token
         * @param {?} file
         * @return {?}
         */
        // downloadEnvelope(envelope) {
        //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
        //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
        //   });
        // }
        // downloadEnvelopeCertificate(envelope) {
        //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
        //     if (pdfBlob) {
        //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
        //     }
        //   });
        // }
        DocumentsService.prototype.getTemplateDoc = /**
         * *****************************
         * Move logic to public library *
         * *****************************
         * @param {?} templateId
         * @param {?} token
         * @param {?} file
         * @return {?}
         */
        // downloadEnvelope(envelope) {
        //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
        //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
        //   });
        // }
        // downloadEnvelopeCertificate(envelope) {
        //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
        //     if (pdfBlob) {
        //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
        //     }
        //   });
        // }
        function (templateId, token, file) {
            /** @type {?} */
            var requestUrl = this._rForm_backend_url + ("/liveview/" + templateId + "/token/" + token);
            return this.httpClient.get(requestUrl, { responseType: 'json' })
                .pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                return err;
            })));
        };
        /**
         * @param {?} templateId
         * @param {?} token
         * @return {?}
         */
        DocumentsService.prototype.getTemplatePDF = /**
         * @param {?} templateId
         * @param {?} token
         * @return {?}
         */
        function (templateId, token) {
            /** @type {?} */
            var requestUrl = this._rForm_backend_url + ("/liveview/" + templateId + "/token/" + token + "?file=true");
            return this.httpClient.request(new http.HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event;
            })));
        };
        /**
         * @param {?} id
         * @return {?}
         */
        DocumentsService.prototype.cancelEnvelope = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.httpClient.put(this._documentUrl + ("/" + id), { action: 'cancel' }, { responseType: 'json' })
                .pipe(operators.map((/**
             * @param {?} envelopeData
             * @return {?}
             */
            function (envelopeData) { return envelopeData; }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) { return err; })));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        DocumentsService.prototype.submitEnvelope = /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        function (envId, roleName) {
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'submit' }).pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            })));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        DocumentsService.prototype.declineEnvelope = /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        function (envId, roleName) {
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'decline' }).pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            })));
        };
        /**
         * @param {?} envelopeId
         * @param {?} file
         * @param {?} fieldName
         * @return {?}
         */
        DocumentsService.prototype.uploadAttachment = /**
         * @param {?} envelopeId
         * @param {?} file
         * @param {?} fieldName
         * @return {?}
         */
        function (envelopeId, file, fieldName) {
            /** @type {?} */
            var req;
            if (file) {
                /** @type {?} */
                var formdata = new FormData();
                formdata.append('document', file, file.name);
                req = new http.HttpRequest('PUT', this._rForm_backend_url + '/envelopes/' + envelopeId +
                    '/fields/' + fieldName, formdata, {
                    reportProgress: true
                });
                return this.httpClient.request(req).pipe(operators.map((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) { return res; })));
            }
        };
        /**
         * @param {?} field
         * @return {?}
         */
        DocumentsService.prototype.downloadAttachment = /**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var header = new http.HttpHeaders().set('content-type', field.settings.type);
            return this.httpClient.get(this._rForm_backend_url + '/envelopes/' + field.envelope_id +
                '/fields/' + field.name + '/document', { headers: header, responseType: 'blob' })
                .pipe(operators.map((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                return file;
            })));
        };
        /**
         * @param {?} envelope
         * @return {?}
         */
        DocumentsService.prototype.getAttachmentDataByRecipients = /**
         * @param {?} envelope
         * @return {?}
         */
        function (envelope) {
            var e_1, _a, e_2, _b;
            /** @type {?} */
            var recipients = envelope['recipients'];
            if (recipients && recipients.length > 0) {
                /** @type {?} */
                var attachments = [];
                try {
                    for (var recipients_1 = __values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {
                        var recipient = recipients_1_1.value;
                        if (recipient.fields && recipient.fields.length > 0) {
                            try {
                                for (var _c = (e_2 = void 0, __values(recipient.fields)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                    var field = _d.value;
                                    if (field.type === 'attachment' && !!field.settings.url) {
                                        attachments.push({
                                            recipient: recipient.full_name,
                                            fieldObject: field
                                        });
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return attachments;
            }
            return [];
        };
        /*****************
         * Signature API *
         ****************/
        /**
         * **************
         * Signature API *
         * **************
         * @param {?} signatureBlob
         * @return {?}
         */
        DocumentsService.prototype.postSignatureBlob = /**
         * **************
         * Signature API *
         * **************
         * @param {?} signatureBlob
         * @return {?}
         */
        function (signatureBlob) {
            /** @type {?} */
            var blobFile = signatureBlob;
            /** @type {?} */
            var formData = new FormData();
            formData.append('signature', blobFile, blobFile['name']);
            /** @type {?} */
            var request = new http.HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
            return this.httpClient.request(request)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response && response['body']) {
                    return response['body'];
                }
                else {
                    console.error('Failed to upload signature image');
                }
            }));
        };
        /**
         * @param {?} initialBlob
         * @return {?}
         */
        DocumentsService.prototype.postInitialBlob = /**
         * @param {?} initialBlob
         * @return {?}
         */
        function (initialBlob) {
            /** @type {?} */
            var blobFile = initialBlob;
            /** @type {?} */
            var formData = new FormData();
            formData.append('initial', blobFile, blobFile['name']);
            /** @type {?} */
            var request = new http.HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
            return this.httpClient.request(request)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response && response['body']) {
                    return response['body'];
                }
                else {
                    console.error('Failed to upload Initial');
                }
            }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} fieldName
         * @param {?} signatureId
         * @return {?}
         */
        DocumentsService.prototype.putSignatureField = /**
         * @param {?} envelopeId
         * @param {?} fieldName
         * @param {?} signatureId
         * @return {?}
         */
        function (envelopeId, fieldName, signatureId) {
            var _this = this;
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var ipAddress;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getPublicIp()];
                        case 1:
                            ipAddress = _a.sent();
                            this.httpClient
                                .put(this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName + "/signature/" + signatureId), {
                                ip_address: ipAddress
                            }).toPromise().then((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                return resolve(res);
                            }));
                            return [2 /*return*/];
                    }
                });
            }); }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} fieldName
         * @param {?} initialId
         * @return {?}
         */
        DocumentsService.prototype.putInitialField = /**
         * @param {?} envelopeId
         * @param {?} fieldName
         * @param {?} initialId
         * @return {?}
         */
        function (envelopeId, fieldName, initialId) {
            var _this = this;
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var ipAddress;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getPublicIp()];
                        case 1:
                            ipAddress = _a.sent();
                            this.httpClient
                                .put(this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName + "/initial/" + initialId), {
                                ip_address: ipAddress
                            }).toPromise().then((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                return resolve(res);
                            }));
                            return [2 /*return*/];
                    }
                });
            }); }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} result
         * @return {?}
         */
        DocumentsService.prototype.putEnvelopeField = /**
         * @param {?} envelopeId
         * @param {?} result
         * @return {?}
         */
        function (envelopeId, result) {
            var _this = this;
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) {
                _this.httpClient
                    .put(_this._documentUrl + ("/" + envelopeId + "/fields/" + _this.workingField.fName), result).toPromise().then((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    return resolve(res);
                }));
            }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} body
         * @param {?} fieldName
         * @param {?=} ifPrepared
         * @return {?}
         */
        DocumentsService.prototype.updateGroupedField = /**
         * @param {?} envelopeId
         * @param {?} body
         * @param {?} fieldName
         * @param {?=} ifPrepared
         * @return {?}
         */
        function (envelopeId, body, fieldName, ifPrepared) {
            var _this = this;
            if (typeof (ifPrepared) === 'boolean') {
                body['prepared'] = ifPrepared;
            }
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            function (resolve, reject) {
                _this.httpClient
                    .put(_this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName), body).toPromise().then((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    return resolve(res);
                }));
            }));
        };
        /**
         * @private
         * @return {?}
         */
        DocumentsService.prototype.getPublicIp = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var apiUrl = 'https://api.ipify.org?format=jsonp';
            /** @type {?} */
            var callback = 'callback=JSONP_CALLBACK';
            return this.httpClient
                .jsonp(apiUrl, callback)
                .toPromise()
                .then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res['ip'];
            })).catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error('Failed to get ip', err);
                return 'ip_unavailable';
            }));
        };
        /********************************
         * Move logic to public library *
         *******************************/
        // async zipEnvelopeDocs(envelope) {
        //   const zip = new jszip();
        //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
        //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
        //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
        //   });
        //   if (this.hasCertificate(envelope)) {
        //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
        //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
        //     });
        //   }
        //   const attachment = zip.folder('attachments');
        //   const fields = envelope.fields;
        //   let numOfAttachments = 0;
        //   for (let x = 0; x < fields.length; x++) {
        //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
        //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
        //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
        //         numOfAttachments++;
        //       });
        //     }
        //   }
        //   if (numOfAttachments === 0) {
        //     zip.remove('attachments');
        //   }
        //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
        //     saveAs(content, envelopeZipName + '.zip');
        //   })
        // }
        /**
         * *****************************
         * Move logic to public library *
         * *****************************
         * @param {?} envelope
         * @return {?}
         */
        // async zipEnvelopeDocs(envelope) {
        //   const zip = new jszip();
        //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
        //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
        //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
        //   });
        //   if (this.hasCertificate(envelope)) {
        //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
        //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
        //     });
        //   }
        //   const attachment = zip.folder('attachments');
        //   const fields = envelope.fields;
        //   let numOfAttachments = 0;
        //   for (let x = 0; x < fields.length; x++) {
        //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
        //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
        //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
        //         numOfAttachments++;
        //       });
        //     }
        //   }
        //   if (numOfAttachments === 0) {
        //     zip.remove('attachments');
        //   }
        //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
        //     saveAs(content, envelopeZipName + '.zip');
        //   })
        // }
        DocumentsService.prototype.sortRecipients = /**
         * *****************************
         * Move logic to public library *
         * *****************************
         * @param {?} envelope
         * @return {?}
         */
        // async zipEnvelopeDocs(envelope) {
        //   const zip = new jszip();
        //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
        //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
        //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
        //   });
        //   if (this.hasCertificate(envelope)) {
        //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
        //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
        //     });
        //   }
        //   const attachment = zip.folder('attachments');
        //   const fields = envelope.fields;
        //   let numOfAttachments = 0;
        //   for (let x = 0; x < fields.length; x++) {
        //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
        //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
        //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
        //         numOfAttachments++;
        //       });
        //     }
        //   }
        //   if (numOfAttachments === 0) {
        //     zip.remove('attachments');
        //   }
        //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
        //     saveAs(content, envelopeZipName + '.zip');
        //   })
        // }
        function (envelope) {
            if (envelope.recipients.length < 1) {
                return [];
            }
            /** @type {?} */
            var recipients = envelope.recipients.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                if (a.sequence === b.sequence) {
                    return a.role_name < b.role_name ? -1 : a.role_name > b.role_name ? 1 : 0;
                }
                return b.sequence > a.sequence ? -1 : b.sequence < a.sequence ? 1 : 0;
            }));
            /** @type {?} */
            var signers = recipients.filter((/**
             * @param {?} recipient
             * @return {?}
             */
            function (recipient) {
                return recipient.type === 'signer';
            }));
            for (var x = 0; x < signers.length; x++) {
                /** @type {?} */
                var rIndex = lodash.findIndex(recipients, { sequence: signers[x].sequence, role_name: signers[x].role_name });
                if (rIndex >= 0) {
                    recipients[rIndex]['rgba'] = getRGBA(x);
                }
            }
            return recipients;
        };
        /**
         * @param {?} name
         * @param {?=} index
         * @return {?}
         */
        DocumentsService.prototype.getRecipientColor = /**
         * @param {?} name
         * @param {?=} index
         * @return {?}
         */
        function (name, index) {
            if (index) {
                return getRGBA(index);
            }
            else if (this.envelope && this.envelope.recipients && this.envelope.recipients.length > 0) {
                /** @type {?} */
                var index_1 = lodash.findIndex(this.envelope.recipients, { role_name: name });
                if (index_1 >= 0 && this.envelope.recipients[index_1].rgba) {
                    return this.envelope.recipients[index_1].rgba;
                }
            }
            else {
                return nameToRGBA(name);
            }
        };
        // Check the logic
        // Check the logic
        /**
         * @return {?}
         */
        DocumentsService.prototype.validateEnvelopeField = 
        // Check the logic
        /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var validators;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.workingField.vName != null && this.workingField.value !== '')) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.validatorService.getValidatorsObject()];
                        case 1:
                            validators = _a.sent();
                            return [2 /*return*/, validators[this.workingField.vName].test(this.workingField.value) && this.satisfyRequired()];
                        case 2: return [2 /*return*/, this.satisfyRequired()];
                    }
                });
            });
        };
        /**
         * @private
         * @return {?}
         */
        DocumentsService.prototype.satisfyRequired = /**
         * @private
         * @return {?}
         */
        function () {
            if (!!this.workingField.required && this.workingField.type !== 'checkbox' && this.workingField.type !== 'timestamp') {
                return !!this.workingField.value;
            }
            return true;
        };
        /**
         * @param {?} fields
         * @return {?}
         */
        DocumentsService.prototype.sortFields = /**
         * @param {?} fields
         * @return {?}
         */
        function (fields) {
            var _this = this;
            fields = fields.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a.page - b.page;
            }));
            /** @type {?} */
            var previousDistance = null;
            fields = fields.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                /** @type {?} */
                var setting = 'settings';
                /** @type {?} */
                var distance = _this.canBeSameRow(a, b).distance;
                /** @type {?} */
                var higherHeight = _this.canBeSameRow(a, b).higherHeight;
                if (!a[setting]) {
                    setting = 'setting';
                }
                if (a.page < b.page) {
                    return -1;
                }
                if (a.page > b.page) {
                    return 1;
                }
                /** @type {?} */
                var ax = a[setting].x;
                /** @type {?} */
                var bx = b[setting].x;
                /** @type {?} */
                var ay = a[setting].y;
                /** @type {?} */
                var by = b[setting].y;
                if (distance >= -3 && distance <= higherHeight) {
                    previousDistance = previousDistance === null ? distance : distance < previousDistance ? distance : previousDistance;
                    if (ax < bx) {
                        return -1;
                    }
                    else if (ax > bx) {
                        return 1;
                    }
                    else if (previousDistance >= distance) {
                        return -1;
                    }
                    else if (previousDistance <= distance) {
                        return 1;
                    }
                    return 0;
                }
                return b[setting].y - a[setting].y;
            }));
            return fields;
        };
        /**
         * @param {?} envelope
         * @return {?}
         */
        DocumentsService.prototype.checkIfEnvelopeOwner = /**
         * @param {?} envelope
         * @return {?}
         */
        function (envelope) {
            /** @type {?} */
            var signer_token = this.vTokenStateService.getOtherCookie('signer_token');
            /** @type {?} */
            var profile = this.tokenObjectService.getProfile();
            if (signer_token && !profile) {
                return false;
            }
            else if (envelope) {
                /** @type {?} */
                var currentUserId = profile['id'];
                return currentUserId === envelope['profile_id'];
            }
        };
        /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        DocumentsService.prototype.canBeSameRow = /**
         * @private
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            /** @type {?} */
            var setting = 'setting';
            if (!a[setting]) {
                setting = 'settings';
            }
            /** @type {?} */
            var aHeight = this.getHeight(a);
            /** @type {?} */
            var bHeight = this.getHeight(b);
            /** @type {?} */
            var aBottom = a[setting].y;
            /** @type {?} */
            var bBottom = b[setting].y;
            /** @type {?} */
            var top;
            /** @type {?} */
            var higherBottom;
            /** @type {?} */
            var higherHeight;
            if (aBottom < bBottom) {
                top = aHeight + aBottom;
                higherBottom = bBottom;
                higherHeight = bHeight;
            }
            else {
                top = bHeight + bBottom;
                higherBottom = aBottom;
                higherHeight = aHeight;
            }
            /** @type {?} */
            var distance = top - higherBottom;
            return { distance: distance, higherHeight: higherHeight };
        };
        /**
         * @private
         * @param {?} field
         * @return {?}
         */
        DocumentsService.prototype.getHeight = /**
         * @private
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var setting = 'setting';
            if (!field[setting]) {
                setting = 'settings';
            }
            /** @type {?} */
            var height = 0;
            switch (field.type) {
                case 'signature':
                case 'initial':
                    height = 36;
                    break;
                case 'checkbox':
                    height = 13.5;
                    break;
                case 'attachment':
                case 'payment':
                    height = 24;
                    break;
                default:
                    height = field[setting]['height'] || 0;
                    break;
            }
            return height;
        };
        /**
         * @param {?} envelope
         * @return {?}
         */
        DocumentsService.prototype.hasCertificate = /**
         * @param {?} envelope
         * @return {?}
         */
        function (envelope) {
            return envelope.certificate_document_id || ['complete', 'canceled', 'declined'].indexOf(this.envelope.status) !== -1;
        };
        DocumentsService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DocumentsService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: ValidatorService },
            { type: tokens.VerdocsTokenObjectService },
            { type: tokens.VerdocsStateService },
            { type: core.Injector },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return DocumentsService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype._currentFields;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype._currEnvelope;
        /** @type {?} */
        DocumentsService.prototype.allEnvelopes;
        /** @type {?} */
        DocumentsService.prototype._currentExtendedEnvelope;
        /** @type {?} */
        DocumentsService.prototype._customFilterSubject;
        /** @type {?} */
        DocumentsService.prototype.currEnvelope$;
        /** @type {?} */
        DocumentsService.prototype.fieldsStream;
        /** @type {?} */
        DocumentsService.prototype.inProgressSubject;
        /** @type {?} */
        DocumentsService.prototype.envelopeData;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.currEnvelope;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.currRoleName;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype._documentUrl;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.workingField;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.envelope;
        /** @type {?} */
        DocumentsService.prototype.validators;
        /** @type {?} */
        DocumentsService.prototype.toggleNextSubject;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.httpClient;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.validatorService;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.tokenObjectService;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.vTokenStateService;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.injector;
        /**
         * @type {?}
         * @private
         */
        DocumentsService.prototype.platform;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnvelopRemindersService = /** @class */ (function () {
        function EnvelopRemindersService(http, injector) {
            this.http = http;
            this.injector = injector;
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @return {?}
         */
        EnvelopRemindersService.prototype.getReminder = /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @return {?}
         */
        function (envelopeId, reminderId) {
            return this.http.get(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId).toPromise()
                .then((/**
             * @param {?} reminder
             * @return {?}
             */
            function (reminder) {
                return reminder;
            }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @param {?} body
         * @return {?}
         */
        EnvelopRemindersService.prototype.updateReminder = /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @param {?} body
         * @return {?}
         */
        function (envelopeId, reminderId, body) {
            return this.http
                .put(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId, body)
                .toPromise();
        };
        /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @return {?}
         */
        EnvelopRemindersService.prototype.deleteReminder = /**
         * @param {?} envelopeId
         * @param {?} reminderId
         * @return {?}
         */
        function (envelopeId, reminderId) {
            return this.http.delete(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId).toPromise();
        };
        /**
         * @param {?} envelopeId
         * @param {?} body
         * @return {?}
         */
        EnvelopRemindersService.prototype.createReminder = /**
         * @param {?} envelopeId
         * @param {?} body
         * @return {?}
         */
        function (envelopeId, body) {
            return this.http.post(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder", body).toPromise()
                .then((/**
             * @param {?} reminder
             * @return {?}
             */
            function (reminder) {
                return reminder;
            }));
        };
        EnvelopRemindersService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EnvelopRemindersService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.Injector }
        ]; };
        return EnvelopRemindersService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        EnvelopRemindersService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        EnvelopRemindersService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        EnvelopRemindersService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        EnvelopRemindersService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RecipientService = /** @class */ (function () {
        function RecipientService(httpClient, injector) {
            this.httpClient = httpClient;
            this.injector = injector;
            this.recipientsSubject = new rxjs.ReplaySubject();
            this.recipients = [];
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @private
         * @param {?} recipient
         * @return {?}
         */
        RecipientService.prototype.updateRecipients = /**
         * @private
         * @param {?} recipient
         * @return {?}
         */
        function (recipient) {
            if (recipient && recipient['length'] && recipient['length'] > 0) {
                this.recipients = (/** @type {?} */ (recipient));
            }
            else if (recipient) {
                if (this.recipients && this.recipients['length'] && this.recipients['length'] > 0) {
                    /** @type {?} */
                    var updatedRecipientIndex = lodash.findIndex((/** @type {?} */ (this.recipients)), { role_name: recipient['role_name'] });
                    if (updatedRecipientIndex !== -1) {
                        this.recipients[updatedRecipientIndex] = (/** @type {?} */ (recipient));
                    }
                }
                else {
                    this.recipients.push((/** @type {?} */ (recipient)));
                }
            }
            this.recipientsSubject.next(this.recipients);
        };
        /**
         * @param {?} envelopeId
         * @return {?}
         */
        RecipientService.prototype.getRecipients = /**
         * @param {?} envelopeId
         * @return {?}
         */
        function (envelopeId) {
            var _this = this;
            return this.httpClient.get(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients"))
                .toPromise().then((/**
             * @param {?} recipients
             * @return {?}
             */
            function (recipients) {
                _this.updateRecipients(recipients);
                return recipients;
            })).catch((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                return [];
            }));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} recipientsToUpdate
         * @return {?}
         */
        RecipientService.prototype.prepareRecipients = /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} recipientsToUpdate
         * @return {?}
         */
        function (envId, roleName, recipientsToUpdate) {
            var _this = this;
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'prepare', recipients: recipientsToUpdate }).toPromise().then((/**
             * @param {?} updatedRecipient
             * @return {?}
             */
            function (updatedRecipient) {
                _this.updateRecipients(updatedRecipient);
            }));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} newFullName
         * @return {?}
         */
        RecipientService.prototype.updateRecipientName = /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} newFullName
         * @return {?}
         */
        function (envId, roleName, newFullName) {
            var _this = this;
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'update', new_full_name: newFullName }).toPromise().then((/**
             * @param {?} updatedRecipient
             * @return {?}
             */
            function (updatedRecipient) {
                _this.updateRecipients(updatedRecipient);
            }));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        RecipientService.prototype.setAsAgreed = /**
         * @param {?} envId
         * @param {?} roleName
         * @return {?}
         */
        function (envId, roleName) {
            var _this = this;
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'update', agreed: true }).toPromise().then((/**
             * @param {?} updatedRecipient
             * @return {?}
             */
            function (updatedRecipient) {
                _this.updateRecipients(updatedRecipient);
            }));
        };
        /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} profileToClaim
         * @return {?}
         */
        RecipientService.prototype.claimProfile = /**
         * @param {?} envId
         * @param {?} roleName
         * @param {?} profileToClaim
         * @return {?}
         */
        function (envId, roleName, profileToClaim) {
            var _this = this;
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName + "/claim"), { profile: profileToClaim }).toPromise().then((/**
             * @param {?} updatedRecipient
             * @return {?}
             */
            function (updatedRecipient) {
                _this.updateRecipients(updatedRecipient);
            }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @param {?} recipientInfo
         * @return {?}
         */
        RecipientService.prototype.updateRecipientInfoByOwner = /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @param {?} recipientInfo
         * @return {?}
         */
        function (envelopeId, roleName, recipientInfo) {
            var _this = this;
            return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients/" + roleName), { action: 'owner_update', full_name: recipientInfo.full_name, email: recipientInfo.email, phone: recipientInfo.phone }).toPromise().then((/**
             * @param {?} updatedRecipient
             * @return {?}
             */
            function (updatedRecipient) {
                _this.updateRecipients(updatedRecipient);
                return updatedRecipient;
            }));
        };
        /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @return {?}
         */
        RecipientService.prototype.getInPersonLink = /**
         * @param {?} envelopeId
         * @param {?} roleName
         * @return {?}
         */
        function (envelopeId, roleName) {
            return this.httpClient.get(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients/" + roleName + "?in_person_link=true"))
                .toPromise().then((/**
             * @param {?} inPersonLink
             * @return {?}
             */
            function (inPersonLink) {
                return inPersonLink;
            }));
        };
        RecipientService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RecipientService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.Injector }
        ]; };
        return RecipientService;
    }());
    if (false) {
        /** @type {?} */
        RecipientService.prototype.recipientsSubject;
        /**
         * @type {?}
         * @private
         */
        RecipientService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        RecipientService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        RecipientService.prototype.recipients;
        /**
         * @type {?}
         * @private
         */
        RecipientService.prototype.httpClient;
        /**
         * @type {?}
         * @private
         */
        RecipientService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BuilderService = /** @class */ (function () {
        function BuilderService(http, injector, eventTracker) {
            this.http = http;
            this.injector = injector;
            this.eventTracker = eventTracker;
            this.saveStatusSubject = new rxjs.ReplaySubject();
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @param {?} template_body
         * @return {?}
         */
        BuilderService.prototype.createTemplate = /**
         * @param {?} template_body
         * @return {?}
         */
        function (template_body) {
            return this.http
                .post(this._rForm_backend_url + '/templates', template_body)
                .pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            })));
        };
        /**
         * @param {?} file
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.uploadTemplateDocument = /**
         * @param {?} file
         * @param {?} template
         * @return {?}
         */
        function (file, template) {
            /** @type {?} */
            var formdata = new FormData();
            formdata.append('document', file, file.name);
            /** @type {?} */
            var req = new http.HttpRequest('POST', this._rForm_backend_url + "/templates/" + template.id + "/documents", formdata, {
                reportProgress: true
            });
            return this.http.request(req)
                .pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return res; })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                return rxjs.throwError(err);
            })));
        };
        /**
         * @param {?} document
         * @param {?} pageNum
         * @param {?} templateId
         * @return {?}
         */
        BuilderService.prototype.addTemplatePage = /**
         * @param {?} document
         * @param {?} pageNum
         * @param {?} templateId
         * @return {?}
         */
        function (document, pageNum, templateId) {
            /** @type {?} */
            var body = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return this.http.post(this._rForm_backend_url + "/templates/" + templateId + "/pages", body)
                .pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return res; })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                return rxjs.throwError(err);
            })));
        };
        /**
         * @param {?} document
         * @param {?} pageNums
         * @param {?} templateId
         * @return {?}
         */
        BuilderService.prototype.addTemplatePages = /**
         * @param {?} document
         * @param {?} pageNums
         * @param {?} templateId
         * @return {?}
         */
        function (document, pageNums, templateId) {
            var _this = this;
            return rxjs.from(pageNums)
                .pipe(operators.mergeMap((/**
             * @param {?} pageNum
             * @return {?}
             */
            function (pageNum) {
                /** @type {?} */
                var page = {
                    sequence: pageNum,
                    page_number: pageNum,
                    document_id: document.id
                };
                return (/** @type {?} */ (_this.http.post(_this._rForm_backend_url + "/templates/" + templateId + "/pages", page).pipe(operators.delay(200))));
            })));
        };
        /**
         * @param {?} newField
         * @param {?} i
         * @param {?} j
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.addTemplateField = /**
         * @param {?} newField
         * @param {?} i
         * @param {?} j
         * @param {?} template
         * @return {?}
         */
        function (newField, i, j, template) {
            var _this = this;
            newField.name = newField.name.trim();
            return this.http
                .post(this._rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
                .pipe(operators.map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                _this.eventTracker.createEvent({
                    category: 'document',
                    action: "document " + field.type + " field added",
                    label: "document id: " + newField.template_id
                });
                template.pages[i].fields[j] = field;
                // this.checkForFields(template.roles);
                /** @type {?} */
                var roleIndex = lodash.findIndex(template.roles, { name: field.role_name });
                if (roleIndex >= 0) {
                    template.roles[roleIndex]['fields'].push(field);
                }
                // this.templateSubject.next(template);
                return template;
            })));
        };
        /**
         * @param {?} template
         * @param {?} fieldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        BuilderService.prototype.deleteTemplateField = /**
         * @param {?} template
         * @param {?} fieldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        function (template, fieldName, i, j) {
            return this.http
                .delete(this._rForm_backend_url + "/templates/" + template.id + "/fields/" + fieldName.trim())
                .pipe(operators.map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                /** @type {?} */
                var fieldIndex = lodash.findIndex(template.pages[i].fields, { name: fieldName });
                /** @type {?} */
                var roleIndex = lodash.findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
                if (roleIndex > -1) {
                    /** @type {?} */
                    var roleFieldIndex = lodash.findIndex(template.roles[roleIndex].fields, { name: fieldName });
                    if (roleFieldIndex > -1) {
                        template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                    }
                }
                template.pages[i].fields.splice(fieldIndex, 1);
                // this.updateLocalTemplate(template);
                // this.saveStatusSubject.next('saved');
                // this.checkForFields(template.roles);
                return template;
            })));
        };
        /**
         * @param {?} template
         * @param {?} updated_field
         * @param {?} role_index
         * @param {?} old_name
         * @return {?}
         */
        BuilderService.prototype.updateRoleField = /**
         * @param {?} template
         * @param {?} updated_field
         * @param {?} role_index
         * @param {?} old_name
         * @return {?}
         */
        function (template, updated_field, role_index, old_name) {
            /** @type {?} */
            var field_index = lodash.findIndex(template.roles[role_index].fields, { name: old_name });
            if (field_index >= 0) {
                template.roles[role_index].fields[field_index] = updated_field;
            }
            else {
                template.roles[role_index].fields.push(updated_field);
            }
            return template;
        };
        /**
         * @param {?} template
         * @param {?} body
         * @param {?} oldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        BuilderService.prototype.updateTemplateField = /**
         * @param {?} template
         * @param {?} body
         * @param {?} oldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        function (template, body, oldName, i, j) {
            var _this = this;
            oldName = oldName.trim();
            return this.http
                .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
                .pipe(operators.map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                _this.eventTracker.createEvent({
                    category: 'document',
                    action: "document " + field.type + " field updated",
                    label: "document id: " + template.id
                });
                /** @type {?} */
                var fieldIndex = lodash.findIndex(template.pages[i].fields, { name: oldName });
                if (field.page_sequence - 1 !== i) {
                    template.pages[i].fields.splice(fieldIndex, 1);
                    template.pages[field.page_sequence - 1].fields.push(field);
                }
                else {
                    template.pages[i].fields[fieldIndex] = field;
                }
                /** @type {?} */
                var roleIndex = lodash.findIndex(template.roles, { name: field.role_name });
                if (roleIndex >= 0) {
                    template = _this.updateRoleField(template, field, roleIndex, oldName);
                }
                // this.templateSubject.next(template);
                _this.saveStatusSubject.next('saved');
                return template;
            })));
        };
        /**
         * @param {?} template
         * @param {?} body
         * @param {?} oldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        BuilderService.prototype.updateDropdownField = /**
         * @param {?} template
         * @param {?} body
         * @param {?} oldName
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        function (template, body, oldName, i, j) {
            var _this = this;
            oldName = oldName.trim();
            return this.http
                .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
                .pipe(operators.map((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                /** @type {?} */
                var fieldIndex = lodash.findIndex(template.pages[i].fields, { name: oldName });
                template.pages[i].fields[fieldIndex] = field;
                // this.templateSubject.next(template);
                _this.saveStatusSubject.next('saved');
                return template;
            })));
        };
        /**
         * @param {?} templateId
         * @param {?} fieldId
         * @param {?} roleId
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        BuilderService.prototype.addFieldRole = /**
         * @param {?} templateId
         * @param {?} fieldId
         * @param {?} roleId
         * @param {?} i
         * @param {?} j
         * @return {?}
         */
        function (templateId, fieldId, roleId, i, j) {
            /** @type {?} */
            var fieldRoleInfo = JSON.stringify({
                field_id: fieldId,
                role_id: roleId
            });
            return this.http
                .post(this._rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
             * @param {?} fieldRole
             * @return {?}
             */
            function (fieldRole) {
                return fieldRole;
            }));
        };
        /**
         * @param {?} role
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.addRole = /**
         * @param {?} role
         * @param {?} template
         * @return {?}
         */
        function (role, template) {
            var _this = this;
            /** @type {?} */
            var templateBackend = this._rForm_backend_url + '/templates/' + template.id + '/roles';
            /** @type {?} */
            var roles = [];
            roles = roles.concat(role);
            /** @type {?} */
            var roleRequests = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                roleRequests.push(_this.http.post(templateBackend, role));
            }));
            if (roles && roles.length > 0) {
                return rxjs.forkJoin(roleRequests).pipe(operators.map((/**
                 * @param {?} savedRoles
                 * @return {?}
                 */
                function (savedRoles) {
                    savedRoles.concat((/** @type {?} */ (savedRoles)));
                    if (!template['roles']) {
                        template['roles'] = (/** @type {?} */ ([]));
                    }
                    /** @type {?} */
                    var savedRolesWithFields = savedRoles.map((/**
                     * @param {?} newRole
                     * @return {?}
                     */
                    function (newRole) {
                        newRole['fields'] = [];
                        return newRole;
                    }));
                    template['roles'] = template['roles'].concat(savedRolesWithFields);
                    // this.recipients = this.sortRoles(template);
                    // this.roles = this.recipients;
                    // this.templateSubject.next(template);
                    // this.recipientsSubject.next(this.recipients);
                    // this.recipients;
                    return template;
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    console.error(err);
                    console.error('Couldn\'t save all the roles');
                    return err;
                })));
            }
            else {
                return rxjs.of(template);
            }
        };
        /**
         * @param {?} roleName
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.deleteRole = /**
         * @param {?} roleName
         * @param {?} template
         * @return {?}
         */
        function (roleName, template) {
            return this.http.delete(this._rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
                .toPromise()
                .then((/**
             * @return {?}
             */
            function () {
                // remove(template.roles, (role: IRole) => {
                // this.recipients = this.sortRoles(template);
                // if (role.name === roleName) {
                //   const fields = role.fields;
                //   const fieldNames = [];
                //   for (const field of fields) {
                //     fieldNames.push(field.name);
                //   }
                //   this.deleteTemplateFields(fieldNames, template);
                // }
                // this.templateSubject.next(template);
                // this.recipientsSubject.next(this.recipients);
                //   return role.name === roleName
                // });
            }));
        };
        /**
         * @param {?} roleNames
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.deleteRoles = /**
         * @param {?} roleNames
         * @param {?} template
         * @return {?}
         */
        function (roleNames, template) {
            var _this = this;
            /** @type {?} */
            var deleteCalls = [];
            roleNames.forEach((/**
             * @param {?} role_name
             * @return {?}
             */
            function (role_name) {
                template = __assign({}, template, { roles: template.roles.filter((/**
                     * @param {?} role
                     * @return {?}
                     */
                    function (role) { return role.name !== role_name; })) });
                deleteCalls.push(_this.http.delete(_this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
            }));
            return rxjs.forkJoin(deleteCalls).pipe(operators.map((/**
             * @return {?}
             */
            function () {
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                console.error('Couldn\'t delete all the roles');
                return err;
            })));
        };
        /**
         * @param {?} roles
         * @param {?} template
         * @return {?}
         */
        BuilderService.prototype.updateRoles = /**
         * @param {?} roles
         * @param {?} template
         * @return {?}
         */
        function (roles, template) {
            var _this = this;
            /** @type {?} */
            var updateCalls = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                /** @type {?} */
                var body = {
                    template_id: template.id,
                    name: role.name.trim(),
                    full_name: role.full_name,
                    email: role.email,
                    sequence: role.sequence,
                    type: role.type,
                    delegator: role.delegator,
                    message: role.message,
                    phone: role.phone
                };
                /** @type {?} */
                var role_index = lodash.findIndex(template.roles, { name: role.old_name });
                if (role_index >= 0) {
                    template.roles[role_index] = __assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
                }
                _this.eventTracker.createEvent({
                    category: 'document',
                    action: 'document role updated',
                    label: "document id: " + template.id
                });
                updateCalls.push(_this.http.put(_this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
            }));
            return rxjs.forkJoin(updateCalls)
                .pipe(operators.map((/**
             * @return {?}
             */
            function () {
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        };
        BuilderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        BuilderService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.Injector },
            { type: eventTracker.EventTrackerService }
        ]; };
        return BuilderService;
    }());
    if (false) {
        /** @type {?} */
        BuilderService.prototype.saveStatusSubject;
        /**
         * @type {?}
         * @private
         */
        BuilderService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        BuilderService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        BuilderService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        BuilderService.prototype.injector;
        /**
         * @type {?}
         * @private
         */
        BuilderService.prototype.eventTracker;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplatesRemindersService = /** @class */ (function () {
        function TemplatesRemindersService(http, injector) {
            this.http = http;
            this.injector = injector;
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @param {?} templateId
         * @param {?} reminderId
         * @return {?}
         */
        TemplatesRemindersService.prototype.getReminder = /**
         * @param {?} templateId
         * @param {?} reminderId
         * @return {?}
         */
        function (templateId, reminderId) {
            return this.http.get(this._rForm_backend_url + "/templates/" + templateId + "/reminder/" + reminderId).toPromise()
                .then((/**
             * @param {?} reminder
             * @return {?}
             */
            function (reminder) {
                return reminder;
            }));
        };
        /**
         * @param {?} templateId
         * @param {?} reminderId
         * @param {?} body
         * @return {?}
         */
        TemplatesRemindersService.prototype.updateReminder = /**
         * @param {?} templateId
         * @param {?} reminderId
         * @param {?} body
         * @return {?}
         */
        function (templateId, reminderId, body) {
            return this.http
                .put(this._rForm_backend_url + "/templates/" + templateId + "/reminder/" + reminderId, body)
                .toPromise();
        };
        /**
         * @param {?} templateId
         * @param {?} reminderId
         * @return {?}
         */
        TemplatesRemindersService.prototype.deleteReminder = /**
         * @param {?} templateId
         * @param {?} reminderId
         * @return {?}
         */
        function (templateId, reminderId) {
            return this.http.delete(this._rForm_backend_url + "/templates/" + templateId + "/reminder/" + reminderId).toPromise();
        };
        /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        TemplatesRemindersService.prototype.createReminder = /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        function (templateId, body) {
            return this.http.post(this._rForm_backend_url + "/templates/" + templateId + "/reminder", body).toPromise()
                .then((/**
             * @param {?} reminder
             * @return {?}
             */
            function (reminder) {
                return reminder;
            }));
        };
        TemplatesRemindersService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TemplatesRemindersService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.Injector }
        ]; };
        return TemplatesRemindersService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        TemplatesRemindersService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        TemplatesRemindersService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        TemplatesRemindersService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        TemplatesRemindersService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplatesGuardService = /** @class */ (function () {
        function TemplatesGuardService(vTokenObjectService) {
            this.vTokenObjectService = vTokenObjectService;
        }
        /**
         * @param {?} action
         * @param {?} template
         * @return {?}
         */
        TemplatesGuardService.prototype.canPerformAction = /**
         * @param {?} action
         * @param {?} template
         * @return {?}
         */
        function (action, template) {
            try {
                /** @type {?} */
                var canPerform = false;
                /** @type {?} */
                var message = null;
                /** @type {?} */
                var neededPermissions = [];
                if (!template && !action.includes('create')) {
                    throw {
                        error: 'You need to provide template object'
                    };
                }
                /** @type {?} */
                var userProfile = this.vTokenObjectService.getProfile();
                /** @type {?} */
                var isCreator = userProfile ? template && template.profile_id === userProfile.id : false;
                /** @type {?} */
                var isSameOrg = userProfile ? template && template.organization_id === userProfile.organization_id : false;
                /** @type {?} */
                var isPersonal = template ? template.is_personal : null;
                /** @type {?} */
                var isPublic = template ? template.is_public : null;
                switch (action) {
                    case TemplateActions.CREATE_PERSONAL:
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                        break;
                    case TemplateActions.CREATE_ORG:
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                        break;
                    case TemplateActions.CREATE_PUBLIC:
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                        break;
                    case TemplateActions.READ:
                        if (!isCreator) {
                            if ((!isPersonal && isSameOrg) || !isPublic) {
                                neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                            }
                        }
                        break;
                    case TemplateActions.WRITE:
                        if (!isCreator) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_WRITE);
                        }
                        break;
                    case TemplateActions.CHANGE_VISIBILITY_PERSONAL:
                        if (isCreator) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                            // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                        }
                        else {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                        }
                        break;
                    case TemplateActions.CHANGE_VISIBILITY_ORG:
                        if (isCreator) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                            // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                        }
                        else {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                        }
                        break;
                    case TemplateActions.CHANGE_VISIBILITY_PUBLIC:
                        if (isCreator) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                            neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                        }
                        else {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                        }
                        break;
                    case TemplateActions.DELETE:
                        if (isCreator) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_DELETE);
                        }
                        else {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_DELETE);
                        }
                        break;
                    default:
                        throw {
                            error: 'Action is not defined'
                        };
                }
                if (this.hasPermissions(neededPermissions)) {
                    canPerform = true;
                }
                else {
                    message = "Insufficient access to perform '" + action + "'. Needed permissions: " + neededPermissions.toString();
                }
                return {
                    canPerform: canPerform,
                    message: message
                };
            }
            catch (err) {
                console.error({
                    message: "Failed to check whether action (" + action + ") can be done, in TemplateGuardService",
                    err: err
                });
            }
        };
        /**
         * @private
         * @param {?} requiredPermissions
         * @return {?}
         */
        TemplatesGuardService.prototype.hasPermissions = /**
         * @private
         * @param {?} requiredPermissions
         * @return {?}
         */
        function (requiredPermissions) {
            /** @type {?} */
            var userPermissions = this.vTokenObjectService.getPermissions();
            /** @type {?} */
            var hasPermissions = lodash.intersection(userPermissions, requiredPermissions).length === requiredPermissions.length;
            return hasPermissions;
        };
        /**
         * @param {?} template
         * @return {?}
         */
        TemplatesGuardService.prototype.canBeSender = /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            /** @type {?} */
            var userProfile = this.vTokenObjectService.getProfile();
            if (!userProfile) {
                return false;
            }
            switch (template.sender) {
                case TemplateSenderTypes.CREATOR:
                    return userProfile.id === template.profile_id;
                case TemplateSenderTypes.ORGANIZATION_MEMBER:
                case TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR:
                    return userProfile.id === template.profile_id || template.organization_id === userProfile.organization_id;
                default:
                    return true;
            }
        };
        /**
         * @return {?}
         */
        TemplatesGuardService.prototype.canUserCreateTemplate = /**
         * @return {?}
         */
        function () {
            return this.canPerformAction(TemplateActions.CREATE_PERSONAL, null)['canPerform']
                || this.canPerformAction(TemplateActions.CREATE_ORG, null)['canPerform']
                || this.canPerformAction(TemplateActions.CREATE_PUBLIC, null)['canPerform'];
        };
        TemplatesGuardService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TemplatesGuardService.ctorParameters = function () { return [
            { type: tokens.VerdocsTokenObjectService }
        ]; };
        return TemplatesGuardService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        TemplatesGuardService.prototype.vTokenObjectService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplatesService = /** @class */ (function () {
        function TemplatesService(http, vTokenObjectService, templateGuard, injector, platform) {
            this.http = http;
            this.vTokenObjectService = vTokenObjectService;
            this.templateGuard = templateGuard;
            this.injector = injector;
            this.platform = platform;
            this.templates = new rxjs.Subject();
            this.template = new rxjs.Subject();
            this.loadingStatus = new rxjs.Subject();
            this._config_token = this.injector.get(VSDKConfigToken);
            this.rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @param {?} err
         * @return {?}
         */
        TemplatesService.prototype.errorMessageNotVerified = /**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return err.error.error === 'email is not verified' && err.error.code === 401;
        };
        /**
         * @param {?=} filter
         * @return {?}
         */
        TemplatesService.prototype.getTemplates = /**
         * @param {?=} filter
         * @return {?}
         */
        function (filter) {
            var _this = this;
            this.loadingStatus.next(true);
            this.templates.next([]);
            /** @type {?} */
            var query = null;
            if (filter) {
                switch (filter) {
                    case 'creator':
                        query = '?is_creator=true';
                        break;
                    case 'organization':
                        query = '?is_organization=true';
                        break;
                    case 'starred':
                        query = '?is_starred=true';
                        break;
                    default:
                        query = '';
                        break;
                }
            }
            /** @type {?} */
            var requestUrl = this.rForm_backend_url + '/templates' + (query ? query : '');
            return this.http.request(new http.HttpRequest('GET', requestUrl, {}, { reportProgress: true })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event instanceof http.HttpResponse) {
                    /** @type {?} */
                    var template = (/** @type {?} */ (event.body));
                    _this.templates.next(template);
                    _this.loadingStatus.next(false);
                    return (/** @type {?} */ (event));
                }
                return event;
            })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (err && err.status === 401 && !_this.errorMessageNotVerified(err)) {
                    // const errorDialog = this.dialog.open(FourOhOneDialog, {
                    //   panelClass: 'error__dialog',
                    //   disableClose: true
                    // })
                    // errorDialog.componentInstance.error = err;
                }
                _this.loadingStatus.next(false);
                return rxjs.Observable.throw(err);
            })));
        };
        // Move this to another service
        // Move this to another service
        /**
         * @param {?} id
         * @param {?=} thumbnail
         * @return {?}
         */
        TemplatesService.prototype.getTemplateObservable = 
        // Move this to another service
        /**
         * @param {?} id
         * @param {?=} thumbnail
         * @return {?}
         */
        function (id, thumbnail) {
            var _this = this;
            this.loadingStatus.next(true);
            /** @type {?} */
            var templateUrl = this.rForm_backend_url + '/templates/' + id;
            if (thumbnail === true) {
                templateUrl += '?thumbnail=true';
            }
            return this.http.get(templateUrl)
                .pipe(operators.map((/**
             * @param {?} template
             * @return {?}
             */
            function (template) {
                _this.loadingStatus.next(false);
                return template;
            })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.loadingStatus.next(false);
                if (err && err.status === 401 && !_this.errorMessageNotVerified(err)) {
                    // const errorDialog = this.dialog.open(FourOhOneDialog, {
                    //   panelClass: 'error__dialog',
                    //   disableClose: true
                    // })
                    // errorDialog.componentInstance.error = err;
                    return rxjs.of(err);
                }
                return rxjs.EMPTY;
            })));
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TemplatesService.prototype.starTemplate = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            return this.http.post(this.rForm_backend_url + ("/templates/" + id + "/stars"), {}).pipe(operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return res; })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (err && err.status === 401 && _this.errorMessageNotVerified(err)) {
                    // const errorDialog = this.dialog.open(FourOhOneDialog, {
                    //   panelClass: 'error__dialog',
                    //   disableClose: true
                    // })
                    // errorDialog.componentInstance.error = err;
                    return rxjs.of(err);
                }
                return rxjs.Observable.throw(err);
            })));
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TemplatesService.prototype.unstarTemplate = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            return this.http.delete(this.rForm_backend_url + ("/templates/" + id + "/stars")).pipe(operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (err && err.status === 401 && _this.errorMessageNotVerified(err)) {
                    // const errorDialog = this.dialog.open(FourOhOneDialog, {
                    //   panelClass: 'error__dialog',
                    //   disableClose: true
                    // })
                    // errorDialog.componentInstance.error = err;
                    return rxjs.of(err);
                }
                return rxjs.Observable.throw((/** @type {?} */ (err)));
            })));
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TemplatesService.prototype.getTemplate = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            var _this = this;
            return this.getTemplateObservable(id).pipe(operators.map((/**
             * @param {?} template
             * @return {?}
             */
            function (template) {
                _this.template.next(template);
                return template;
            })));
        };
        /**
         * @return {?}
         */
        TemplatesService.prototype.getCreatorTemplates = /**
         * @return {?}
         */
        function () {
            return this.getTemplates('creator');
        };
        /**
         * @return {?}
         */
        TemplatesService.prototype.getOrganizationTemplates = /**
         * @return {?}
         */
        function () {
            return this.getTemplates('organization');
        };
        /**
         * @return {?}
         */
        TemplatesService.prototype.getStarredTemplates = /**
         * @return {?}
         */
        function () {
            return this.getTemplates('starred');
        };
        /**
         * @return {?}
         */
        TemplatesService.prototype.getPermissions = /**
         * @return {?}
         */
        function () {
            return this.vTokenObjectService.getPermissions();
        };
        /**
         * @param {?} id
         * @return {?}
         */
        TemplatesService.prototype.getTemplateOwnerInfo = /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            return this.http.get(this.rForm_backend_url + "/templates/" + id + "?owner_info=true")
                .toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return res;
            }));
        };
        /**
         * @param {?} template_id
         * @param {?} template_document
         * @return {?}
         */
        TemplatesService.prototype.getTemplateDocumentPDFObservable = /**
         * @param {?} template_id
         * @param {?} template_document
         * @return {?}
         */
        function (template_id, template_document) {
            return this.http.get(this.rForm_backend_url + '/templates/' + template_id + '/documents/' +
                template_document.id + '?file=true', { responseType: 'blob' });
        };
        /**
         * @param {?} templateId
         * @param {?} templateDocument
         * @return {?}
         */
        TemplatesService.prototype.getTemplateDocument = /**
         * @param {?} templateId
         * @param {?} templateDocument
         * @return {?}
         */
        function (templateId, templateDocument) {
            return this.getTemplateDocumentPDFObservable(templateId, templateDocument).toPromise();
        };
        /**
         * @param {?} templateId
         * @param {?} templateDocumentId
         * @return {?}
         */
        TemplatesService.prototype.getTemplateThumbnail = /**
         * @param {?} templateId
         * @param {?} templateDocumentId
         * @return {?}
         */
        function (templateId, templateDocumentId) {
            return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents/' +
                templateDocumentId + '?thumbnail=true', { responseType: 'blob' }).toPromise();
        };
        /**
         * @param {?} templateId
         * @return {?}
         */
        TemplatesService.prototype.getAllTemplateDocumentsObservable = /**
         * @param {?} templateId
         * @return {?}
         */
        function (templateId) {
            return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents');
        };
        /**
         * @param {?} templateId
         * @return {?}
         */
        TemplatesService.prototype.getAllTemplateDocuments = /**
         * @param {?} templateId
         * @return {?}
         */
        function (templateId) {
            return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents')
                .toPromise();
        };
        /**
         * @param {?} template
         * @return {?}
         */
        TemplatesService.prototype.downloadTemplateDocument = /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            var _this = this;
            if ((common.isPlatformBrowser(this.platform))) {
                this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
                 * @param {?} template_file
                 * @return {?}
                 */
                function (template_file) {
                    _this.prepareSave(template, template_file);
                }));
            }
        };
        /**
         * @param {?} template
         * @param {?} template_file
         * @return {?}
         */
        TemplatesService.prototype.prepareSave = /**
         * @param {?} template
         * @param {?} template_file
         * @return {?}
         */
        function (template, template_file) {
            if (window && window.URL) {
                /** @type {?} */
                var fileUrl = URL.createObjectURL(template_file);
                // saveAs(fileUrl, template.template_documents[0].name + '.pdf');
            }
        };
        /**
         * @param {?} searchParams
         * @return {?}
         */
        TemplatesService.prototype.searchTemplates = /**
         * @param {?} searchParams
         * @return {?}
         */
        function (searchParams) {
            for (var key in searchParams) {
                if (searchParams.hasOwnProperty(key)) {
                    if (searchParams[key] === null) {
                        delete searchParams[key];
                    }
                }
            }
            return this.http.request(new http.HttpRequest('POST', this.rForm_backend_url + '/templates/search', searchParams, {
                reportProgress: true,
                responseType: 'json'
            })).pipe(operators.map((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event;
            })));
        };
        /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        TemplatesService.prototype.updateTemplateObservable = /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        function (templateId, body) {
            return this.http.put(this.rForm_backend_url + '/templates/' + templateId, body);
        };
        /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        TemplatesService.prototype.updateTemplate = /**
         * @param {?} templateId
         * @param {?} body
         * @return {?}
         */
        function (templateId, body) {
            return this.updateTemplateObservable(templateId, body)
                .toPromise().then((/**
             * @param {?} template
             * @return {?}
             */
            function (template) { return template; }));
        };
        /**
         * @param {?} templateId
         * @return {?}
         */
        TemplatesService.prototype.deleteTemplate = /**
         * @param {?} templateId
         * @return {?}
         */
        function (templateId) {
            return this.http.delete(this.rForm_backend_url + '/templates/' + templateId);
        };
        /**
         * @param {?} templateId
         * @param {?} sequence_number
         * @return {?}
         */
        TemplatesService.prototype.deleteSequence = /**
         * @param {?} templateId
         * @param {?} sequence_number
         * @return {?}
         */
        function (templateId, sequence_number) {
            return this.http.delete(this.rForm_backend_url + '/templates/' + templateId + '/roles?sequence=' + sequence_number).toPromise();
        };
        /**
         * @param {?} templates
         * @return {?}
         */
        TemplatesService.prototype.updateTemplates = /**
         * @param {?} templates
         * @return {?}
         */
        function (templates) {
            this.templates.next(templates);
        };
        /**
         * @param {?} template
         * @return {?}
         */
        TemplatesService.prototype.canSendEnvelope = /**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            var e_1, _a;
            if (template) {
                /** @type {?} */
                var signers = lodash.filter(template.roles, { type: 'signer' });
                /** @type {?} */
                var hasSigner = signers.length > 0;
                /** @type {?} */
                var signersHaveFields = false;
                if (hasSigner) {
                    try {
                        for (var signers_1 = __values(signers), signers_1_1 = signers_1.next(); !signers_1_1.done; signers_1_1 = signers_1.next()) {
                            var signer = signers_1_1.value;
                            signersHaveFields = signer['fields'] && signer['fields'].length > 0;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (signers_1_1 && !signers_1_1.done && (_a = signers_1.return)) _a.call(signers_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                /** @type {?} */
                var hasAccessToTemplate = this.templateGuard.canPerformAction(TemplateActions.READ, template).canPerform;
                return hasAccessToTemplate && hasSigner && signersHaveFields && this.templateGuard.canBeSender(template);
            }
            else {
                return false;
            }
        };
        TemplatesService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TemplatesService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: tokens.VerdocsTokenObjectService },
            { type: TemplatesGuardService },
            { type: core.Injector },
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        return TemplatesService;
    }());
    if (false) {
        /** @type {?} */
        TemplatesService.prototype.templates;
        /** @type {?} */
        TemplatesService.prototype.template;
        /** @type {?} */
        TemplatesService.prototype.loadingStatus;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.vTokenObjectService;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.templateGuard;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.injector;
        /**
         * @type {?}
         * @private
         */
        TemplatesService.prototype.platform;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function VSDKConfig() { }
    if (false) {
        /** @type {?} */
        VSDKConfig.prototype.production;
        /** @type {?} */
        VSDKConfig.prototype.domain;
        /** @type {?} */
        VSDKConfig.prototype.rForm_backend_url;
        /** @type {?} */
        VSDKConfig.prototype.rForm_frontend_url;
        /** @type {?} */
        VSDKConfig.prototype.rSecure_frontend_url;
        /** @type {?} */
        VSDKConfig.prototype.rSecure_backend_url;
        /** @type {?} */
        VSDKConfig.prototype.rAccount_frontend_url;
        /** @type {?} */
        VSDKConfig.prototype.rAccount_backend_url;
        /** @type {?} */
        VSDKConfig.prototype.rNotification_backend_url;
        /** @type {?} */
        VSDKConfig.prototype.loginURL;
        /** @type {?} */
        VSDKConfig.prototype.origin;
        /** @type {?} */
        VSDKConfig.prototype.plans;
    }
    /** @type {?} */
    var VSDKConfigToken = new core.InjectionToken('VSDKConfig');
    var AngularApiModule = /** @class */ (function () {
        function AngularApiModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        AngularApiModule.initSDK = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            return {
                ngModule: AngularApiModule,
                imports: [
                    tokens.TokensModule.initInterceptor({
                        cookieName: '',
                        domain: config.domain,
                        origin: config.origin,
                        verdocs_name: 'rForm',
                        account_name: 'rAccount',
                        loginURL: config.loginURL,
                        production: config.production
                    })
                ],
                providers: [
                    {
                        provide: VSDKConfigToken,
                        useValue: config
                    },
                    ValidatorService,
                    AuthGuardService,
                    DocumentsService,
                    EnvelopRemindersService,
                    RecipientService,
                    BuilderService,
                    TemplatesGuardService,
                    TemplatesRemindersService,
                    TemplatesService
                ]
            };
        };
        AngularApiModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        providers: []
                    },] }
        ];
        return AngularApiModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidatorService = /** @class */ (function () {
        function ValidatorService(http, injector) {
            this.http = http;
            this.injector = injector;
            this.validators = [];
            this.validatorsObject = {};
            this._config_token = this.injector.get(VSDKConfigToken);
            this._rForm_backend_url = this._config_token.rForm_backend_url;
        }
        /**
         * @return {?}
         */
        ValidatorService.prototype.getValidatorsArray = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.validators && this.validators.length > 0) {
                return this.validators;
            }
            else {
                return this.http.get(this._rForm_backend_url + '/validators').toPromise().then((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    _this.validators = response;
                    return (/** @type {?} */ (_this.validators));
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    return null;
                }));
            }
        };
        /**
         * @return {?}
         */
        ValidatorService.prototype.getValidatorsObject = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var i, name_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.validatorsObject = {};
                            return [4 /*yield*/, this.getValidatorsArray()];
                        case 1:
                            _a.sent();
                            for (i = 0; i < this.validators['length']; i++) {
                                name_1 = this.validators[i]['name'];
                                this.validatorsObject[name_1] = regParse(this.validators[i]['regex']);
                            }
                            return [2 /*return*/, this.validatorsObject];
                    }
                });
            });
        };
        ValidatorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ValidatorService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: core.Injector }
        ]; };
        return ValidatorService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype._config_token;
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype._rForm_backend_url;
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype.validators;
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype.validatorsObject;
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype.http;
        /**
         * @type {?}
         * @private
         */
        ValidatorService.prototype.injector;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PhoneValidator = /** @class */ (function () {
        function PhoneValidator() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        PhoneValidator.MatchPhone = /**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var validates = simpleE164Validator(control.value);
            if (!validates) {
                return {
                    phone: true
                };
            }
            return false;
        };
        return PhoneValidator;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} roles
     * @return {?}
     */
    function roleNameValidator(roles) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var duplicateRoleName = lodash.find(roles, { name: control.value });
            if (!!duplicateRoleName) {
                return { 'roleName': true };
            }
            return null;
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TagValidator = /** @class */ (function () {
        function TagValidator() {
        }
        /**
         * @param {?} control
         * @return {?}
         */
        TagValidator.MatchTag = /**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var tagRegEx = /^[a-zA-Z0-9-]{0,32}$/;
            /** @type {?} */
            var patternValidation = tagRegEx.test(control.value);
            if (!patternValidation) {
                return { textPattern: true };
            }
            return null;
        };
        return TagValidator;
    }());
    /**
     * @param {?} tags
     * @return {?}
     */
    function TagDuplicateValidator(tags) {
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var duplicateIndex = lodash.findIndex(tags, { tag_name: control.value });
            return duplicateIndex > -1 ? { duplicate: true } : null;
        });
    }
    var TagErrorStateMatcher = /** @class */ (function () {
        function TagErrorStateMatcher() {
        }
        /**
         * @param {?} control
         * @param {?} form
         * @return {?}
         */
        TagErrorStateMatcher.prototype.isErrorState = /**
         * @param {?} control
         * @param {?} form
         * @return {?}
         */
        function (control, form) {
            return !(control && control.invalid && (control.dirty || control.touched));
        };
        return TagErrorStateMatcher;
    }());

    exports.AngularApiModule = AngularApiModule;
    exports.AuthGuardService = AuthGuardService;
    exports.BuilderService = BuilderService;
    exports.DocumentSortOptions = DocumentSortOptions;
    exports.DocumentsService = DocumentsService;
    exports.EnvelopRemindersService = EnvelopRemindersService;
    exports.FieldData = FieldData;
    exports.PhoneValidator = PhoneValidator;
    exports.RecipientService = RecipientService;
    exports.SortOptions = SortOptions;
    exports.TagDuplicateValidator = TagDuplicateValidator;
    exports.TagErrorStateMatcher = TagErrorStateMatcher;
    exports.TagValidator = TagValidator;
    exports.TemplateActions = TemplateActions;
    exports.TemplatePermissions = TemplatePermissions;
    exports.TemplateSenderTypes = TemplateSenderTypes;
    exports.TemplatesGuardService = TemplatesGuardService;
    exports.TemplatesRemindersService = TemplatesRemindersService;
    exports.TemplatesService = TemplatesService;
    exports.VSDKConfigToken = VSDKConfigToken;
    exports.ValidatorService = ValidatorService;
    exports.countries = countries;
    exports.getCountryByCode = getCountryByCode;
    exports.getMatchingCountry = getMatchingCountry;
    exports.getPlusOneCountry = getPlusOneCountry;
    exports.getRGB = getRGB;
    exports.getRGBA = getRGBA;
    exports.isAmericanSamoa = isAmericanSamoa;
    exports.isCanada = isCanada;
    exports.isDominicanRepublic = isDominicanRepublic;
    exports.isFrenchGuiana = isFrenchGuiana;
    exports.isGuadeloupe = isGuadeloupe;
    exports.isMartinique = isMartinique;
    exports.isMayotte = isMayotte;
    exports.isPuertoRico = isPuertoRico;
    exports.nameToRGBA = nameToRGBA;
    exports.regParse = regParse;
    exports.roleNameValidator = roleNameValidator;
    exports.simpleE164Validator = simpleE164Validator;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=verdocs-sdk.umd.js.map
