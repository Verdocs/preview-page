/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from "@angular/common";
import { VerdocsAuthService, VerdocsAuthGuardService, VerdocsStateService } from '@verdocs/tokens';
var AuthGuardService = /** @class */ (function () {
    function AuthGuardService(vTokenAuth, vTokenAuthGuard, vTokenStateService, document) {
        this.vTokenAuth = vTokenAuth;
        this.vTokenAuthGuard = vTokenAuthGuard;
        this.vTokenStateService = vTokenStateService;
        this.document = document;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardService.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var signerToken = this.vTokenStateService.getOtherCookieObject('signer_token');
        /** @type {?} */
        var currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
        /** @type {?} */
        var matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
        if (route.routeConfig && !currentPath) {
            return true;
        }
        else if (signerToken && !!matchesPath) {
            return true;
        }
        else {
            return this.checkLogin(route, state.url);
        }
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardService.prototype.canActivateChild = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.canActivate(route, state);
    };
    /**
     * @param {?} route
     * @param {?} url
     * @return {?}
     */
    AuthGuardService.prototype.checkLogin = /**
     * @param {?} route
     * @param {?} url
     * @return {?}
     */
    function (route, url) {
        if (this.vTokenAuth.isAuthenticated() || this.isGuestLink(route)) {
            return true;
        }
        this.vTokenAuthGuard.signOut();
        return false;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuardService.prototype.canLoad = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var url = "/" + route.path;
        return this.checkLogin(route, url);
    };
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuardService.prototype.canLoadBuilder = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
    };
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuardService.prototype.isGuestLink = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        /** @type {?} */
        var signer_token = this.vTokenStateService.getOtherCookie('signer_token');
        /** @type {?} */
        var currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
        /** @type {?} */
        var matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
        if (route && !!matchesPath && !!signer_token) {
            if (signer_token) {
                return true;
            }
            this.vTokenStateService.setTimer(true);
        }
        return route._routeConfig && route._routeConfig.path.match(/(:id\/role\/:role)/g) && !!signer_token;
    };
    AuthGuardService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthGuardService.ctorParameters = function () { return [
        { type: VerdocsAuthService },
        { type: VerdocsAuthGuardService },
        { type: VerdocsStateService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return AuthGuardService;
}());
export { AuthGuardService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenAuth;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenAuthGuard;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2d1YXJkcy9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBU25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVuRztJQUdFLDBCQUNVLFVBQThCLEVBQzlCLGVBQXdDLEVBQ3hDLGtCQUF1QyxFQUNyQixRQUFhO1FBSC9CLGVBQVUsR0FBVixVQUFVLENBQW9CO1FBQzlCLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtRQUN4Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXFCO1FBQ3JCLGFBQVEsR0FBUixRQUFRLENBQUs7SUFDckMsQ0FBQzs7Ozs7O0lBRUwsc0NBQVc7Ozs7O0lBQVgsVUFBWSxLQUFLLEVBQUUsS0FBMEI7O1lBQ3JDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsY0FBYyxDQUFDOztZQUMxRSxXQUFXLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSTs7WUFDeEcsV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUs7UUFDdEgsSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTSxJQUFJLFdBQVcsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFO1lBQ3ZDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsMkNBQWdCOzs7OztJQUFoQixVQUFpQixLQUE2QixFQUFFLEtBQTBCO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7Ozs7O0lBRUQscUNBQVU7Ozs7O0lBQVYsVUFBVyxLQUFLLEVBQUUsR0FBRztRQUNuQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNoRSxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMvQixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0NBQU87Ozs7SUFBUCxVQUFRLEtBQVk7O1lBQ1osR0FBRyxHQUFHLE1BQUksS0FBSyxDQUFDLElBQU07UUFDNUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFDRCx5Q0FBYzs7Ozs7SUFBZCxVQUFlLEtBQTZCLEVBQUUsS0FBMEI7SUFHeEUsQ0FBQzs7Ozs7SUFFRCxzQ0FBVzs7OztJQUFYLFVBQVksS0FBSzs7WUFDVCxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUM7O1lBQ3JFLFdBQVcsR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJOztZQUN4RyxXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksV0FBVyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUN0SCxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxZQUFZLEVBQUU7WUFDNUMsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3hDO1FBQ0QsT0FBTyxLQUFLLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxZQUFZLENBQUM7SUFDdEcsQ0FBQzs7Z0JBdkRGLFVBQVU7Ozs7Z0JBRkYsa0JBQWtCO2dCQUFFLHVCQUF1QjtnQkFBRSxtQkFBbUI7Z0RBU3BFLE1BQU0sU0FBQyxRQUFROztJQWtEcEIsdUJBQUM7Q0FBQSxBQXpERCxJQXlEQztTQXhEWSxnQkFBZ0I7Ozs7OztJQUd6QixzQ0FBc0M7Ozs7O0lBQ3RDLDJDQUFnRDs7Ozs7SUFDaEQsOENBQStDOzs7OztJQUMvQyxvQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENhbkFjdGl2YXRlLFxuICBDYW5BY3RpdmF0ZUNoaWxkLFxuICBDYW5Mb2FkLFxuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICBSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICBSb3V0ZVxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBWZXJkb2NzQXV0aFNlcnZpY2UsIFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlLCBWZXJkb2NzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQHZlcmRvY3MvdG9rZW5zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhHdWFyZFNlcnZpY2UgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSwgQ2FuQWN0aXZhdGVDaGlsZCwgQ2FuTG9hZCB7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB2VG9rZW5BdXRoOiBWZXJkb2NzQXV0aFNlcnZpY2UsXG4gICAgcHJpdmF0ZSB2VG9rZW5BdXRoR3VhcmQ6IFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlLFxuICAgIHByaXZhdGUgdlRva2VuU3RhdGVTZXJ2aWNlOiBWZXJkb2NzU3RhdGVTZXJ2aWNlLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueVxuICApIHsgfVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlLCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNpZ25lclRva2VuID0gdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2UuZ2V0T3RoZXJDb29raWVPYmplY3QoJ3NpZ25lcl90b2tlbicpO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcm91dGUgJiYgcm91dGUucm91dGVDb25maWcgJiYgcm91dGUucm91dGVDb25maWcucGF0aCA/IHJvdXRlLnJvdXRlQ29uZmlnLnBhdGggOiByb3V0ZS5wYXRoO1xuICAgIGNvbnN0IG1hdGNoZXNQYXRoID0gY3VycmVudFBhdGggPyBjdXJyZW50UGF0aC5tYXRjaCgvKDppZFxcL3JvbGVcXC86cm9sZSkvZykgfHwgY3VycmVudFBhdGguaW5jbHVkZXMoJ2VudmVsb3BlJykgOiBmYWxzZTtcbiAgICBpZiAocm91dGUucm91dGVDb25maWcgJiYgIWN1cnJlbnRQYXRoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNpZ25lclRva2VuICYmICEhbWF0Y2hlc1BhdGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jaGVja0xvZ2luKHJvdXRlLCBzdGF0ZS51cmwpO1xuICAgIH1cbiAgfVxuXG4gIGNhbkFjdGl2YXRlQ2hpbGQocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2FuQWN0aXZhdGUocm91dGUsIHN0YXRlKTtcbiAgfVxuXG4gIGNoZWNrTG9naW4ocm91dGUsIHVybCkge1xuICAgIGlmICh0aGlzLnZUb2tlbkF1dGguaXNBdXRoZW50aWNhdGVkKCkgfHwgdGhpcy5pc0d1ZXN0TGluayhyb3V0ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLnZUb2tlbkF1dGhHdWFyZC5zaWduT3V0KCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY2FuTG9hZChyb3V0ZTogUm91dGUpIHtcbiAgICBjb25zdCB1cmwgPSBgLyR7cm91dGUucGF0aH1gO1xuICAgIHJldHVybiB0aGlzLmNoZWNrTG9naW4ocm91dGUsIHVybCk7XG4gIH1cbiAgY2FuTG9hZEJ1aWxkZXIocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG5cblxuICB9XG5cbiAgaXNHdWVzdExpbmsocm91dGUpIHtcbiAgICBjb25zdCBzaWduZXJfdG9rZW4gPSB0aGlzLnZUb2tlblN0YXRlU2VydmljZS5nZXRPdGhlckNvb2tpZSgnc2lnbmVyX3Rva2VuJyk7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSByb3V0ZSAmJiByb3V0ZS5yb3V0ZUNvbmZpZyAmJiByb3V0ZS5yb3V0ZUNvbmZpZy5wYXRoID8gcm91dGUucm91dGVDb25maWcucGF0aCA6IHJvdXRlLnBhdGg7XG4gICAgY29uc3QgbWF0Y2hlc1BhdGggPSBjdXJyZW50UGF0aCA/IGN1cnJlbnRQYXRoLm1hdGNoKC8oOmlkXFwvcm9sZVxcLzpyb2xlKS9nKSB8fCBjdXJyZW50UGF0aC5pbmNsdWRlcygnZW52ZWxvcGUnKSA6IGZhbHNlO1xuICAgIGlmIChyb3V0ZSAmJiAhIW1hdGNoZXNQYXRoICYmICEhc2lnbmVyX3Rva2VuKSB7XG4gICAgICBpZiAoc2lnbmVyX3Rva2VuKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2Uuc2V0VGltZXIodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZS5fcm91dGVDb25maWcgJiYgcm91dGUuX3JvdXRlQ29uZmlnLnBhdGgubWF0Y2goLyg6aWRcXC9yb2xlXFwvOnJvbGUpL2cpICYmICEhc2lnbmVyX3Rva2VuO1xuICB9XG5cbn1cbiJdfQ==