/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from "@angular/common";
import { VerdocsAuthService, VerdocsAuthGuardService, VerdocsStateService } from '@verdocs/tokens';
export class AuthGuardService {
    /**
     * @param {?} vTokenAuth
     * @param {?} vTokenAuthGuard
     * @param {?} vTokenStateService
     * @param {?} document
     */
    constructor(vTokenAuth, vTokenAuthGuard, vTokenStateService, document) {
        this.vTokenAuth = vTokenAuth;
        this.vTokenAuthGuard = vTokenAuthGuard;
        this.vTokenStateService = vTokenStateService;
        this.document = document;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        /** @type {?} */
        const signerToken = this.vTokenStateService.getOtherCookieObject('signer_token');
        /** @type {?} */
        const currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
        /** @type {?} */
        const matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
        if (route.routeConfig && !currentPath) {
            return true;
        }
        else if (signerToken && !!matchesPath) {
            return true;
        }
        else {
            return this.checkLogin(route, state.url);
        }
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivateChild(route, state) {
        return this.canActivate(route, state);
    }
    /**
     * @param {?} route
     * @param {?} url
     * @return {?}
     */
    checkLogin(route, url) {
        if (this.vTokenAuth.isAuthenticated() || this.isGuestLink(route)) {
            return true;
        }
        this.vTokenAuthGuard.signOut();
        return false;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    canLoad(route) {
        /** @type {?} */
        const url = `/${route.path}`;
        return this.checkLogin(route, url);
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canLoadBuilder(route, state) {
    }
    /**
     * @param {?} route
     * @return {?}
     */
    isGuestLink(route) {
        /** @type {?} */
        const signer_token = this.vTokenStateService.getOtherCookie('signer_token');
        /** @type {?} */
        const currentPath = route && route.routeConfig && route.routeConfig.path ? route.routeConfig.path : route.path;
        /** @type {?} */
        const matchesPath = currentPath ? currentPath.match(/(:id\/role\/:role)/g) || currentPath.includes('envelope') : false;
        if (route && !!matchesPath && !!signer_token) {
            if (signer_token) {
                return true;
            }
            this.vTokenStateService.setTimer(true);
        }
        return route._routeConfig && route._routeConfig.path.match(/(:id\/role\/:role)/g) && !!signer_token;
    }
}
AuthGuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthGuardService.ctorParameters = () => [
    { type: VerdocsAuthService },
    { type: VerdocsAuthGuardService },
    { type: VerdocsStateService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenAuth;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenAuthGuard;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    AuthGuardService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2d1YXJkcy9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBU25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUduRyxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7O0lBRTNCLFlBQ1UsVUFBOEIsRUFDOUIsZUFBd0MsRUFDeEMsa0JBQXVDLEVBQ3JCLFFBQWE7UUFIL0IsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7UUFDOUIsb0JBQWUsR0FBZixlQUFlLENBQXlCO1FBQ3hDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBcUI7UUFDckIsYUFBUSxHQUFSLFFBQVEsQ0FBSztJQUNyQyxDQUFDOzs7Ozs7SUFFTCxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQTBCOztjQUNyQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQzs7Y0FDMUUsV0FBVyxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUk7O2NBQ3hHLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQ3RILElBQUksS0FBSyxDQUFDLFdBQVcsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNyQyxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU0sSUFBSSxXQUFXLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRTtZQUN2QyxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQztJQUNILENBQUM7Ozs7OztJQUVELGdCQUFnQixDQUFDLEtBQTZCLEVBQUUsS0FBMEI7UUFDeEUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFFRCxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFDbkIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWUsRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDL0IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxLQUFZOztjQUNaLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUU7UUFDNUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7Ozs7SUFDRCxjQUFjLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtJQUd4RSxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFLOztjQUNULFlBQVksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQzs7Y0FDckUsV0FBVyxHQUFHLEtBQUssSUFBSSxLQUFLLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUk7O2NBQ3hHLFdBQVcsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQ3RILElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLFlBQVksRUFBRTtZQUM1QyxJQUFJLFlBQVksRUFBRTtnQkFDaEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEM7UUFDRCxPQUFPLEtBQUssQ0FBQyxZQUFZLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUN0RyxDQUFDOzs7WUF2REYsVUFBVTs7OztZQUZGLGtCQUFrQjtZQUFFLHVCQUF1QjtZQUFFLG1CQUFtQjs0Q0FTcEUsTUFBTSxTQUFDLFFBQVE7Ozs7Ozs7SUFIaEIsc0NBQXNDOzs7OztJQUN0QywyQ0FBZ0Q7Ozs7O0lBQ2hELDhDQUErQzs7Ozs7SUFDL0Msb0NBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDYW5BY3RpdmF0ZSxcbiAgQ2FuQWN0aXZhdGVDaGlsZCxcbiAgQ2FuTG9hZCxcbiAgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCxcbiAgUm91dGVyU3RhdGVTbmFwc2hvdCxcbiAgUm91dGVcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhTZXJ2aWNlLCBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSwgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJ0B2ZXJkb2NzL3Rva2Vucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmRTZXJ2aWNlIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUsIENhbkFjdGl2YXRlQ2hpbGQsIENhbkxvYWQge1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdlRva2VuQXV0aDogVmVyZG9jc0F1dGhTZXJ2aWNlLFxuICAgIHByaXZhdGUgdlRva2VuQXV0aEd1YXJkOiBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSxcbiAgICBwcml2YXRlIHZUb2tlblN0YXRlU2VydmljZTogVmVyZG9jc1N0YXRlU2VydmljZSxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnlcbiAgKSB7IH1cblxuICBjYW5BY3RpdmF0ZShyb3V0ZSwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBib29sZWFuIHtcbiAgICBjb25zdCBzaWduZXJUb2tlbiA9IHRoaXMudlRva2VuU3RhdGVTZXJ2aWNlLmdldE90aGVyQ29va2llT2JqZWN0KCdzaWduZXJfdG9rZW4nKTtcbiAgICBjb25zdCBjdXJyZW50UGF0aCA9IHJvdXRlICYmIHJvdXRlLnJvdXRlQ29uZmlnICYmIHJvdXRlLnJvdXRlQ29uZmlnLnBhdGggPyByb3V0ZS5yb3V0ZUNvbmZpZy5wYXRoIDogcm91dGUucGF0aDtcbiAgICBjb25zdCBtYXRjaGVzUGF0aCA9IGN1cnJlbnRQYXRoID8gY3VycmVudFBhdGgubWF0Y2goLyg6aWRcXC9yb2xlXFwvOnJvbGUpL2cpIHx8IGN1cnJlbnRQYXRoLmluY2x1ZGVzKCdlbnZlbG9wZScpIDogZmFsc2U7XG4gICAgaWYgKHJvdXRlLnJvdXRlQ29uZmlnICYmICFjdXJyZW50UGF0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChzaWduZXJUb2tlbiAmJiAhIW1hdGNoZXNQYXRoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hlY2tMb2dpbihyb3V0ZSwgc3RhdGUudXJsKTtcbiAgICB9XG4gIH1cblxuICBjYW5BY3RpdmF0ZUNoaWxkKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhbkFjdGl2YXRlKHJvdXRlLCBzdGF0ZSk7XG4gIH1cblxuICBjaGVja0xvZ2luKHJvdXRlLCB1cmwpIHtcbiAgICBpZiAodGhpcy52VG9rZW5BdXRoLmlzQXV0aGVudGljYXRlZCgpIHx8IHRoaXMuaXNHdWVzdExpbmsocm91dGUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy52VG9rZW5BdXRoR3VhcmQuc2lnbk91dCgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNhbkxvYWQocm91dGU6IFJvdXRlKSB7XG4gICAgY29uc3QgdXJsID0gYC8ke3JvdXRlLnBhdGh9YDtcbiAgICByZXR1cm4gdGhpcy5jaGVja0xvZ2luKHJvdXRlLCB1cmwpO1xuICB9XG4gIGNhbkxvYWRCdWlsZGVyKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xuXG5cbiAgfVxuXG4gIGlzR3Vlc3RMaW5rKHJvdXRlKSB7XG4gICAgY29uc3Qgc2lnbmVyX3Rva2VuID0gdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2UuZ2V0T3RoZXJDb29raWUoJ3NpZ25lcl90b2tlbicpO1xuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gcm91dGUgJiYgcm91dGUucm91dGVDb25maWcgJiYgcm91dGUucm91dGVDb25maWcucGF0aCA/IHJvdXRlLnJvdXRlQ29uZmlnLnBhdGggOiByb3V0ZS5wYXRoO1xuICAgIGNvbnN0IG1hdGNoZXNQYXRoID0gY3VycmVudFBhdGggPyBjdXJyZW50UGF0aC5tYXRjaCgvKDppZFxcL3JvbGVcXC86cm9sZSkvZykgfHwgY3VycmVudFBhdGguaW5jbHVkZXMoJ2VudmVsb3BlJykgOiBmYWxzZTtcbiAgICBpZiAocm91dGUgJiYgISFtYXRjaGVzUGF0aCAmJiAhIXNpZ25lcl90b2tlbikge1xuICAgICAgaWYgKHNpZ25lcl90b2tlbikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudlRva2VuU3RhdGVTZXJ2aWNlLnNldFRpbWVyKHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGUuX3JvdXRlQ29uZmlnICYmIHJvdXRlLl9yb3V0ZUNvbmZpZy5wYXRoLm1hdGNoKC8oOmlkXFwvcm9sZVxcLzpyb2xlKS9nKSAmJiAhIXNpZ25lcl90b2tlbjtcbiAgfVxuXG59XG4iXX0=