/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { regParse } from '../functions/regex';
import { VSDKConfigToken } from '../angular-api.module';
export class ValidatorService {
    /**
     * @param {?} http
     * @param {?} injector
     */
    constructor(http, injector) {
        this.http = http;
        this.injector = injector;
        this.validators = [];
        this.validatorsObject = {};
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @return {?}
     */
    getValidatorsArray() {
        if (this.validators && this.validators.length > 0) {
            return this.validators;
        }
        else {
            return this.http.get(this._rForm_backend_url + '/validators').toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.validators = response;
                return (/** @type {?} */ (this.validators));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                return null;
            }));
        }
    }
    /**
     * @return {?}
     */
    getValidatorsObject() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.validatorsObject = {};
            yield this.getValidatorsArray();
            for (let i = 0; i < this.validators['length']; i++) {
                /** @type {?} */
                const name = this.validators[i]['name'];
                this.validatorsObject[name] = regParse(this.validators[i]['regex']);
            }
            return this.validatorsObject;
        });
    }
}
ValidatorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ValidatorService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.validatorsObject;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9zZGsvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy92YWxpZGF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBSXBFLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBTTNCLFlBQ1UsSUFBZ0IsRUFDaEIsUUFBa0I7UUFEbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTHBCLGVBQVUsR0FBVSxFQUFFLENBQUM7UUFDdkIscUJBQWdCLEdBQVEsRUFBRSxDQUFDO1FBTWpDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7SUFDakUsQ0FBQzs7OztJQUVNLGtCQUFrQjtRQUN2QixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4QjthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSTs7OztZQUFDLENBQUMsUUFBZSxFQUFFLEVBQUU7Z0JBQ25HLElBQUksQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDO2dCQUMzQixPQUFPLG1CQUFBLElBQUksQ0FBQyxVQUFVLEVBQVMsQ0FBQztZQUNsQyxDQUFDOzs7O1lBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDVCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7O0lBRVksbUJBQW1COztZQUM5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1lBQzNCLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O3NCQUM1QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDL0IsQ0FBQztLQUFBOzs7WUFwQ0YsVUFBVTs7OztZQU5GLFVBQVU7WUFERSxRQUFROzs7Ozs7O0lBUzNCLHlDQUFrQzs7Ozs7SUFDbEMsOENBQW1DOzs7OztJQUNuQyxzQ0FBK0I7Ozs7O0lBQy9CLDRDQUFtQzs7Ozs7SUFHakMsZ0NBQXdCOzs7OztJQUN4QixvQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgcmVnUGFyc2UgfSBmcm9tICcuLi9mdW5jdGlvbnMvcmVnZXgnO1xuaW1wb3J0IHsgVlNES0NvbmZpZywgVlNES0NvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vYW5ndWxhci1hcGkubW9kdWxlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVmFsaWRhdG9yU2VydmljZSB7XG4gIHByaXZhdGUgX2NvbmZpZ190b2tlbjogVlNES0NvbmZpZztcbiAgcHJpdmF0ZSBfckZvcm1fYmFja2VuZF91cmw6IHN0cmluZztcbiAgcHJpdmF0ZSB2YWxpZGF0b3JzOiBhbnlbXSA9IFtdO1xuICBwcml2YXRlIHZhbGlkYXRvcnNPYmplY3Q6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLl9jb25maWdfdG9rZW4gPSB0aGlzLmluamVjdG9yLmdldChWU0RLQ29uZmlnVG9rZW4pO1xuICAgIHRoaXMuX3JGb3JtX2JhY2tlbmRfdXJsID0gdGhpcy5fY29uZmlnX3Rva2VuLnJGb3JtX2JhY2tlbmRfdXJsO1xuICB9XG5cbiAgcHVibGljIGdldFZhbGlkYXRvcnNBcnJheSgpIHtcbiAgICBpZiAodGhpcy52YWxpZGF0b3JzICYmIHRoaXMudmFsaWRhdG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuX3JGb3JtX2JhY2tlbmRfdXJsICsgJy92YWxpZGF0b3JzJykudG9Qcm9taXNlKCkudGhlbigocmVzcG9uc2U6IGFueVtdKSA9PiB7XG4gICAgICAgIHRoaXMudmFsaWRhdG9ycyA9IHJlc3BvbnNlO1xuICAgICAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JzIGFzIGFueVtdO1xuICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBnZXRWYWxpZGF0b3JzT2JqZWN0KCkge1xuICAgIHRoaXMudmFsaWRhdG9yc09iamVjdCA9IHt9O1xuICAgIGF3YWl0IHRoaXMuZ2V0VmFsaWRhdG9yc0FycmF5KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZhbGlkYXRvcnNbJ2xlbmd0aCddOyBpKyspIHtcbiAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLnZhbGlkYXRvcnNbaV1bJ25hbWUnXTtcbiAgICAgIHRoaXMudmFsaWRhdG9yc09iamVjdFtuYW1lXSA9IHJlZ1BhcnNlKHRoaXMudmFsaWRhdG9yc1tpXVsncmVnZXgnXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnNPYmplY3Q7XG4gIH1cbn1cbiJdfQ==