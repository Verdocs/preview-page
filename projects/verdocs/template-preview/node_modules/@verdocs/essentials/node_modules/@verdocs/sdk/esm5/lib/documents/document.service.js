/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest, HttpHeaders } from '@angular/common/http';
import { BehaviorSubject, empty } from 'rxjs';
import { concatMap, map } from 'rxjs/operators';
import { findIndex } from 'lodash';
import { differenceBy } from 'lodash';
import { VerdocsTokenObjectService, VerdocsStateService } from '@verdocs/tokens';
// import { saveAs } from 'file-saver';
// import * as jszip from 'jszip';
// import * as moment from 'moment';
import { ValidatorService } from '../validators/validator.service';
import { getRGBA, nameToRGBA } from '../functions/rgb';
import { VSDKConfigToken } from '../angular-api.module';
import { FieldData } from '../models/field-data.model';
var DocumentsService = /** @class */ (function () {
    function DocumentsService(httpClient, validatorService, tokenObjectService, vTokenStateService, injector, platform) {
        this.httpClient = httpClient;
        this.validatorService = validatorService;
        this.tokenObjectService = tokenObjectService;
        this.vTokenStateService = vTokenStateService;
        this.injector = injector;
        this.platform = platform;
        this._currentFields = new BehaviorSubject([]);
        this._currEnvelope = new BehaviorSubject('');
        this.allEnvelopes = new BehaviorSubject([]);
        this._currentExtendedEnvelope = new BehaviorSubject({});
        this._customFilterSubject = new BehaviorSubject({});
        this.currEnvelope$ = this._currEnvelope.asObservable();
        this.fieldsStream = this._currentFields.asObservable();
        this.inProgressSubject = new BehaviorSubject(false);
        this.workingField = new FieldData({ order: 0 });
        this.envelope = null;
        this.validators = {};
        this.toggleNextSubject = new BehaviorSubject(false);
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
        this._documentUrl = this._rForm_backend_url + "/envelopes";
    }
    /**
     * @param {?} id
     * @return {?}
     */
    DocumentsService.prototype.setCurrentEnvelope = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.currEnvelope = id;
        this._currEnvelope.next(id);
    };
    /**
     * @param {?} envId
     * @param {?} roleId
     * @return {?}
     */
    DocumentsService.prototype.setEnvData = /**
     * @param {?} envId
     * @param {?} roleId
     * @return {?}
     */
    function (envId, roleId) {
        this.currEnvelope = envId;
        this.currRoleName = roleId;
    };
    /**
     * @param {?} envelopes
     * @return {?}
     */
    DocumentsService.prototype.updateEnvelopes = /**
     * @param {?} envelopes
     * @return {?}
     */
    function (envelopes) {
        this.allEnvelopes.next(envelopes);
    };
    Object.defineProperty(DocumentsService.prototype, "role_name", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currRoleName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentsService.prototype, "env_id", {
        get: /**
         * @return {?}
         */
        function () {
            return this.currEnvelope;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} body
     * @return {?}
     */
    DocumentsService.prototype.sendInvite = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.httpClient.post(this._documentUrl, body)
            .pipe(map((/**
         * @param {?} envelope
         * @return {?}
         */
        function (envelope) { return envelope; }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return err;
        })));
    };
    /**
     * @param {?} envelopeId
     * @param {?} role
     * @return {?}
     */
    DocumentsService.prototype.sendDelegate = /**
     * @param {?} envelopeId
     * @param {?} role
     * @return {?}
     */
    function (envelopeId, role) {
        return this.httpClient.post(this._documentUrl + ("/" + envelopeId + "/recipients/" + this.currRoleName + "/delegate"), role)
            .pipe(map((/**
         * @param {?} envelope
         * @return {?}
         */
        function (envelope) { return envelope; }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return err; })));
    };
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    DocumentsService.prototype.resendInvitation = /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    function (envelopeId, roleName) {
        return this.httpClient.post(this._documentUrl + ("/" + envelopeId + "/recipients/" + roleName + "/resend_invitation"), null);
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    DocumentsService.prototype.getEnvelope = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var envelopeId = id ? id : this.currEnvelope;
        this.setCurrentEnvelope(envelopeId);
        return this.httpClient.get(this._documentUrl + ("/" + envelopeId))
            .pipe(map((/**
         * @param {?} envelopeExtended
         * @return {?}
         */
        function (envelopeExtended) {
            _this.envelope = (/** @type {?} */ (envelopeExtended));
            _this.envelope.recipients = _this.sortRecipients(_this.envelope);
            _this._currentExtendedEnvelope.next(_this.envelope);
            _this.envelopeData = _this.envelope;
            return _this.envelope;
        })));
    };
    /**
     * @param {?=} templateId
     * @return {?}
     */
    DocumentsService.prototype.getAllEnvelopes = /**
     * @param {?=} templateId
     * @return {?}
     */
    function (templateId) {
        var _this = this;
        /** @type {?} */
        var endpoint = templateId ? this._documentUrl + ("?template_id=" + templateId) : this._documentUrl;
        return this.httpClient.request(new HttpRequest('GET', endpoint, {}, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                _this.updateEnvelopes(event.body);
                return (/** @type {?} */ (event));
            }
            return event;
        })));
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    DocumentsService.prototype.searchEnvelopes = /**
     * @param {?} searchParams
     * @return {?}
     */
    function (searchParams) {
        var _this = this;
        for (var key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.httpClient.request(new HttpRequest('POST', this._documentUrl + '/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                _this.updateEnvelopes(event.body);
                return (/** @type {?} */ (event));
            }
            return event;
        })));
    };
    /**
     * @param {?=} page
     * @return {?}
     */
    DocumentsService.prototype.getRecentActivities = /**
     * @param {?=} page
     * @return {?}
     */
    function (page) {
        /** @type {?} */
        var searchBody = {
            sort_by: (/** @type {?} */ ('updated_at')),
            ascending: false,
            row: 5,
            page: page ? page : 1
        };
        return this.searchEnvelopes(searchBody);
    };
    /**
     * @param {?} filters
     * @param {?} searchParams
     * @return {?}
     */
    DocumentsService.prototype.applyCustomSearch = /**
     * @param {?} filters
     * @param {?} searchParams
     * @return {?}
     */
    function (filters, searchParams) {
        if (filters['envelope_status'] && !searchParams['envelope_status']) {
            searchParams['envelope_status'] = filters['envelope_status'];
        }
        if (filters['updated_at']) {
            if (!searchParams['updated_at'] && !!searchParams['envelope_status']) {
                searchParams['updated_at'] = filters['updated_at'];
            }
            else if (!searchParams['envelope_status']) {
                searchParams['created_at'] = filters['updated_at'];
                if (!searchParams['sort_by']) {
                    searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                }
            }
        }
        if (filters['recipient_name']) {
            searchParams['recipient_name'] = filters['recipient_name'];
        }
        if (filters['envelope_name']) {
            searchParams['envelope_name'] = filters['envelope_name'];
        }
        if (filters['recipient_email']) {
            searchParams['recipient_email'] = filters['recipient_email'];
        }
        if (filters['text_field_value']) {
            searchParams['text_field_value'] = filters['text_field_value'];
        }
        return searchParams;
    };
    /**
     * @param {?} type
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    DocumentsService.prototype.filterSearchBy = /**
     * @param {?} type
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    function (type, ascending, row, page, filterTime, sortBy, customFilters) {
        /** @type {?} */
        var searchParams = {
            ascending: ascending || false,
            row: row || 10,
            page: page || 1
        };
        switch (type) {
            case 'action_required':
                searchParams['is_recipient'] = true;
                searchParams['recipient_status'] = ['invited', 'opened', 'signed'];
                searchParams['envelope_status'] = ['pending', 'in progress'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy));
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'waiting_on_others':
                return this.getWaitingOnOthers(ascending, row, page, filterTime, sortBy, customFilters);
            case 'waiting_on_others_unfiltered':
                searchParams['is_owner'] = true;
                searchParams['envelope_status'] = ['pending', 'in progress'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'inbox':
                searchParams['is_recipient'] = true;
                searchParams['recipient_status'] = ['invited', 'declined', 'opened', 'signed', 'submitted', 'canceled'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            case 'completed':
                searchParams['envelope_status'] = ['complete'];
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['updated_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('updated_at'));
                    }
                }
                break;
            case 'sent':
                searchParams['is_owner'] = true;
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            case 'all':
                searchParams['sort_by'] = (/** @type {?} */ (sortBy)) || null;
                if (filterTime) {
                    searchParams['created_at'] = filterTime;
                    if (!sortBy) {
                        searchParams['sort_by'] = (/** @type {?} */ ('created_at'));
                    }
                }
                break;
            default:
                break;
        }
        if (!!customFilters) {
            searchParams = this.applyCustomSearch(customFilters, tslib_1.__assign({}, searchParams));
        }
        return this.searchEnvelopes(searchParams);
    };
    /**
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    DocumentsService.prototype.getWaitingOnOthers = /**
     * @param {?=} ascending
     * @param {?=} row
     * @param {?=} page
     * @param {?=} filterTime
     * @param {?=} sortBy
     * @param {?=} customFilters
     * @return {?}
     */
    function (ascending, row, page, filterTime, sortBy, customFilters) {
        var _this = this;
        /** @type {?} */
        var actionRequiredEnvelopes = null;
        return this.filterSearchBy('action_required', ascending, row, page, filterTime, sortBy, customFilters)
            .pipe(concatMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res instanceof HttpResponse) {
                actionRequiredEnvelopes = res.body['result'];
                return _this.filterSearchBy('waiting_on_others_unfiltered', ascending, row, page, filterTime, sortBy, customFilters);
            }
            else {
                return empty();
            }
        })), map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response instanceof HttpResponse && actionRequiredEnvelopes) {
                /** @type {?} */
                var unfilteredWaitingOnOthers = response['body']['result'];
                /** @type {?} */
                var filteredWaitingOnOthers = differenceBy(unfilteredWaitingOnOthers, actionRequiredEnvelopes, 'id');
                response.body['result'] = filteredWaitingOnOthers;
                response.body['total'] = filteredWaitingOnOthers.length;
            }
            return response;
        })));
    };
    /**
     * @param {?} envId
     * @return {?}
     */
    DocumentsService.prototype.getEnvelopeOwnerInfo = /**
     * @param {?} envId
     * @return {?}
     */
    function (envId) {
        return this.httpClient.get(this._documentUrl + ("/" + envId + "?owner_info=true")).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })));
    };
    /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    DocumentsService.prototype.getEnvelopeDocUrl = /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    function (envId, docId) {
        var _this = this;
        return this.httpClient.get(this._documentUrl + ("/" + envId + "/envelope_documents/" + docId + "?file=true"), { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (isPlatformBrowser(_this.platform)) {
                /** @type {?} */
                var urlCreator = window.URL;
                /** @type {?} */
                var pdfUrl = urlCreator.createObjectURL(res);
                return pdfUrl;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            // use a snackBar/error.service
            console.error(err);
        })));
    };
    /**
     * @param {?} envelopeId
     * @param {?} documentId
     * @return {?}
     */
    DocumentsService.prototype.getEnvelopePdfWithProgress = /**
     * @param {?} envelopeId
     * @param {?} documentId
     * @return {?}
     */
    function (envelopeId, documentId) {
        /** @type {?} */
        var requestUrl = this._documentUrl + ("/" + envelopeId + "/envelope_documents/" + documentId + "?file=true");
        return this.httpClient.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event; })));
    };
    /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    DocumentsService.prototype.getEnvelopeDocBlob = /**
     * @param {?} envId
     * @param {?} docId
     * @return {?}
     */
    function (envId, docId) {
        return this.httpClient.get(this._documentUrl + ("/" + envId + "/envelope_documents/" + docId + "?file=true"), { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            return file;
        })));
    };
    /**
     * @param {?} envId
     * @return {?}
     */
    DocumentsService.prototype.getEnvelopeCertificateBlob = /**
     * @param {?} envId
     * @return {?}
     */
    function (envId) {
        return this.httpClient.get(this._documentUrl + ("/" + envId + "?certificate_file=true"), { responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            return file;
        })));
    };
    /********************************
     * Move logic to public library *
     *******************************/
    // downloadEnvelope(envelope) {
    //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
    //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
    //   });
    // }
    // downloadEnvelopeCertificate(envelope) {
    //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
    //     if (pdfBlob) {
    //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
    //     }
    //   });
    // }
    /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} templateId
     * @param {?} token
     * @param {?} file
     * @return {?}
     */
    // downloadEnvelope(envelope) {
    //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
    //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
    //   });
    // }
    // downloadEnvelopeCertificate(envelope) {
    //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
    //     if (pdfBlob) {
    //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
    //     }
    //   });
    // }
    DocumentsService.prototype.getTemplateDoc = /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} templateId
     * @param {?} token
     * @param {?} file
     * @return {?}
     */
    // downloadEnvelope(envelope) {
    //   this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(pdfBlob => {
    //     saveAs(pdfBlob, envelope.name + '-' + moment(envelope.updated_at).format('MM-DD-YY') + '.pdf');
    //   });
    // }
    // downloadEnvelopeCertificate(envelope) {
    //   this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(pdfBlob => {
    //     if (pdfBlob) {
    //       saveAs(pdfBlob, `${envelope.name}_certificate.pdf`);
    //     }
    //   });
    // }
    function (templateId, token, file) {
        /** @type {?} */
        var requestUrl = this._rForm_backend_url + ("/liveview/" + templateId + "/token/" + token);
        return this.httpClient.get(requestUrl, { responseType: 'json' })
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            return err;
        })));
    };
    /**
     * @param {?} templateId
     * @param {?} token
     * @return {?}
     */
    DocumentsService.prototype.getTemplatePDF = /**
     * @param {?} templateId
     * @param {?} token
     * @return {?}
     */
    function (templateId, token) {
        /** @type {?} */
        var requestUrl = this._rForm_backend_url + ("/liveview/" + templateId + "/token/" + token + "?file=true");
        return this.httpClient.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true, responseType: 'blob' })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event;
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DocumentsService.prototype.cancelEnvelope = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.httpClient.put(this._documentUrl + ("/" + id), { action: 'cancel' }, { responseType: 'json' })
            .pipe(map((/**
         * @param {?} envelopeData
         * @return {?}
         */
        function (envelopeData) { return envelopeData; }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return err; })));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    DocumentsService.prototype.submitEnvelope = /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    function (envId, roleName) {
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'submit' }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    DocumentsService.prototype.declineEnvelope = /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    function (envId, roleName) {
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'decline' }).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })));
    };
    /**
     * @param {?} envelopeId
     * @param {?} file
     * @param {?} fieldName
     * @return {?}
     */
    DocumentsService.prototype.uploadAttachment = /**
     * @param {?} envelopeId
     * @param {?} file
     * @param {?} fieldName
     * @return {?}
     */
    function (envelopeId, file, fieldName) {
        /** @type {?} */
        var req;
        if (file) {
            /** @type {?} */
            var formdata = new FormData();
            formdata.append('document', file, file.name);
            req = new HttpRequest('PUT', this._rForm_backend_url + '/envelopes/' + envelopeId +
                '/fields/' + fieldName, formdata, {
                reportProgress: true
            });
            return this.httpClient.request(req).pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return res; })));
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DocumentsService.prototype.downloadAttachment = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var header = new HttpHeaders().set('content-type', field.settings.type);
        return this.httpClient.get(this._rForm_backend_url + '/envelopes/' + field.envelope_id +
            '/fields/' + field.name + '/document', { headers: header, responseType: 'blob' })
            .pipe(map((/**
         * @param {?} file
         * @return {?}
         */
        function (file) {
            return file;
        })));
    };
    /**
     * @param {?} envelope
     * @return {?}
     */
    DocumentsService.prototype.getAttachmentDataByRecipients = /**
     * @param {?} envelope
     * @return {?}
     */
    function (envelope) {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var recipients = envelope['recipients'];
        if (recipients && recipients.length > 0) {
            /** @type {?} */
            var attachments = [];
            try {
                for (var recipients_1 = tslib_1.__values(recipients), recipients_1_1 = recipients_1.next(); !recipients_1_1.done; recipients_1_1 = recipients_1.next()) {
                    var recipient = recipients_1_1.value;
                    if (recipient.fields && recipient.fields.length > 0) {
                        try {
                            for (var _c = (e_2 = void 0, tslib_1.__values(recipient.fields)), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var field = _d.value;
                                if (field.type === 'attachment' && !!field.settings.url) {
                                    attachments.push({
                                        recipient: recipient.full_name,
                                        fieldObject: field
                                    });
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (recipients_1_1 && !recipients_1_1.done && (_a = recipients_1.return)) _a.call(recipients_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return attachments;
        }
        return [];
    };
    /*****************
     * Signature API *
     ****************/
    /**
     * **************
     * Signature API *
     * **************
     * @param {?} signatureBlob
     * @return {?}
     */
    DocumentsService.prototype.postSignatureBlob = /**
     * **************
     * Signature API *
     * **************
     * @param {?} signatureBlob
     * @return {?}
     */
    function (signatureBlob) {
        /** @type {?} */
        var blobFile = signatureBlob;
        /** @type {?} */
        var formData = new FormData();
        formData.append('signature', blobFile, blobFile['name']);
        /** @type {?} */
        var request = new HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload signature image');
            }
        }));
    };
    /**
     * @param {?} initialBlob
     * @return {?}
     */
    DocumentsService.prototype.postInitialBlob = /**
     * @param {?} initialBlob
     * @return {?}
     */
    function (initialBlob) {
        /** @type {?} */
        var blobFile = initialBlob;
        /** @type {?} */
        var formData = new FormData();
        formData.append('initial', blobFile, blobFile['name']);
        /** @type {?} */
        var request = new HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload Initial');
            }
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    DocumentsService.prototype.putSignatureField = /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    function (envelopeId, fieldName, signatureId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var ipAddress;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPublicIp()];
                    case 1:
                        ipAddress = _a.sent();
                        this.httpClient
                            .put(this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName + "/signature/" + signatureId), {
                            ip_address: ipAddress
                        }).toPromise().then((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            return resolve(res);
                        }));
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    DocumentsService.prototype.putInitialField = /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    function (envelopeId, fieldName, initialId) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var ipAddress;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPublicIp()];
                    case 1:
                        ipAddress = _a.sent();
                        this.httpClient
                            .put(this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName + "/initial/" + initialId), {
                            ip_address: ipAddress
                        }).toPromise().then((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            return resolve(res);
                        }));
                        return [2 /*return*/];
                }
            });
        }); }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    DocumentsService.prototype.putEnvelopeField = /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    function (envelopeId, result) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.httpClient
                .put(_this._documentUrl + ("/" + envelopeId + "/fields/" + _this.workingField.fName), result).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return resolve(res);
            }));
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    DocumentsService.prototype.updateGroupedField = /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    function (envelopeId, body, fieldName, ifPrepared) {
        var _this = this;
        if (typeof (ifPrepared) === 'boolean') {
            body['prepared'] = ifPrepared;
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this.httpClient
                .put(_this._documentUrl + ("/" + envelopeId + "/fields/" + fieldName), body).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return resolve(res);
            }));
        }));
    };
    /**
     * @private
     * @return {?}
     */
    DocumentsService.prototype.getPublicIp = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var apiUrl = 'https://api.ipify.org?format=jsonp';
        /** @type {?} */
        var callback = 'callback=JSONP_CALLBACK';
        return this.httpClient
            .jsonp(apiUrl, callback)
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res['ip'];
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error('Failed to get ip', err);
            return 'ip_unavailable';
        }));
    };
    /********************************
     * Move logic to public library *
     *******************************/
    // async zipEnvelopeDocs(envelope) {
    //   const zip = new jszip();
    //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
    //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
    //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
    //   });
    //   if (this.hasCertificate(envelope)) {
    //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
    //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
    //     });
    //   }
    //   const attachment = zip.folder('attachments');
    //   const fields = envelope.fields;
    //   let numOfAttachments = 0;
    //   for (let x = 0; x < fields.length; x++) {
    //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
    //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
    //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
    //         numOfAttachments++;
    //       });
    //     }
    //   }
    //   if (numOfAttachments === 0) {
    //     zip.remove('attachments');
    //   }
    //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
    //     saveAs(content, envelopeZipName + '.zip');
    //   })
    // }
    /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} envelope
     * @return {?}
     */
    // async zipEnvelopeDocs(envelope) {
    //   const zip = new jszip();
    //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
    //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
    //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
    //   });
    //   if (this.hasCertificate(envelope)) {
    //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
    //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
    //     });
    //   }
    //   const attachment = zip.folder('attachments');
    //   const fields = envelope.fields;
    //   let numOfAttachments = 0;
    //   for (let x = 0; x < fields.length; x++) {
    //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
    //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
    //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
    //         numOfAttachments++;
    //       });
    //     }
    //   }
    //   if (numOfAttachments === 0) {
    //     zip.remove('attachments');
    //   }
    //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
    //     saveAs(content, envelopeZipName + '.zip');
    //   })
    // }
    DocumentsService.prototype.sortRecipients = /**
     * *****************************
     * Move logic to public library *
     * *****************************
     * @param {?} envelope
     * @return {?}
     */
    // async zipEnvelopeDocs(envelope) {
    //   const zip = new jszip();
    //   const envelopeZipName = envelope.name + ' - ' + moment(envelope.updated_at).format('MM-DD-YY');
    //   await this.getEnvelopeDocBlob(envelope.id, envelope.envelope_document_id).toPromise().then(envelopeBlob => {
    //     zip.file(envelope.name + '.pdf', envelopeBlob, { compression: 'DEFLATE' });
    //   });
    //   if (this.hasCertificate(envelope)) {
    //     await this.getEnvelopeCertificateBlob(envelope.id).toPromise().then(envelopeCertificateBlob => {
    //       zip.file(envelope.name + '_certificate.pdf', envelopeCertificateBlob, { compression: 'DEFLATE' });
    //     });
    //   }
    //   const attachment = zip.folder('attachments');
    //   const fields = envelope.fields;
    //   let numOfAttachments = 0;
    //   for (let x = 0; x < fields.length; x++) {
    //     if (fields[x] && fields[x].type === 'attachment' && fields[x].settings['name']) {
    //       await this.downloadAttachment(fields[x]).toPromise().then(fileBlob => {
    //         attachment.file(fields[x].settings.name, fileBlob, { compression: 'DEFLATE' });
    //         numOfAttachments++;
    //       });
    //     }
    //   }
    //   if (numOfAttachments === 0) {
    //     zip.remove('attachments');
    //   }
    //   zip.generateAsync({ type: 'blob', compression: 'DEFLATE' }).then(content => {
    //     saveAs(content, envelopeZipName + '.zip');
    //   })
    // }
    function (envelope) {
        if (envelope.recipients.length < 1) {
            return [];
        }
        /** @type {?} */
        var recipients = envelope.recipients.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a.sequence === b.sequence) {
                return a.role_name < b.role_name ? -1 : a.role_name > b.role_name ? 1 : 0;
            }
            return b.sequence > a.sequence ? -1 : b.sequence < a.sequence ? 1 : 0;
        }));
        /** @type {?} */
        var signers = recipients.filter((/**
         * @param {?} recipient
         * @return {?}
         */
        function (recipient) {
            return recipient.type === 'signer';
        }));
        for (var x = 0; x < signers.length; x++) {
            /** @type {?} */
            var rIndex = findIndex(recipients, { sequence: signers[x].sequence, role_name: signers[x].role_name });
            if (rIndex >= 0) {
                recipients[rIndex]['rgba'] = getRGBA(x);
            }
        }
        return recipients;
    };
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    DocumentsService.prototype.getRecipientColor = /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    function (name, index) {
        if (index) {
            return getRGBA(index);
        }
        else if (this.envelope && this.envelope.recipients && this.envelope.recipients.length > 0) {
            /** @type {?} */
            var index_1 = findIndex(this.envelope.recipients, { role_name: name });
            if (index_1 >= 0 && this.envelope.recipients[index_1].rgba) {
                return this.envelope.recipients[index_1].rgba;
            }
        }
        else {
            return nameToRGBA(name);
        }
    };
    // Check the logic
    // Check the logic
    /**
     * @return {?}
     */
    DocumentsService.prototype.validateEnvelopeField = 
    // Check the logic
    /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var validators;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.workingField.vName != null && this.workingField.value !== '')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.validatorService.getValidatorsObject()];
                    case 1:
                        validators = _a.sent();
                        return [2 /*return*/, validators[this.workingField.vName].test(this.workingField.value) && this.satisfyRequired()];
                    case 2: return [2 /*return*/, this.satisfyRequired()];
                }
            });
        });
    };
    /**
     * @private
     * @return {?}
     */
    DocumentsService.prototype.satisfyRequired = /**
     * @private
     * @return {?}
     */
    function () {
        if (!!this.workingField.required && this.workingField.type !== 'checkbox' && this.workingField.type !== 'timestamp') {
            return !!this.workingField.value;
        }
        return true;
    };
    /**
     * @param {?} fields
     * @return {?}
     */
    DocumentsService.prototype.sortFields = /**
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        var _this = this;
        fields = fields.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.page - b.page;
        }));
        /** @type {?} */
        var previousDistance = null;
        fields = fields.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            /** @type {?} */
            var setting = 'settings';
            /** @type {?} */
            var distance = _this.canBeSameRow(a, b).distance;
            /** @type {?} */
            var higherHeight = _this.canBeSameRow(a, b).higherHeight;
            if (!a[setting]) {
                setting = 'setting';
            }
            if (a.page < b.page) {
                return -1;
            }
            if (a.page > b.page) {
                return 1;
            }
            /** @type {?} */
            var ax = a[setting].x;
            /** @type {?} */
            var bx = b[setting].x;
            /** @type {?} */
            var ay = a[setting].y;
            /** @type {?} */
            var by = b[setting].y;
            if (distance >= -3 && distance <= higherHeight) {
                previousDistance = previousDistance === null ? distance : distance < previousDistance ? distance : previousDistance;
                if (ax < bx) {
                    return -1;
                }
                else if (ax > bx) {
                    return 1;
                }
                else if (previousDistance >= distance) {
                    return -1;
                }
                else if (previousDistance <= distance) {
                    return 1;
                }
                return 0;
            }
            return b[setting].y - a[setting].y;
        }));
        return fields;
    };
    /**
     * @param {?} envelope
     * @return {?}
     */
    DocumentsService.prototype.checkIfEnvelopeOwner = /**
     * @param {?} envelope
     * @return {?}
     */
    function (envelope) {
        /** @type {?} */
        var signer_token = this.vTokenStateService.getOtherCookie('signer_token');
        /** @type {?} */
        var profile = this.tokenObjectService.getProfile();
        if (signer_token && !profile) {
            return false;
        }
        else if (envelope) {
            /** @type {?} */
            var currentUserId = profile['id'];
            return currentUserId === envelope['profile_id'];
        }
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    DocumentsService.prototype.canBeSameRow = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var setting = 'setting';
        if (!a[setting]) {
            setting = 'settings';
        }
        /** @type {?} */
        var aHeight = this.getHeight(a);
        /** @type {?} */
        var bHeight = this.getHeight(b);
        /** @type {?} */
        var aBottom = a[setting].y;
        /** @type {?} */
        var bBottom = b[setting].y;
        /** @type {?} */
        var top;
        /** @type {?} */
        var higherBottom;
        /** @type {?} */
        var higherHeight;
        if (aBottom < bBottom) {
            top = aHeight + aBottom;
            higherBottom = bBottom;
            higherHeight = bHeight;
        }
        else {
            top = bHeight + bBottom;
            higherBottom = aBottom;
            higherHeight = aHeight;
        }
        /** @type {?} */
        var distance = top - higherBottom;
        return { distance: distance, higherHeight: higherHeight };
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    DocumentsService.prototype.getHeight = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var setting = 'setting';
        if (!field[setting]) {
            setting = 'settings';
        }
        /** @type {?} */
        var height = 0;
        switch (field.type) {
            case 'signature':
            case 'initial':
                height = 36;
                break;
            case 'checkbox':
                height = 13.5;
                break;
            case 'attachment':
            case 'payment':
                height = 24;
                break;
            default:
                height = field[setting]['height'] || 0;
                break;
        }
        return height;
    };
    /**
     * @param {?} envelope
     * @return {?}
     */
    DocumentsService.prototype.hasCertificate = /**
     * @param {?} envelope
     * @return {?}
     */
    function (envelope) {
        return envelope.certificate_document_id || ['complete', 'canceled', 'declined'].indexOf(this.envelope.status) !== -1;
    };
    DocumentsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentsService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: ValidatorService },
        { type: VerdocsTokenObjectService },
        { type: VerdocsStateService },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DocumentsService;
}());
export { DocumentsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._currentFields;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._currEnvelope;
    /** @type {?} */
    DocumentsService.prototype.allEnvelopes;
    /** @type {?} */
    DocumentsService.prototype._currentExtendedEnvelope;
    /** @type {?} */
    DocumentsService.prototype._customFilterSubject;
    /** @type {?} */
    DocumentsService.prototype.currEnvelope$;
    /** @type {?} */
    DocumentsService.prototype.fieldsStream;
    /** @type {?} */
    DocumentsService.prototype.inProgressSubject;
    /** @type {?} */
    DocumentsService.prototype.envelopeData;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.currEnvelope;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.currRoleName;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype._documentUrl;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.workingField;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.envelope;
    /** @type {?} */
    DocumentsService.prototype.validators;
    /** @type {?} */
    DocumentsService.prototype.toggleNextSubject;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.validatorService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.tokenObjectService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DocumentsService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,