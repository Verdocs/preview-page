/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest } from '@angular/common/http';
// import { MatDialog } from '@angular/material/dialog'
import { catchError, map } from 'rxjs/operators';
import { Subject, Observable, EMPTY, of } from 'rxjs';
import { VerdocsTokenObjectService } from '@verdocs/tokens';
import { filter } from 'lodash';
// import { environment } from '../../../environments/environment';
import { TemplatesGuardService } from './templates.guard';
import { TemplateActions } from '../definitions/template.enums';
import { VSDKConfigToken } from '../angular-api.module';
export class TemplatesService {
    /**
     * @param {?} http
     * @param {?} vTokenObjectService
     * @param {?} templateGuard
     * @param {?} injector
     * @param {?} platform
     */
    constructor(http, vTokenObjectService, templateGuard, injector, platform) {
        this.http = http;
        this.vTokenObjectService = vTokenObjectService;
        this.templateGuard = templateGuard;
        this.injector = injector;
        this.platform = platform;
        this.templates = new Subject();
        this.template = new Subject();
        this.loadingStatus = new Subject();
        this._config_token = this.injector.get(VSDKConfigToken);
        this.rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} err
     * @return {?}
     */
    errorMessageNotVerified(err) {
        return err.error.error === 'email is not verified' && err.error.code === 401;
    }
    /**
     * @param {?=} filter
     * @return {?}
     */
    getTemplates(filter) {
        this.loadingStatus.next(true);
        this.templates.next([]);
        /** @type {?} */
        let query = null;
        if (filter) {
            switch (filter) {
                case 'creator':
                    query = '?is_creator=true';
                    break;
                case 'organization':
                    query = '?is_organization=true';
                    break;
                case 'starred':
                    query = '?is_starred=true';
                    break;
                default:
                    query = '';
                    break;
            }
        }
        /** @type {?} */
        const requestUrl = this.rForm_backend_url + '/templates' + (query ? query : '');
        return this.http.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event instanceof HttpResponse) {
                /** @type {?} */
                const template = (/** @type {?} */ (event.body));
                this.templates.next(template);
                this.loadingStatus.next(false);
                return (/** @type {?} */ (event));
            }
            return event;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            if (err && err.status === 401 && !this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
            }
            this.loadingStatus.next(false);
            return Observable.throw(err);
        })));
    }
    // Move this to another service
    /**
     * @param {?} id
     * @param {?=} thumbnail
     * @return {?}
     */
    getTemplateObservable(id, thumbnail) {
        this.loadingStatus.next(true);
        /** @type {?} */
        let templateUrl = this.rForm_backend_url + '/templates/' + id;
        if (thumbnail === true) {
            templateUrl += '?thumbnail=true';
        }
        return this.http.get(templateUrl)
            .pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            this.loadingStatus.next(false);
            return template;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            this.loadingStatus.next(false);
            if (err && err.status === 401 && !this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return EMPTY;
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    starTemplate(id) {
        return this.http.post(this.rForm_backend_url + `/templates/${id}/stars`, {}).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            if (err && err.status === 401 && this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return Observable.throw(err);
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unstarTemplate(id) {
        return this.http.delete(this.rForm_backend_url + `/templates/${id}/stars`).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err && err.status === 401 && this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return Observable.throw((/** @type {?} */ (err)));
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplate(id) {
        return this.getTemplateObservable(id).pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        (template) => {
            this.template.next(template);
            return template;
        })));
    }
    /**
     * @return {?}
     */
    getCreatorTemplates() {
        return this.getTemplates('creator');
    }
    /**
     * @return {?}
     */
    getOrganizationTemplates() {
        return this.getTemplates('organization');
    }
    /**
     * @return {?}
     */
    getStarredTemplates() {
        return this.getTemplates('starred');
    }
    /**
     * @return {?}
     */
    getPermissions() {
        return this.vTokenObjectService.getPermissions();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplateOwnerInfo(id) {
        return this.http.get(`${this.rForm_backend_url}/templates/${id}?owner_info=true`)
            .toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return res;
        }));
    }
    /**
     * @param {?} template_id
     * @param {?} template_document
     * @return {?}
     */
    getTemplateDocumentPDFObservable(template_id, template_document) {
        return this.http.get(this.rForm_backend_url + '/templates/' + template_id + '/documents/' +
            template_document.id + '?file=true', { responseType: 'blob' });
    }
    /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    getTemplateDocument(templateId, templateDocument) {
        return this.getTemplateDocumentPDFObservable(templateId, templateDocument).toPromise();
    }
    /**
     * @param {?} templateId
     * @param {?} templateDocumentId
     * @return {?}
     */
    getTemplateThumbnail(templateId, templateDocumentId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents/' +
            templateDocumentId + '?thumbnail=true', { responseType: 'blob' }).toPromise();
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getAllTemplateDocumentsObservable(templateId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents');
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getAllTemplateDocuments(templateId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents')
            .toPromise();
    }
    /**
     * @param {?} template
     * @return {?}
     */
    downloadTemplateDocument(template) {
        if ((isPlatformBrowser(this.platform))) {
            this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
             * @param {?} template_file
             * @return {?}
             */
            template_file => {
                this.prepareSave(template, template_file);
            }));
        }
    }
    /**
     * @param {?} template
     * @param {?} template_file
     * @return {?}
     */
    prepareSave(template, template_file) {
        if (window && window.URL) {
            /** @type {?} */
            const fileUrl = URL.createObjectURL(template_file);
            // saveAs(fileUrl, template.template_documents[0].name + '.pdf');
        }
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchTemplates(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.rForm_backend_url + '/templates/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event;
        })));
    }
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    updateTemplateObservable(templateId, body) {
        return this.http.put(this.rForm_backend_url + '/templates/' + templateId, body);
    }
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    updateTemplate(templateId, body) {
        return this.updateTemplateObservable(templateId, body)
            .toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        template => template));
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    deleteTemplate(templateId) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + templateId);
    }
    /**
     * @param {?} templateId
     * @param {?} sequence_number
     * @return {?}
     */
    deleteSequence(templateId, sequence_number) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + templateId + '/roles?sequence=' + sequence_number).toPromise();
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    updateTemplates(templates) {
        this.templates.next(templates);
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canSendEnvelope(template) {
        if (template) {
            /** @type {?} */
            const signers = filter(template.roles, { type: 'signer' });
            /** @type {?} */
            const hasSigner = signers.length > 0;
            /** @type {?} */
            let signersHaveFields = false;
            if (hasSigner) {
                for (const signer of signers) {
                    signersHaveFields = signer['fields'] && signer['fields'].length > 0;
                }
            }
            /** @type {?} */
            const hasAccessToTemplate = this.templateGuard.canPerformAction(TemplateActions.READ, template).canPerform;
            return hasAccessToTemplate && hasSigner && signersHaveFields && this.templateGuard.canBeSender(template);
        }
        else {
            return false;
        }
    }
}
TemplatesService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TemplatesService.ctorParameters = () => [
    { type: HttpClient },
    { type: VerdocsTokenObjectService },
    { type: TemplatesGuardService },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /** @type {?} */
    TemplatesService.prototype.templates;
    /** @type {?} */
    TemplatesService.prototype.template;
    /** @type {?} */
    TemplatesService.prototype.loadingStatus;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9zZGsvIiwic291cmNlcyI6WyJsaWIvdGVtcGxhdGVzL3RlbXBsYXRlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBZ0MsTUFBTSxzQkFBc0IsQ0FBQzs7QUFFM0csT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUM7O0FBS2hDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUdoRSxPQUFPLEVBQWMsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHcEUsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7Ozs7SUFRM0IsWUFDVSxJQUFnQixFQUNoQixtQkFBOEMsRUFDOUMsYUFBb0MsRUFFcEMsUUFBa0IsRUFDRyxRQUFRO1FBTDdCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUEyQjtRQUM5QyxrQkFBYSxHQUFiLGFBQWEsQ0FBdUI7UUFFcEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNHLGFBQVEsR0FBUixRQUFR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RTs7SUFDcEUseUNBQThDOzs7OztJQUU5Qyx5Q0FBa0M7Ozs7O0lBQ2xDLDZDQUFrQzs7Ozs7SUFHaEMsZ0NBQXdCOzs7OztJQUN4QiwrQ0FBc0Q7Ozs7O0lBQ3RELHlDQUE0Qzs7Ozs7SUFFNUMsb0NBQTBCOzs7OztJQUMxQixvQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIEluamVjdG9yLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFJlc3BvbnNlLCBIdHRwUmVxdWVzdCwgSHR0cEV2ZW50LCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbi8vIGltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZydcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUsIEVNUFRZLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVmVyZG9jc1Rva2VuT2JqZWN0U2VydmljZSB9IGZyb20gJ0B2ZXJkb2NzL3Rva2Vucyc7XG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdsb2Rhc2gnO1xuLy8gaW1wb3J0IHsgc2F2ZUFzIH0gZnJvbSAnZmlsZS1zYXZlcic7XG5cbmltcG9ydCB7IElUZW1wbGF0ZSwgSVN0YXJUZW1wbGF0ZSB9IGZyb20gJy4uL21vZGVscy90ZW1wbGF0ZS5tb2RlbCdcbi8vIGltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vLi4vLi4vZW52aXJvbm1lbnRzL2Vudmlyb25tZW50JztcbmltcG9ydCB7IFRlbXBsYXRlc0d1YXJkU2VydmljZSB9IGZyb20gJy4vdGVtcGxhdGVzLmd1YXJkJztcbmltcG9ydCB7IFRlbXBsYXRlQWN0aW9ucyB9IGZyb20gJy4uL2RlZmluaXRpb25zL3RlbXBsYXRlLmVudW1zJztcbi8vIGltcG9ydCB7IEZvdXJPaE9uZURpYWxvZyB9IGZyb20gJy4uLy4uL3NoYXJlZC9kaWFsb2dzL2Vycm9yLWRpYWxvZ3MvZm91ci1vaC1vbmUuZGlhbG9nJztcbmltcG9ydCB7IElUZW1wbGF0ZVNlYXJjaFBhcmFtcyB9IGZyb20gJy4uL21vZGVscy90ZW1wbGF0ZV9zZWFyY2gubW9kZWwnO1xuaW1wb3J0IHsgVlNES0NvbmZpZywgVlNES0NvbmZpZ1Rva2VuIH0gZnJvbSAnLi4vYW5ndWxhci1hcGkubW9kdWxlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlc1NlcnZpY2Uge1xuICBwdWJsaWMgdGVtcGxhdGVzOiBTdWJqZWN0PElUZW1wbGF0ZVtdPiA9IG5ldyBTdWJqZWN0PElUZW1wbGF0ZVtdPigpO1xuICBwdWJsaWMgdGVtcGxhdGU6IFN1YmplY3Q8SVRlbXBsYXRlIHwge30+ID0gbmV3IFN1YmplY3Q8SVRlbXBsYXRlPigpO1xuICBwdWJsaWMgbG9hZGluZ1N0YXR1cyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgcHJpdmF0ZSBfY29uZmlnX3Rva2VuOiBWU0RLQ29uZmlnO1xuICBwcml2YXRlIHJGb3JtX2JhY2tlbmRfdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgdlRva2VuT2JqZWN0U2VydmljZTogVmVyZG9jc1Rva2VuT2JqZWN0U2VydmljZSxcbiAgICBwcml2YXRlIHRlbXBsYXRlR3VhcmQ6IFRlbXBsYXRlc0d1YXJkU2VydmljZSxcbiAgICAvLyBwcml2YXRlIGRpYWxvZzogTWF0RGlhbG9nLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1cbiAgKSB7XG4gICAgdGhpcy5fY29uZmlnX3Rva2VuID0gdGhpcy5pbmplY3Rvci5nZXQoVlNES0NvbmZpZ1Rva2VuKTtcbiAgICB0aGlzLnJGb3JtX2JhY2tlbmRfdXJsID0gdGhpcy5fY29uZmlnX3Rva2VuLnJGb3JtX2JhY2tlbmRfdXJsO1xuICB9XG5cbiAgZXJyb3JNZXNzYWdlTm90VmVyaWZpZWQoZXJyKSB7XG4gICAgcmV0dXJuIGVyci5lcnJvci5lcnJvciA9PT0gJ2VtYWlsIGlzIG5vdCB2ZXJpZmllZCcgJiYgZXJyLmVycm9yLmNvZGUgPT09IDQwMTtcbiAgfVxuXG4gIGdldFRlbXBsYXRlcyhmaWx0ZXI/OiAnY3JlYXRvcicgfCAnb3JnYW5pemF0aW9uJyB8ICdzdGFycmVkJyk6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4gfCBJVGVtcGxhdGVbXSB8IEh0dHBFcnJvclJlc3BvbnNlPiB7XG4gICAgdGhpcy5sb2FkaW5nU3RhdHVzLm5leHQodHJ1ZSk7XG4gICAgdGhpcy50ZW1wbGF0ZXMubmV4dChbXSk7XG4gICAgbGV0IHF1ZXJ5ID0gbnVsbDtcbiAgICBpZiAoZmlsdGVyKSB7XG4gICAgICBzd2l0Y2ggKGZpbHRlcikge1xuICAgICAgICBjYXNlICdjcmVhdG9yJzpcbiAgICAgICAgICBxdWVyeSA9ICc/aXNfY3JlYXRvcj10cnVlJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb3JnYW5pemF0aW9uJzpcbiAgICAgICAgICBxdWVyeSA9ICc/aXNfb3JnYW5pemF0aW9uPXRydWUnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdGFycmVkJzpcbiAgICAgICAgICBxdWVyeSA9ICc/aXNfc3RhcnJlZD10cnVlJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBxdWVyeSA9ICcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0VXJsID0gdGhpcy5yRm9ybV9iYWNrZW5kX3VybCArICcvdGVtcGxhdGVzJyArIChxdWVyeSA/IHF1ZXJ5IDogJycpO1xuICAgIHJldHVybiB0aGlzLmh0dHAucmVxdWVzdChuZXcgSHR0cFJlcXVlc3QoXG4gICAgICAnR0VUJyxcbiAgICAgIHJlcXVlc3RVcmwsXG4gICAgICB7fSxcbiAgICAgIHsgcmVwb3J0UHJvZ3Jlc3M6IHRydWUgfVxuICAgICkpLnBpcGUoXG4gICAgICBtYXAoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSkge1xuICAgICAgICAgIGNvbnN0IHRlbXBsYXRlID0gPElUZW1wbGF0ZVtdPmV2ZW50LmJvZHk7XG4gICAgICAgICAgdGhpcy50ZW1wbGF0ZXMubmV4dCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgdGhpcy5sb2FkaW5nU3RhdHVzLm5leHQoZmFsc2UpO1xuICAgICAgICAgIHJldHVybiBldmVudCBhcyBIdHRwUmVzcG9uc2U8SVRlbXBsYXRlW10+O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH0pLFxuICAgICAgY2F0Y2hFcnJvcigoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAoZXJyICYmIGVyci5zdGF0dXMgPT09IDQwMSAmJiAhdGhpcy5lcnJvck1lc3NhZ2VOb3RWZXJpZmllZChlcnIpKSB7XG4gICAgICAgICAgLy8gY29uc3QgZXJyb3JEaWFsb2cgPSB0aGlzLmRpYWxvZy5vcGVuKEZvdXJPaE9uZURpYWxvZywge1xuICAgICAgICAgIC8vICAgcGFuZWxDbGFzczogJ2Vycm9yX19kaWFsb2cnLFxuICAgICAgICAgIC8vICAgZGlzYWJsZUNsb3NlOiB0cnVlXG4gICAgICAgICAgLy8gfSlcbiAgICAgICAgICAvLyBlcnJvckRpYWxvZy5jb21wb25lbnRJbnN0YW5jZS5lcnJvciA9IGVycjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvYWRpbmdTdGF0dXMubmV4dChmYWxzZSk7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycilcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIC8vIE1vdmUgdGhpcyB0byBhbm90aGVyIHNlcnZpY2VcbiAgZ2V0VGVtcGxhdGVPYnNlcnZhYmxlKGlkOiBzdHJpbmcsIHRodW1ibmFpbD86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPElUZW1wbGF0ZT4ge1xuICAgIHRoaXMubG9hZGluZ1N0YXR1cy5uZXh0KHRydWUpO1xuICAgIGxldCB0ZW1wbGF0ZVVybCA9IHRoaXMuckZvcm1fYmFja2VuZF91cmwgKyAnL3RlbXBsYXRlcy8nICsgaWQ7XG4gICAgaWYgKHRodW1ibmFpbCA9PT0gdHJ1ZSkge1xuICAgICAgdGVtcGxhdGVVcmwgKz0gJz90aHVtYm5haWw9dHJ1ZSc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PElUZW1wbGF0ZT4odGVtcGxhdGVVcmwpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHRlbXBsYXRlID0+IHtcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTdGF0dXMubmV4dChmYWxzZSk7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgICB9KSxcbiAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICAgIHRoaXMubG9hZGluZ1N0YXR1cy5uZXh0KGZhbHNlKTtcbiAgICAgICAgICBpZiAoZXJyICYmIGVyci5zdGF0dXMgPT09IDQwMSAmJiAhdGhpcy5lcnJvck1lc3NhZ2VOb3RWZXJpZmllZChlcnIpKSB7XG4gICAgICAgICAgICAvLyBjb25zdCBlcnJvckRpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oRm91ck9oT25lRGlhbG9nLCB7XG4gICAgICAgICAgICAvLyAgIHBhbmVsQ2xhc3M6ICdlcnJvcl9fZGlhbG9nJyxcbiAgICAgICAgICAgIC8vICAgZGlzYWJsZUNsb3NlOiB0cnVlXG4gICAgICAgICAgICAvLyB9KVxuICAgICAgICAgICAgLy8gZXJyb3JEaWFsb2cuY29tcG9uZW50SW5zdGFuY2UuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICByZXR1cm4gb2YoZXJyKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gRU1QVFlcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cblxuICBzdGFyVGVtcGxhdGUoaWQpOiBPYnNlcnZhYmxlPElTdGFyVGVtcGxhdGUgfCBIdHRwRXJyb3JSZXNwb25zZT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLnJGb3JtX2JhY2tlbmRfdXJsICsgYC90ZW1wbGF0ZXMvJHtpZH0vc3RhcnNgLCB7fSkucGlwZShcbiAgICAgIG1hcCgocmVzOiBJU3RhclRlbXBsYXRlKSA9PiByZXMpLFxuICAgICAgY2F0Y2hFcnJvcigoZXJyOiBIdHRwRXJyb3JSZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAoZXJyICYmIGVyci5zdGF0dXMgPT09IDQwMSAmJiB0aGlzLmVycm9yTWVzc2FnZU5vdFZlcmlmaWVkKGVycikpIHtcbiAgICAgICAgICAvLyBjb25zdCBlcnJvckRpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oRm91ck9oT25lRGlhbG9nLCB7XG4gICAgICAgICAgLy8gICBwYW5lbENsYXNzOiAnZXJyb3JfX2RpYWxvZycsXG4gICAgICAgICAgLy8gICBkaXNhYmxlQ2xvc2U6IHRydWVcbiAgICAgICAgICAvLyB9KVxuICAgICAgICAgIC8vIGVycm9yRGlhbG9nLmNvbXBvbmVudEluc3RhbmNlLmVycm9yID0gZXJyO1xuICAgICAgICAgIHJldHVybiBvZihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycik7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICB1bnN0YXJUZW1wbGF0ZShpZCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuckZvcm1fYmFja2VuZF91cmwrIGAvdGVtcGxhdGVzLyR7aWR9L3N0YXJzYCkucGlwZShcbiAgICAgIGNhdGNoRXJyb3IoZXJyID0+IHtcbiAgICAgICAgaWYgKGVyciAmJiBlcnIuc3RhdHVzID09PSA0MDEgJiYgdGhpcy5lcnJvck1lc3NhZ2VOb3RWZXJpZmllZChlcnIpKSB7XG4gICAgICAgICAgLy8gY29uc3QgZXJyb3JEaWFsb2cgPSB0aGlzLmRpYWxvZy5vcGVuKEZvdXJPaE9uZURpYWxvZywge1xuICAgICAgICAgIC8vICAgcGFuZWxDbGFzczogJ2Vycm9yX19kaWFsb2cnLFxuICAgICAgICAgIC8vICAgZGlzYWJsZUNsb3NlOiB0cnVlXG4gICAgICAgICAgLy8gfSlcbiAgICAgICAgICAvLyBlcnJvckRpYWxvZy5jb21wb25lbnRJbnN0YW5jZS5lcnJvciA9IGVycjtcbiAgICAgICAgICByZXR1cm4gb2YoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnIgYXMgSHR0cEVycm9yUmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGUoaWQpOiBPYnNlcnZhYmxlPElUZW1wbGF0ZT4ge1xuICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlT2JzZXJ2YWJsZShpZCkucGlwZShcbiAgICAgIG1hcCgodGVtcGxhdGU6IElUZW1wbGF0ZSkgPT4ge1xuICAgICAgICB0aGlzLnRlbXBsYXRlLm5leHQodGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBnZXRDcmVhdG9yVGVtcGxhdGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlcygnY3JlYXRvcicpO1xuICB9XG5cbiAgZ2V0T3JnYW5pemF0aW9uVGVtcGxhdGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlcygnb3JnYW5pemF0aW9uJyk7XG4gIH1cblxuICBnZXRTdGFycmVkVGVtcGxhdGVzKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlcygnc3RhcnJlZCcpO1xuICB9XG5cbiAgZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMudlRva2VuT2JqZWN0U2VydmljZS5nZXRQZXJtaXNzaW9ucygpO1xuICB9XG5cblxuICBnZXRUZW1wbGF0ZU93bmVySW5mbyhpZDogc3RyaW5nKTogUHJvbWlzZTx7IHByb2ZpbGVfaWQ6IHN0cmluZywgZW1haWw6IHN0cmluZywgbmFtZTogc3RyaW5nIH0+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDx7IHByb2ZpbGVfaWQ6IHN0cmluZywgZW1haWw6IHN0cmluZywgbmFtZTogc3RyaW5nIH0+KGAke3RoaXMuckZvcm1fYmFja2VuZF91cmx9L3RlbXBsYXRlcy8ke2lkfT9vd25lcl9pbmZvPXRydWVgKVxuICAgICAgLnRvUHJvbWlzZSgpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGVEb2N1bWVudFBERk9ic2VydmFibGUodGVtcGxhdGVfaWQsIHRlbXBsYXRlX2RvY3VtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5yRm9ybV9iYWNrZW5kX3VybCArICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZV9pZCArICcvZG9jdW1lbnRzLycgK1xuICAgICAgdGVtcGxhdGVfZG9jdW1lbnQuaWQgKyAnP2ZpbGU9dHJ1ZScsIHsgcmVzcG9uc2VUeXBlOiAnYmxvYicgfSlcbiAgfVxuXG4gIGdldFRlbXBsYXRlRG9jdW1lbnQodGVtcGxhdGVJZCwgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgIHJldHVybiB0aGlzLmdldFRlbXBsYXRlRG9jdW1lbnRQREZPYnNlcnZhYmxlKHRlbXBsYXRlSWQsIHRlbXBsYXRlRG9jdW1lbnQpLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGVUaHVtYm5haWwodGVtcGxhdGVJZCwgdGVtcGxhdGVEb2N1bWVudElkKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5yRm9ybV9iYWNrZW5kX3VybCArICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZUlkICsgJy9kb2N1bWVudHMvJyArXG4gICAgICB0ZW1wbGF0ZURvY3VtZW50SWQgKyAnP3RodW1ibmFpbD10cnVlJywgeyByZXNwb25zZVR5cGU6ICdibG9iJyB9KS50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGdldEFsbFRlbXBsYXRlRG9jdW1lbnRzT2JzZXJ2YWJsZSh0ZW1wbGF0ZUlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5yRm9ybV9iYWNrZW5kX3VybCArICcvdGVtcGxhdGVzLycgKyB0ZW1wbGF0ZUlkICsgJy9kb2N1bWVudHMnKVxuICB9XG5cbiAgZ2V0QWxsVGVtcGxhdGVEb2N1bWVudHModGVtcGxhdGVJZCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuckZvcm1fYmFja2VuZF91cmwgKyAnL3RlbXBsYXRlcy8nICsgdGVtcGxhdGVJZCArICcvZG9jdW1lbnRzJylcbiAgICAgIC50b1Byb21pc2UoKVxuICB9XG5cbiAgZG93bmxvYWRUZW1wbGF0ZURvY3VtZW50KHRlbXBsYXRlOiBJVGVtcGxhdGUpIHtcbiAgICBpZiAoKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKSkge1xuICAgICAgdGhpcy5nZXRUZW1wbGF0ZURvY3VtZW50KHRlbXBsYXRlLmlkLCB0ZW1wbGF0ZS50ZW1wbGF0ZV9kb2N1bWVudHNbMF0pLnRoZW4odGVtcGxhdGVfZmlsZSA9PiB7XG4gICAgICAgIHRoaXMucHJlcGFyZVNhdmUodGVtcGxhdGUsIHRlbXBsYXRlX2ZpbGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJlcGFyZVNhdmUodGVtcGxhdGUsIHRlbXBsYXRlX2ZpbGUpIHtcbiAgICBpZiAod2luZG93ICYmIHdpbmRvdy5VUkwpIHtcbiAgICAgIGNvbnN0IGZpbGVVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHRlbXBsYXRlX2ZpbGUpO1xuICAgICAgLy8gc2F2ZUFzKGZpbGVVcmwsIHRlbXBsYXRlLnRlbXBsYXRlX2RvY3VtZW50c1swXS5uYW1lICsgJy5wZGYnKTtcbiAgICB9XG4gIH1cblxuICBzZWFyY2hUZW1wbGF0ZXMoc2VhcmNoUGFyYW1zOiBJVGVtcGxhdGVTZWFyY2hQYXJhbXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzZWFyY2hQYXJhbXMpIHtcbiAgICAgIGlmIChzZWFyY2hQYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBpZiAoc2VhcmNoUGFyYW1zW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgc2VhcmNoUGFyYW1zW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KG5ldyBIdHRwUmVxdWVzdChcbiAgICAgICdQT1NUJyxcbiAgICAgIHRoaXMuckZvcm1fYmFja2VuZF91cmwgKyAnL3RlbXBsYXRlcy9zZWFyY2gnLFxuICAgICAgc2VhcmNoUGFyYW1zLFxuICAgICAge1xuICAgICAgICByZXBvcnRQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgcmVzcG9uc2VUeXBlOiAnanNvbidcbiAgICAgIH1cbiAgICApKS5waXBlKFxuICAgICAgbWFwKGV2ZW50ID0+IHtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlVGVtcGxhdGVPYnNlcnZhYmxlKHRlbXBsYXRlSWQ6IHN0cmluZywgYm9keSk6IE9ic2VydmFibGU8SVRlbXBsYXRlPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQ8SVRlbXBsYXRlPih0aGlzLnJGb3JtX2JhY2tlbmRfdXJsKyAnL3RlbXBsYXRlcy8nICsgdGVtcGxhdGVJZCwgYm9keSk7XG4gIH1cblxuICB1cGRhdGVUZW1wbGF0ZSh0ZW1wbGF0ZUlkOiBzdHJpbmcsIGJvZHkpOiBQcm9taXNlPElUZW1wbGF0ZT4ge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVRlbXBsYXRlT2JzZXJ2YWJsZSh0ZW1wbGF0ZUlkLCBib2R5KVxuICAgICAgLnRvUHJvbWlzZSgpLnRoZW4odGVtcGxhdGUgPT4gdGVtcGxhdGUpO1xuICB9XG5cbiAgZGVsZXRlVGVtcGxhdGUodGVtcGxhdGVJZCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKHRoaXMuckZvcm1fYmFja2VuZF91cmwgKyAnL3RlbXBsYXRlcy8nICsgdGVtcGxhdGVJZCk7XG4gIH1cblxuICBkZWxldGVTZXF1ZW5jZSh0ZW1wbGF0ZUlkLCBzZXF1ZW5jZV9udW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZSh0aGlzLnJGb3JtX2JhY2tlbmRfdXJsICsgJy90ZW1wbGF0ZXMvJyArIHRlbXBsYXRlSWQgKyAnL3JvbGVzP3NlcXVlbmNlPScgKyBzZXF1ZW5jZV9udW1iZXIpLnRvUHJvbWlzZSgpXG4gIH1cblxuICB1cGRhdGVUZW1wbGF0ZXModGVtcGxhdGVzKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXMubmV4dCh0ZW1wbGF0ZXMpO1xuICB9XG5cbiAgY2FuU2VuZEVudmVsb3BlKHRlbXBsYXRlKSB7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBjb25zdCBzaWduZXJzID0gZmlsdGVyKHRlbXBsYXRlLnJvbGVzLCB7IHR5cGU6ICdzaWduZXInIH0pO1xuICAgICAgY29uc3QgaGFzU2lnbmVyID0gc2lnbmVycy5sZW5ndGggPiAwO1xuICAgICAgbGV0IHNpZ25lcnNIYXZlRmllbGRzID0gZmFsc2U7XG4gICAgICBpZiAoaGFzU2lnbmVyKSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2lnbmVyIG9mIHNpZ25lcnMpIHtcbiAgICAgICAgICBzaWduZXJzSGF2ZUZpZWxkcyA9IHNpZ25lclsnZmllbGRzJ10gJiYgc2lnbmVyWydmaWVsZHMnXS5sZW5ndGggPiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhc0FjY2Vzc1RvVGVtcGxhdGUgPSB0aGlzLnRlbXBsYXRlR3VhcmQuY2FuUGVyZm9ybUFjdGlvbihUZW1wbGF0ZUFjdGlvbnMuUkVBRCwgdGVtcGxhdGUpLmNhblBlcmZvcm07XG4gICAgICByZXR1cm4gaGFzQWNjZXNzVG9UZW1wbGF0ZSAmJiBoYXNTaWduZXIgJiYgc2lnbmVyc0hhdmVGaWVsZHMgJiYgdGhpcy50ZW1wbGF0ZUd1YXJkLmNhbkJlU2VuZGVyKHRlbXBsYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19