/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject } from 'rxjs';
import { VSDKConfigToken } from '../angular-api.module';
import { findIndex } from 'lodash';
export class RecipientService {
    /**
     * @param {?} httpClient
     * @param {?} injector
     */
    constructor(httpClient, injector) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.recipientsSubject = new ReplaySubject();
        this.recipients = [];
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @private
     * @param {?} recipient
     * @return {?}
     */
    updateRecipients(recipient) {
        if (recipient && recipient['length'] && recipient['length'] > 0) {
            this.recipients = (/** @type {?} */ (recipient));
        }
        else if (recipient) {
            if (this.recipients && this.recipients['length'] && this.recipients['length'] > 0) {
                /** @type {?} */
                const updatedRecipientIndex = findIndex((/** @type {?} */ (this.recipients)), { role_name: recipient['role_name'] });
                if (updatedRecipientIndex !== -1) {
                    this.recipients[updatedRecipientIndex] = (/** @type {?} */ (recipient));
                }
            }
            else {
                this.recipients.push((/** @type {?} */ (recipient)));
            }
        }
        this.recipientsSubject.next(this.recipients);
    }
    /**
     * @param {?} envelopeId
     * @return {?}
     */
    getRecipients(envelopeId) {
        return this.httpClient.get(this._rForm_backend_url + `/envelopes/${envelopeId}/recipients`)
            .toPromise().then((/**
         * @param {?} recipients
         * @return {?}
         */
        (recipients) => {
            this.updateRecipients(recipients);
            return recipients;
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            return [];
        }));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} recipientsToUpdate
     * @return {?}
     */
    prepareRecipients(envId, roleName, recipientsToUpdate) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}`, { action: 'prepare', recipients: recipientsToUpdate }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        (updatedRecipient) => {
            this.updateRecipients(updatedRecipient);
        }));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} newFullName
     * @return {?}
     */
    updateRecipientName(envId, roleName, newFullName) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}`, { action: 'update', new_full_name: newFullName }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        (updatedRecipient) => {
            this.updateRecipients(updatedRecipient);
        }));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    setAsAgreed(envId, roleName) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}`, { action: 'update', agreed: true }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        (updatedRecipient) => {
            this.updateRecipients(updatedRecipient);
        }));
    }
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} profileToClaim
     * @return {?}
     */
    claimProfile(envId, roleName, profileToClaim) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envId}/recipients/${roleName}/claim`, { profile: profileToClaim }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        (updatedRecipient) => {
            this.updateRecipients(updatedRecipient);
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @param {?} recipientInfo
     * @return {?}
     */
    updateRecipientInfoByOwner(envelopeId, roleName, recipientInfo) {
        return this.httpClient.put(this._rForm_backend_url + `/envelopes/${envelopeId}/recipients/${roleName}`, { action: 'owner_update', full_name: recipientInfo.full_name, email: recipientInfo.email, phone: recipientInfo.phone }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        (updatedRecipient) => {
            this.updateRecipients(updatedRecipient);
            return updatedRecipient;
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    getInPersonLink(envelopeId, roleName) {
        return this.httpClient.get(this._rForm_backend_url + `/envelopes/${envelopeId}/recipients/${roleName}?in_person_link=true`)
            .toPromise().then((/**
         * @param {?} inPersonLink
         * @return {?}
         */
        (inPersonLink) => {
            return inPersonLink;
        }));
    }
}
RecipientService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RecipientService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    RecipientService.prototype.recipientsSubject;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.recipients;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,