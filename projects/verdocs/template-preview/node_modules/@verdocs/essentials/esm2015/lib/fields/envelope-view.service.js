/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { SignatureService } from './envelope-signature.service';
export class EnvelopeViewService {
    /**
     * @param {?} signatureService
     */
    constructor(signatureService) {
        this.signatureService = signatureService;
        this.recipientSubject = new ReplaySubject();
        this.jumpCoordinateSubject = new ReplaySubject();
        this.fieldTypeSubject = new ReplaySubject();
        this.pdfUrlSubject = new ReplaySubject();
        this.pdfBlobSubject = new ReplaySubject();
        this.toggleNextSubject = new ReplaySubject();
        this.viewModeSubject = new ReplaySubject();
        this.agreedSubject = new ReplaySubject(1, 500);
        this.attachmentsSubject = new ReplaySubject();
        this.formValiditySubject = new ReplaySubject();
        this.requestFormValiditySubject = new ReplaySubject();
        this.signatureService._rName.subscribe((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            this.rName = role;
        }));
    }
    /**
     * @param {?} mode
     * @return {?}
     */
    setMode(mode) {
        this.mode = mode;
        this.viewModeSubject.next(this.mode);
    }
    /**
     * @param {?} signatureService
     * @return {?}
     */
    setSignatureService(signatureService) {
        this.signatureService = signatureService;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    requestFormValidity(value) {
        this.requestFormValiditySubject.next(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFormValidityData(value) {
        this.formValiditySubject.next(value);
    }
    /**
     * @param {?} type
     * @return {?}
     */
    ifBelongsToPreparer(type) {
        return type === 'textbox' || type === 'date' || type === 'checkbox';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    ifBelongsToCurrentRecipient(field) {
        if (this.mode === 'prepareview') {
            return this.ifBelongsToPreparer(field.controlType);
        }
        else {
            return field.recipientRole === this.rName;
        }
    }
}
EnvelopeViewService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EnvelopeViewService.ctorParameters = () => [
    { type: SignatureService }
];
if (false) {
    /** @type {?} */
    EnvelopeViewService.prototype.recipientSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.jumpCoordinateSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.fieldTypeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfUrlSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.pdfBlobSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.toggleNextSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.viewModeSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.agreedSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.attachmentsSubject;
    /** @type {?} */
    EnvelopeViewService.prototype.formValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.requestFormValiditySubject;
    /** @type {?} */
    EnvelopeViewService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    EnvelopeViewService.prototype.signatureService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52ZWxvcGUtdmlldy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvZXNzZW50aWFscy8iLCJzb3VyY2VzIjpbImxpYi9maWVsZHMvZW52ZWxvcGUtdmlldy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFckMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHaEUsTUFBTSxPQUFPLG1CQUFtQjs7OztJQWdCOUIsWUFDVSxnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQWhCckMscUJBQWdCLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUM1QywwQkFBcUIsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ2pELHFCQUFnQixHQUFHLElBQUksYUFBYSxFQUFVLENBQUM7UUFDL0Msa0JBQWEsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ3pDLG1CQUFjLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUMxQyxzQkFBaUIsR0FBRyxJQUFJLGFBQWEsRUFBVyxDQUFDO1FBQ2pELG9CQUFlLEdBQUcsSUFBSSxhQUFhLEVBQVUsQ0FBQztRQUM5QyxrQkFBYSxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRCx1QkFBa0IsR0FBRyxJQUFJLGFBQWEsRUFBUyxDQUFDO1FBQ2hELHdCQUFtQixHQUFHLElBQUksYUFBYSxFQUFTLENBQUM7UUFDakQsK0JBQTBCLEdBQUcsSUFBSSxhQUFhLEVBQVcsQ0FBQztRQVEvRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFNBQVM7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTtZQUM1QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLElBQUk7UUFDVixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7Ozs7SUFFRCxtQkFBbUIsQ0FBQyxnQkFBZ0I7UUFDbEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0lBQzNDLENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsS0FBYztRQUNoQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsS0FBWTtRQUM5QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBRUQsbUJBQW1CLENBQUMsSUFBSTtRQUN0QixPQUFPLElBQUksS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDO0lBQ3RFLENBQUM7Ozs7O0lBRUQsMkJBQTJCLENBQUMsS0FBSztRQUMvQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0wsT0FBTyxLQUFLLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDM0M7SUFDSCxDQUFDOzs7WUFwREYsVUFBVTs7OztZQUZGLGdCQUFnQjs7OztJQUl2QiwrQ0FBbUQ7O0lBQ25ELG9EQUF3RDs7SUFDeEQsK0NBQXNEOztJQUN0RCw0Q0FBZ0Q7O0lBQ2hELDZDQUFpRDs7SUFDakQsZ0RBQXdEOztJQUN4RCw4Q0FBcUQ7O0lBQ3JELDRDQUEwRDs7SUFDMUQsaURBQXVEOztJQUN2RCxrREFBd0Q7O0lBQ3hELHlEQUFpRTs7SUFDakUsbUNBQW9COzs7OztJQUVwQixvQ0FBc0I7Ozs7O0lBR3BCLCtDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgU2lnbmF0dXJlU2VydmljZSB9IGZyb20gJy4vZW52ZWxvcGUtc2lnbmF0dXJlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRW52ZWxvcGVWaWV3U2VydmljZSB7XG4gIHB1YmxpYyByZWNpcGllbnRTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMganVtcENvb3JkaW5hdGVTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMgZmllbGRUeXBlU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZz4oKTtcbiAgcHVibGljIHBkZlVybFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBwZGZCbG9iU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcbiAgcHVibGljIHRvZ2dsZU5leHRTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgcHVibGljIHZpZXdNb2RlU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PHN0cmluZz4oKTtcbiAgcHVibGljIGFncmVlZFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxLCA1MDApO1xuICBwdWJsaWMgYXR0YWNobWVudHNTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55W10+KCk7XG4gIHB1YmxpYyBmb3JtVmFsaWRpdHlTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55W10+KCk7XG4gIHB1YmxpYyByZXF1ZXN0Rm9ybVZhbGlkaXR5U3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHB1YmxpYyBtb2RlOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSByTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2lnbmF0dXJlU2VydmljZTogU2lnbmF0dXJlU2VydmljZVxuICApIHtcbiAgICB0aGlzLnNpZ25hdHVyZVNlcnZpY2UuX3JOYW1lLnN1YnNjcmliZShyb2xlID0+IHtcbiAgICAgIHRoaXMuck5hbWUgPSByb2xlO1xuICAgIH0pO1xuICB9XG5cbiAgc2V0TW9kZShtb2RlKSB7XG4gICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICB0aGlzLnZpZXdNb2RlU3ViamVjdC5uZXh0KHRoaXMubW9kZSk7XG4gIH1cblxuICBzZXRTaWduYXR1cmVTZXJ2aWNlKHNpZ25hdHVyZVNlcnZpY2UpIHtcbiAgICB0aGlzLnNpZ25hdHVyZVNlcnZpY2UgPSBzaWduYXR1cmVTZXJ2aWNlO1xuICB9XG5cbiAgcmVxdWVzdEZvcm1WYWxpZGl0eSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMucmVxdWVzdEZvcm1WYWxpZGl0eVN1YmplY3QubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBzZXRGb3JtVmFsaWRpdHlEYXRhKHZhbHVlOiBhbnlbXSkge1xuICAgIHRoaXMuZm9ybVZhbGlkaXR5U3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgfVxuXG4gIGlmQmVsb25nc1RvUHJlcGFyZXIodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSAndGV4dGJveCcgfHwgdHlwZSA9PT0gJ2RhdGUnIHx8IHR5cGUgPT09ICdjaGVja2JveCc7XG4gIH1cblxuICBpZkJlbG9uZ3NUb0N1cnJlbnRSZWNpcGllbnQoZmllbGQpIHtcbiAgICBpZiAodGhpcy5tb2RlID09PSAncHJlcGFyZXZpZXcnKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZkJlbG9uZ3NUb1ByZXBhcmVyKGZpZWxkLmNvbnRyb2xUeXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpZWxkLnJlY2lwaWVudFJvbGUgPT09IHRoaXMuck5hbWU7XG4gICAgfVxuICB9XG59Il19