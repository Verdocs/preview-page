/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class BrowserToiTextService {
    /**
     * @return {?}
     */
    detectBrowser() {
        //noinspection TypeScriptUnresolvedVariable
        /** @type {?} */
        let isFirefox = false;
        if ('InstallTrigger' in window) {
            isFirefox = true;
        }
        /** @type {?} */
        const isOpera = (!!window['opr'] && !!window['opr'].addons) || !!window['opera'] || navigator.userAgent.indexOf(' OPR/') >= 0;
        /** @type {?} */
        const isSafari = /constructor/i.test(window['HTMLElement']) || ((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return p.toString() === "[object SafariRemoteNotification]"; }))(!window['safari'] || (window['safari'] && window['safari'].pushNotification));
        /** @type {?} */
        const isIE = /*@cc_on!@*/ false || !!document['documentMode'];
        /** @type {?} */
        const isEdge = !isIE && !!window['StyleMedia'];
        /** @type {?} */
        const isChrome = !!window['chrome'] && !!window['chrome'].webstore;
        /** @type {?} */
        const isBlink = (isChrome || isOpera) && !!window['CSS'];
        if (isOpera) {
            return 'opera';
        }
        else if (isFirefox) {
            return 'firefox';
        }
        else if (isIE) {
            return 'ie';
        }
        else if (isEdge) {
            return 'edge';
        }
        else if (isChrome) {
            return 'chrome';
        }
        else if (isBlink) {
            return 'blink';
        }
        else if (isSafari) {
            return 'safari';
        }
        return 'unknown';
    }
    /**
     * @return {?}
     */
    getLetterSpacing() {
        /** @type {?} */
        const browserType = this.detectBrowser();
        switch (browserType) {
            case 'opera':
                return -0.0018;
            case 'firefox':
                return -0.23594210526315787;
            case 'ie':
                return -0.0019;
            case 'edge':
                return -0.0019;
            case 'chrome':
                return -0.0018;
            case 'safari':
                return -0.0018;
            case 'blink':
                return -0.0018;
            default:
                return -0.0018;
        }
    }
}
BrowserToiTextService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci10by1pVGV4dC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvZXNzZW50aWFscy8iLCJzb3VyY2VzIjpbImxpYi9idWlsZGVyL2Jyb3dzZXItdG8taVRleHQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNLE9BQU8scUJBQXFCOzs7O0lBQ2hDLGFBQWE7OztZQUVQLFNBQVMsR0FBRyxLQUFLO1FBQ3JCLElBQUksZ0JBQWdCLElBQUksTUFBTSxFQUFFO1lBQzlCLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDbEI7O2NBRUssT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzs7Y0FFdkgsUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOztjQUV0TixJQUFJLEdBQUcsWUFBWSxDQUFBLEtBQUssSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQzs7Y0FFdEQsTUFBTSxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDOztjQUV4QyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVE7O2NBRTVELE9BQU8sR0FBRyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUd4RCxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sT0FBTyxDQUFDO1NBQ2hCO2FBQU0sSUFBSSxTQUFTLEVBQUU7WUFDcEIsT0FBTyxTQUFTLENBQUM7U0FDbEI7YUFBTSxJQUFJLElBQUksRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTSxJQUFJLE1BQU0sRUFBRTtZQUNqQixPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU0sSUFBSSxRQUFRLEVBQUU7WUFDbkIsT0FBTyxRQUFRLENBQUM7U0FDakI7YUFBTSxJQUFJLE9BQU8sRUFBRTtZQUNsQixPQUFPLE9BQU8sQ0FBQTtTQUNmO2FBQU0sSUFBSSxRQUFRLEVBQUU7WUFDbkIsT0FBTyxRQUFRLENBQUE7U0FDaEI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDOzs7O0lBRUQsZ0JBQWdCOztjQUNSLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFO1FBQ3hDLFFBQVEsV0FBVyxFQUFFO1lBQ25CLEtBQUssT0FBTztnQkFDVixPQUFPLENBQUMsTUFBTSxDQUFDO1lBQ2pCLEtBQUssU0FBUztnQkFDWixPQUFPLENBQUMsbUJBQW1CLENBQUM7WUFDOUIsS0FBSyxJQUFJO2dCQUNQLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakIsS0FBSyxNQUFNO2dCQUNULE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakIsS0FBSyxPQUFPO2dCQUNWLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakI7Z0JBQ0UsT0FBTyxDQUFDLE1BQU0sQ0FBQztTQUNsQjtJQUNILENBQUM7OztZQTVERixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnJvd3NlclRvaVRleHRTZXJ2aWNlIHtcbiAgZGV0ZWN0QnJvd3NlcigpIHtcbiAgICAvL25vaW5zcGVjdGlvbiBUeXBlU2NyaXB0VW5yZXNvbHZlZFZhcmlhYmxlXG4gICAgbGV0IGlzRmlyZWZveCA9IGZhbHNlO1xuICAgIGlmICgnSW5zdGFsbFRyaWdnZXInIGluIHdpbmRvdykge1xuICAgICAgaXNGaXJlZm94ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc09wZXJhID0gKCEhd2luZG93WydvcHInXSAmJiAhIXdpbmRvd1snb3ByJ10uYWRkb25zKSB8fCAhIXdpbmRvd1snb3BlcmEnXSB8fCBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJyBPUFIvJykgPj0gMDtcblxuICAgIGNvbnN0IGlzU2FmYXJpID0gL2NvbnN0cnVjdG9yL2kudGVzdCh3aW5kb3dbJ0hUTUxFbGVtZW50J10pIHx8IChmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50b1N0cmluZygpID09PSBcIltvYmplY3QgU2FmYXJpUmVtb3RlTm90aWZpY2F0aW9uXVwiOyB9KSghd2luZG93WydzYWZhcmknXSB8fCAod2luZG93WydzYWZhcmknXSAmJiB3aW5kb3dbJ3NhZmFyaSddLnB1c2hOb3RpZmljYXRpb24pKTtcblxuICAgIGNvbnN0IGlzSUUgPSAvKkBjY19vbiFAKi9mYWxzZSB8fCAhIWRvY3VtZW50Wydkb2N1bWVudE1vZGUnXTtcblxuICAgIGNvbnN0IGlzRWRnZSA9ICFpc0lFICYmICEhd2luZG93WydTdHlsZU1lZGlhJ107XG5cbiAgICBjb25zdCBpc0Nocm9tZSA9ICEhd2luZG93WydjaHJvbWUnXSAmJiAhIXdpbmRvd1snY2hyb21lJ10ud2Vic3RvcmU7XG5cbiAgICBjb25zdCBpc0JsaW5rID0gKGlzQ2hyb21lIHx8IGlzT3BlcmEpICYmICEhd2luZG93WydDU1MnXTtcblxuXG4gICAgaWYgKGlzT3BlcmEpIHtcbiAgICAgIHJldHVybiAnb3BlcmEnO1xuICAgIH0gZWxzZSBpZiAoaXNGaXJlZm94KSB7XG4gICAgICByZXR1cm4gJ2ZpcmVmb3gnO1xuICAgIH0gZWxzZSBpZiAoaXNJRSkge1xuICAgICAgcmV0dXJuICdpZSc7XG4gICAgfSBlbHNlIGlmIChpc0VkZ2UpIHtcbiAgICAgIHJldHVybiAnZWRnZSc7XG4gICAgfSBlbHNlIGlmIChpc0Nocm9tZSkge1xuICAgICAgcmV0dXJuICdjaHJvbWUnO1xuICAgIH0gZWxzZSBpZiAoaXNCbGluaykge1xuICAgICAgcmV0dXJuICdibGluaydcbiAgICB9IGVsc2UgaWYgKGlzU2FmYXJpKSB7XG4gICAgICByZXR1cm4gJ3NhZmFyaSdcbiAgICB9XG4gICAgcmV0dXJuICd1bmtub3duJztcbiAgfVxuXG4gIGdldExldHRlclNwYWNpbmcoKSB7XG4gICAgY29uc3QgYnJvd3NlclR5cGUgPSB0aGlzLmRldGVjdEJyb3dzZXIoKTtcbiAgICBzd2l0Y2ggKGJyb3dzZXJUeXBlKSB7XG4gICAgICBjYXNlICdvcGVyYSc6XG4gICAgICAgIHJldHVybiAtMC4wMDE4O1xuICAgICAgY2FzZSAnZmlyZWZveCc6XG4gICAgICAgIHJldHVybiAtMC4yMzU5NDIxMDUyNjMxNTc4NztcbiAgICAgIGNhc2UgJ2llJzpcbiAgICAgICAgcmV0dXJuIC0wLjAwMTk7XG4gICAgICBjYXNlICdlZGdlJzpcbiAgICAgICAgcmV0dXJuIC0wLjAwMTk7XG4gICAgICBjYXNlICdjaHJvbWUnOlxuICAgICAgICByZXR1cm4gLTAuMDAxODtcbiAgICAgIGNhc2UgJ3NhZmFyaSc6XG4gICAgICAgIHJldHVybiAtMC4wMDE4O1xuICAgICAgY2FzZSAnYmxpbmsnOlxuICAgICAgICByZXR1cm4gLTAuMDAxODtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAtMC4wMDE4O1xuICAgIH1cbiAgfVxufVxuIl19