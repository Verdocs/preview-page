/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DynamicField } from '../models/dynamic-field.model';
import { findIndex } from 'lodash';
/**
 * @param {?} fields
 * @param {?} mode
 * @return {?}
 */
export function buildFields(fields, mode) {
    /*
       * PDF 72 DPI
       * Width: 612px
       * Height: 792px
       * */
    /*
         * PDF 72 DPI
         * Width: 612px
         * Height: 792px
         * */
    /** @type {?} */
    const _fields = [];
    /** @type {?} */
    let order = 0;
    /** @type {?} */
    let role;
    switch (mode) {
        case 'signerview':
        case 'prepareview':
        case 'preview':
            role = 'recipient_role';
            break;
        case 'liveview':
            role = 'role_name';
            break;
        default:
            role = 'recipient_role';
            break;
    }
    /** @type {?} */
    let setting = 'setting';
    for (const fieldIndex in fields) {
        if (fields.hasOwnProperty(fieldIndex) && fields[fieldIndex]) {
            /** @type {?} */
            const field = fields[fieldIndex];
            /** @type {?} */
            let keyNameSuffix = '';
            if (!!field['settings']) {
                setting = 'settings';
            }
            ;
            switch (field.type.toLowerCase()) {
                case 'attachment':
                case 'payment':
                    field[setting]['width'] = 24;
                    field[setting]['height'] = 24;
                    break;
                case 'checkbox':
                case 'checkbox_group':
                case 'radio_button_group':
                    field[setting]['width'] = 13.5;
                    field[setting]['height'] = 13.5;
                    keyNameSuffix = field['optionId'] ? '-' + field['optionId'] : '';
                    break;
                case 'signature':
                    field[setting]['width'] = 82.63636363636;
                    field[setting]['height'] = 36;
                    break;
                case 'initial':
                    field[setting]['width'] = 82.63636363636;
                    field[setting]['height'] = 36;
                    break;
                default:
                    break;
            }
            /** @type {?} */
            const fieldValues = new DynamicField({
                key: field.name + keyNameSuffix,
                value: field[setting]['result'] || '',
                required: field.required,
                controlType: field.type,
                order: order++,
                validator: field.validator,
                showCounter: false,
                prepared: field.prepared || false,
                recipientRole: field[role],
                field_name: field.name,
                dirty: false
            });
            switch (field.type) {
                case 'attachment':
                    fieldValues.value = field[setting]['name'] ? field[setting]['name'] : '';
                    break;
                case 'checkbox':
                    fieldValues.value = field[setting]['result'] === false ? false : true;
                    break;
                case 'payment':
                    fieldValues.value = field[setting]['payment_id'] ? field[setting]['payment_id'] : '';
                    break;
                case 'checkbox_group':
                    fieldValues.value = field[setting]['checked'];
                    if (field.required || field[setting]['maximum_checked'] > 0) {
                        fieldValues['min_checked'] = field[setting]['minimum_checked'];
                        fieldValues['max_checked'] = field[setting]['maximum_checked'];
                    }
                    break;
                case 'radio_button_group':
                    fieldValues.value = field[setting]['selected'];
                    break;
                case 'dropdown':
                    fieldValues.value = field[setting]['value'];
                    fieldValues['options'] = field[setting]['options'];
                    break;
                default:
                    break;
            }
            ;
            if (field[setting]['url']) {
                fieldValues['url'] = field[setting]['url'];
                fieldValues['name'] = field[setting]['name'];
                fieldValues['value'] = field[setting]['name'];
            }
            if (fields[fieldIndex]) {
                _fields[fieldIndex] = fieldValues;
            }
        }
    }
    return _fields;
}
/**
 * @param {?} fields
 * @param {?} pageNum
 * @return {?}
 */
export function getFieldsMap(fields, pageNum) {
    /** @type {?} */
    let fieldsMap = {};
    for (const fieldIndex in fields) {
        if (fields.hasOwnProperty(fieldIndex) && fields[fieldIndex]) {
            /** @type {?} */
            const field = fields[fieldIndex];
            /** @type {?} */
            let keyNameSuffix = '';
            switch (field.type.toLowerCase()) {
                case 'checkbox':
                case 'checkbox_group':
                case 'radio_button_group':
                    keyNameSuffix = field['optionId'] ? '-' + field['optionId'] : '';
                    break;
                default:
                    break;
            }
            fieldsMap[field.name + keyNameSuffix] = {
                field_name: field.name,
                keyNameSuffix: field['optionId'] ? '-' + field['optionId'] : null,
                option_id: field['optionId'],
                field_pageNum: pageNum,
                field_field_index: fieldIndex
            };
        }
    }
    return fieldsMap;
}
/**
 * @param {?} fields
 * @param {?} _fields
 * @param {?} mode
 * @param {?} browserType
 * @return {?}
 */
export function updateElementStyles(fields, _fields, mode, browserType) {
    if (fields && _fields && fields.length === _fields.length) {
        for (let x = 0; x < _fields.length; x++) {
            /** @type {?} */
            let fieldIndex = findIndex(fields, { name: _fields[x].field_name });
            if (fieldIndex >= 0) {
                _fields[x]['initialStyle'] = getInputStyle(fields[fieldIndex], mode, browserType);
                if (_fields[x].controlType.toLowerCase() === 'checkbox' || _fields[x].controlType.toLowerCase() === 'checkbox_group' || _fields[x].controlType.toLowerCase() === 'radio_button_group') {
                    _fields[x]['checkboxStyle'] = generateCheckboxLabel(fields[fieldIndex].required);
                }
            }
        }
    }
    return _fields;
}
/**
 * @param {?} field
 * @param {?} mode
 * @param {?} browserType
 * @return {?}
 */
export function getInputStyle(field, mode, browserType) {
    /** @type {?} */
    const fontSize = 11;
    /** @type {?} */
    let setting = 'setting';
    if (!!field['settings']) {
        setting = 'settings';
    }
    /** @type {?} */
    const inputStyle = {
        'height': '100%',
        'width': '100%',
        'background': 'none'
    };
    if ((field[setting] && field[setting].font_size) || field.type === 'date' || field.type === 'signature' || field.type === 'initial' || field.type === 'timestamp') {
        inputStyle['fontSize'] = fontSize + 'px';
        inputStyle['letterSpacing'] = '.3px !important';
    }
    if (field.type === 'dropdown') {
        inputStyle['fontSize'] = '10.8px';
        delete inputStyle.background;
    }
    if (field.type === 'textbox') {
        inputStyle['fontSize'] = fontSize + 'px';
        inputStyle['letterSpacing'] = getLetterSpacing(browserType) + 'px';
    }
    if (field['required']) {
        inputStyle['border'] = '1px solid #cc0000';
    }
    if (field['prepared'] && field['prepared'] === true && mode !== 'prepareview') {
        inputStyle['visibility'] = 'hidden';
    }
    if (field[setting] && field[setting].color) {
        inputStyle['color'] = field[setting].color;
    }
    if (field[setting] && field[setting].upperCase) {
        inputStyle['textTransform'] = 'uppercase';
    }
    if (field[setting] && field[setting].leading > 0) {
        inputStyle['lineHeight'] = `${rescale(1, field[setting].leading + .5)}px`;
    }
    else if (field.leading && field.leading > 0) {
        inputStyle['lineHeight'] = `${rescale(1, field.leading + .5)}px`;
    }
    return inputStyle;
}
/**
 * @param {?} required
 * @return {?}
 */
export function generateCheckboxLabel(required) {
    /** @type {?} */
    const labelStyle = {
        position: 'absolute',
        top: 0,
        left: 0,
        cursor: 'pointer',
        height: `13.5px`,
        width: `13.5px`,
        backgroundColor: 'transparent',
        border: '1px solid #777'
    };
    if (required === true) {
        labelStyle['boxShadow'] = '0 0 0 1px #cc0000';
    }
    return labelStyle;
}
;
/**
 * @param {?} browserType
 * @return {?}
 */
export function getLetterSpacing(browserType) {
    switch (browserType) {
        case 'opera':
            return -0.0018;
        case 'firefox':
            return -0.23594210526315787;
        case 'ie':
            return -0.0019;
        case 'edge':
            return -0.0019;
        case 'chrome':
            return -0.0018;
        case 'safari':
            return -0.0018;
        case 'blink':
            return -0.0018;
        default:
            return -0.0018;
    }
}
/**
 * @param {?} r
 * @param {?} n
 * @return {?}
 */
export function rescale(r, n) {
    return r * n;
}
/**
 * @param {?} fields
 * @return {?}
 */
export function prepareFieldsForSigner(fields) {
    /** @type {?} */
    let fieldsForCurrentSigner = new Array(fields.length);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLWZpZWxkcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL2Vzc2VudGlhbHMvIiwic291cmNlcyI6WyJsaWIvZnVuY3Rpb25zL3ZpZXdlci1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7Ozs7QUFFbkMsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSTtJQUN0Qzs7OztXQUlPOzs7Ozs7O1VBRUQsT0FBTyxHQUFHLEVBQUU7O1FBQ2QsS0FBSyxHQUFHLENBQUM7O1FBQ1QsSUFBSTtJQUNSLFFBQVEsSUFBSSxFQUFFO1FBQ1osS0FBSyxZQUFZLENBQUM7UUFDbEIsS0FBSyxhQUFhLENBQUM7UUFDbkIsS0FBSyxTQUFTO1lBQ1osSUFBSSxHQUFHLGdCQUFnQixDQUFDO1lBQ3hCLE1BQU07UUFDUixLQUFLLFVBQVU7WUFDYixJQUFJLEdBQUcsV0FBVyxDQUFDO1lBQ25CLE1BQU07UUFDUjtZQUNFLElBQUksR0FBRyxnQkFBZ0IsQ0FBQztZQUN4QixNQUFNO0tBQ1Q7O1FBQ0csT0FBTyxHQUFHLFNBQVM7SUFFdkIsS0FBSyxNQUFNLFVBQVUsSUFBSSxNQUFNLEVBQUU7UUFDL0IsSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTs7a0JBQ3JELEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDOztnQkFDNUIsYUFBYSxHQUFHLEVBQUU7WUFDdEIsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUN2QixPQUFPLEdBQUcsVUFBVSxDQUFBO2FBQ3JCO1lBQUEsQ0FBQztZQUNGLFFBQVEsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDaEMsS0FBSyxZQUFZLENBQUM7Z0JBQ2xCLEtBQUssU0FBUztvQkFDWixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUM3QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUM5QixNQUFNO2dCQUNSLEtBQUssVUFBVSxDQUFDO2dCQUNoQixLQUFLLGdCQUFnQixDQUFDO2dCQUN0QixLQUFLLG9CQUFvQjtvQkFDdkIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFDaEMsYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUNqRSxNQUFNO2dCQUNSLEtBQUssV0FBVztvQkFDZCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsY0FBYyxDQUFDO29CQUN6QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUM5QixNQUFNO2dCQUNSLEtBQUssU0FBUztvQkFDWixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsY0FBYyxDQUFDO29CQUN6QyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQUM5QixNQUFNO2dCQUNSO29CQUNFLE1BQU07YUFDVDs7a0JBRUssV0FBVyxHQUFHLElBQUksWUFBWSxDQUFDO2dCQUNuQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxhQUFhO2dCQUMvQixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJO2dCQUN2QixLQUFLLEVBQUUsS0FBSyxFQUFFO2dCQUNkLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztnQkFDMUIsV0FBVyxFQUFFLEtBQUs7Z0JBQ2xCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUs7Z0JBQ2pDLGFBQWEsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUMxQixVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ3RCLEtBQUssRUFBRSxLQUFLO2FBQ2IsQ0FBQztZQUVGLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDbEIsS0FBSyxZQUFZO29CQUNmLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDekUsTUFBTTtnQkFDUixLQUFLLFVBQVU7b0JBQ2IsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDdEUsTUFBTTtnQkFDUixLQUFLLFNBQVM7b0JBQ1osV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUNyRixNQUFNO2dCQUNSLEtBQUssZ0JBQWdCO29CQUNuQixXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsRUFBRTt3QkFDM0QsV0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO3dCQUMvRCxXQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUM7cUJBQ2hFO29CQUNELE1BQU07Z0JBQ1IsS0FBSyxvQkFBb0I7b0JBQ3ZCLFdBQVcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUMvQyxNQUFNO2dCQUNSLEtBQUssVUFBVTtvQkFDYixXQUFXLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDNUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDbkQsTUFBTTtnQkFDUjtvQkFDRSxNQUFNO2FBQ1Q7WUFBQSxDQUFDO1lBRUYsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3pCLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNDLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzdDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDL0M7WUFFRCxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUNuQztTQUNGO0tBQ0Y7SUFDRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFlOztRQUM5QyxTQUFTLEdBQUcsRUFBRTtJQUNsQixLQUFLLE1BQU0sVUFBVSxJQUFJLE1BQU0sRUFBRTtRQUMvQixJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFOztrQkFDckQsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7O2dCQUM1QixhQUFhLEdBQUcsRUFBRTtZQUN0QixRQUFRLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQ2hDLEtBQUssVUFBVSxDQUFDO2dCQUNoQixLQUFLLGdCQUFnQixDQUFDO2dCQUN0QixLQUFLLG9CQUFvQjtvQkFDdkIsYUFBYSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUNqRSxNQUFNO2dCQUNSO29CQUNFLE1BQU07YUFDVDtZQUNELFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLGFBQWEsQ0FBQyxHQUFHO2dCQUN0QyxVQUFVLEVBQUUsS0FBSyxDQUFDLElBQUk7Z0JBQ3RCLGFBQWEsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Z0JBQ2pFLFNBQVMsRUFBRSxLQUFLLENBQUMsVUFBVSxDQUFDO2dCQUM1QixhQUFhLEVBQUUsT0FBTztnQkFDdEIsaUJBQWlCLEVBQUUsVUFBVTthQUM5QixDQUFBO1NBQ0Y7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7Ozs7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVc7SUFDcEUsSUFBSSxNQUFNLElBQUksT0FBTyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLE1BQU0sRUFBRTtRQUN6RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7Z0JBQ25DLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNuRSxJQUFJLFVBQVUsSUFBSSxDQUFDLEVBQUU7Z0JBQ25CLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDbEYsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLFVBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxLQUFLLGdCQUFnQixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLEtBQUssb0JBQW9CLEVBQUU7b0JBQ3JMLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ2xGO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxXQUFXOztVQUM5QyxRQUFRLEdBQUcsRUFBRTs7UUFDZixPQUFPLEdBQUcsU0FBUztJQUN2QixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDdkIsT0FBTyxHQUFHLFVBQVUsQ0FBQztLQUN0Qjs7VUFDSyxVQUFVLEdBQUc7UUFDakIsUUFBUSxFQUFFLE1BQU07UUFDaEIsT0FBTyxFQUFFLE1BQU07UUFDZixZQUFZLEVBQUUsTUFBTTtLQUNyQjtJQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssV0FBVyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUFFO1FBQ2pLLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLFVBQVUsQ0FBQyxlQUFlLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztLQUNqRDtJQUVELElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7UUFDN0IsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUNsQyxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUM7S0FDOUI7SUFFRCxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1FBQzVCLFVBQVUsQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLFVBQVUsQ0FBQyxlQUFlLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxJQUFJLENBQUM7S0FDcEU7SUFDRCxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNyQixVQUFVLENBQUMsUUFBUSxDQUFDLEdBQUcsbUJBQW1CLENBQUM7S0FDNUM7SUFDRCxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxhQUFhLEVBQUU7UUFDN0UsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLFFBQVEsQ0FBQztLQUNyQztJQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUU7UUFDMUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUM7S0FDNUM7SUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFO1FBQzlDLFVBQVUsQ0FBQyxlQUFlLENBQUMsR0FBRyxXQUFXLENBQUM7S0FDM0M7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUNoRCxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztLQUMzRTtTQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRTtRQUM3QyxVQUFVLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztLQUNsRTtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFFBQVE7O1VBQ3RDLFVBQVUsR0FBRztRQUNqQixRQUFRLEVBQUUsVUFBVTtRQUNwQixHQUFHLEVBQUUsQ0FBQztRQUNOLElBQUksRUFBRSxDQUFDO1FBQ1AsTUFBTSxFQUFFLFNBQVM7UUFDakIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLFFBQVE7UUFDZixlQUFlLEVBQUUsYUFBYTtRQUM5QixNQUFNLEVBQUUsZ0JBQWdCO0tBQ3pCO0lBQ0QsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1FBQ3JCLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxtQkFBbUIsQ0FBQztLQUMvQztJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUM7QUFBQSxDQUFDOzs7OztBQUVGLE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxXQUFXO0lBQzFDLFFBQVEsV0FBVyxFQUFFO1FBQ25CLEtBQUssT0FBTztZQUNWLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDakIsS0FBSyxTQUFTO1lBQ1osT0FBTyxDQUFDLG1CQUFtQixDQUFDO1FBQzlCLEtBQUssSUFBSTtZQUNQLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDakIsS0FBSyxNQUFNO1lBQ1QsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNqQixLQUFLLFFBQVE7WUFDWCxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ2pCLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDakIsS0FBSyxPQUFPO1lBQ1YsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNqQjtZQUNFLE9BQU8sQ0FBQyxNQUFNLENBQUM7S0FDbEI7QUFDSCxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLE1BQU07O1FBQ3ZDLHNCQUFzQixHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtaWNGaWVsZCB9IGZyb20gJy4uL21vZGVscy9keW5hbWljLWZpZWxkLm1vZGVsJztcbmltcG9ydCB7IGZpbmRJbmRleCB9IGZyb20gJ2xvZGFzaCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEZpZWxkcyhmaWVsZHMsIG1vZGUpIHtcbiAgLypcbiAgICAgKiBQREYgNzIgRFBJXG4gICAgICogV2lkdGg6IDYxMnB4XG4gICAgICogSGVpZ2h0OiA3OTJweFxuICAgICAqICovXG5cbiAgY29uc3QgX2ZpZWxkcyA9IFtdO1xuICBsZXQgb3JkZXIgPSAwO1xuICBsZXQgcm9sZTtcbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSAnc2lnbmVydmlldyc6XG4gICAgY2FzZSAncHJlcGFyZXZpZXcnOlxuICAgIGNhc2UgJ3ByZXZpZXcnOlxuICAgICAgcm9sZSA9ICdyZWNpcGllbnRfcm9sZSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdsaXZldmlldyc6XG4gICAgICByb2xlID0gJ3JvbGVfbmFtZSc7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcm9sZSA9ICdyZWNpcGllbnRfcm9sZSc7XG4gICAgICBicmVhaztcbiAgfVxuICBsZXQgc2V0dGluZyA9ICdzZXR0aW5nJztcblxuICBmb3IgKGNvbnN0IGZpZWxkSW5kZXggaW4gZmllbGRzKSB7XG4gICAgaWYgKGZpZWxkcy5oYXNPd25Qcm9wZXJ0eShmaWVsZEluZGV4KSAmJiBmaWVsZHNbZmllbGRJbmRleF0pIHtcbiAgICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW2ZpZWxkSW5kZXhdO1xuICAgICAgbGV0IGtleU5hbWVTdWZmaXggPSAnJztcbiAgICAgIGlmICghIWZpZWxkWydzZXR0aW5ncyddKSB7XG4gICAgICAgIHNldHRpbmcgPSAnc2V0dGluZ3MnXG4gICAgICB9O1xuICAgICAgc3dpdGNoIChmaWVsZC50eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgY2FzZSAnYXR0YWNobWVudCc6XG4gICAgICAgIGNhc2UgJ3BheW1lbnQnOlxuICAgICAgICAgIGZpZWxkW3NldHRpbmddWyd3aWR0aCddID0gMjQ7XG4gICAgICAgICAgZmllbGRbc2V0dGluZ11bJ2hlaWdodCddID0gMjQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgICAgICBjYXNlICdyYWRpb19idXR0b25fZ3JvdXAnOlxuICAgICAgICAgIGZpZWxkW3NldHRpbmddWyd3aWR0aCddID0gMTMuNTtcbiAgICAgICAgICBmaWVsZFtzZXR0aW5nXVsnaGVpZ2h0J10gPSAxMy41O1xuICAgICAgICAgIGtleU5hbWVTdWZmaXggPSBmaWVsZFsnb3B0aW9uSWQnXSA/ICctJyArIGZpZWxkWydvcHRpb25JZCddIDogJyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NpZ25hdHVyZSc6XG4gICAgICAgICAgZmllbGRbc2V0dGluZ11bJ3dpZHRoJ10gPSA4Mi42MzYzNjM2MzYzNjtcbiAgICAgICAgICBmaWVsZFtzZXR0aW5nXVsnaGVpZ2h0J10gPSAzNjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaW5pdGlhbCc6XG4gICAgICAgICAgZmllbGRbc2V0dGluZ11bJ3dpZHRoJ10gPSA4Mi42MzYzNjM2MzYzNjtcbiAgICAgICAgICBmaWVsZFtzZXR0aW5nXVsnaGVpZ2h0J10gPSAzNjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmllbGRWYWx1ZXMgPSBuZXcgRHluYW1pY0ZpZWxkKHtcbiAgICAgICAga2V5OiBmaWVsZC5uYW1lICsga2V5TmFtZVN1ZmZpeCxcbiAgICAgICAgdmFsdWU6IGZpZWxkW3NldHRpbmddWydyZXN1bHQnXSB8fCAnJyxcbiAgICAgICAgcmVxdWlyZWQ6IGZpZWxkLnJlcXVpcmVkLFxuICAgICAgICBjb250cm9sVHlwZTogZmllbGQudHlwZSxcbiAgICAgICAgb3JkZXI6IG9yZGVyKyssXG4gICAgICAgIHZhbGlkYXRvcjogZmllbGQudmFsaWRhdG9yLFxuICAgICAgICBzaG93Q291bnRlcjogZmFsc2UsXG4gICAgICAgIHByZXBhcmVkOiBmaWVsZC5wcmVwYXJlZCB8fCBmYWxzZSxcbiAgICAgICAgcmVjaXBpZW50Um9sZTogZmllbGRbcm9sZV0sXG4gICAgICAgIGZpZWxkX25hbWU6IGZpZWxkLm5hbWUsXG4gICAgICAgIGRpcnR5OiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICBjYXNlICdhdHRhY2htZW50JzpcbiAgICAgICAgICBmaWVsZFZhbHVlcy52YWx1ZSA9IGZpZWxkW3NldHRpbmddWyduYW1lJ10gPyBmaWVsZFtzZXR0aW5nXVsnbmFtZSddIDogJyc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NoZWNrYm94JzpcbiAgICAgICAgICBmaWVsZFZhbHVlcy52YWx1ZSA9IGZpZWxkW3NldHRpbmddWydyZXN1bHQnXSA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BheW1lbnQnOlxuICAgICAgICAgIGZpZWxkVmFsdWVzLnZhbHVlID0gZmllbGRbc2V0dGluZ11bJ3BheW1lbnRfaWQnXSA/IGZpZWxkW3NldHRpbmddWydwYXltZW50X2lkJ10gOiAnJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2hlY2tib3hfZ3JvdXAnOlxuICAgICAgICAgIGZpZWxkVmFsdWVzLnZhbHVlID0gZmllbGRbc2V0dGluZ11bJ2NoZWNrZWQnXTtcbiAgICAgICAgICBpZiAoZmllbGQucmVxdWlyZWQgfHwgZmllbGRbc2V0dGluZ11bJ21heGltdW1fY2hlY2tlZCddID4gMCkge1xuICAgICAgICAgICAgZmllbGRWYWx1ZXNbJ21pbl9jaGVja2VkJ10gPSBmaWVsZFtzZXR0aW5nXVsnbWluaW11bV9jaGVja2VkJ107XG4gICAgICAgICAgICBmaWVsZFZhbHVlc1snbWF4X2NoZWNrZWQnXSA9IGZpZWxkW3NldHRpbmddWydtYXhpbXVtX2NoZWNrZWQnXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JhZGlvX2J1dHRvbl9ncm91cCc6XG4gICAgICAgICAgZmllbGRWYWx1ZXMudmFsdWUgPSBmaWVsZFtzZXR0aW5nXVsnc2VsZWN0ZWQnXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZHJvcGRvd24nOlxuICAgICAgICAgIGZpZWxkVmFsdWVzLnZhbHVlID0gZmllbGRbc2V0dGluZ11bJ3ZhbHVlJ107XG4gICAgICAgICAgZmllbGRWYWx1ZXNbJ29wdGlvbnMnXSA9IGZpZWxkW3NldHRpbmddWydvcHRpb25zJ107XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9O1xuXG4gICAgICBpZiAoZmllbGRbc2V0dGluZ11bJ3VybCddKSB7XG4gICAgICAgIGZpZWxkVmFsdWVzWyd1cmwnXSA9IGZpZWxkW3NldHRpbmddWyd1cmwnXTtcbiAgICAgICAgZmllbGRWYWx1ZXNbJ25hbWUnXSA9IGZpZWxkW3NldHRpbmddWyduYW1lJ107XG4gICAgICAgIGZpZWxkVmFsdWVzWyd2YWx1ZSddID0gZmllbGRbc2V0dGluZ11bJ25hbWUnXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkc1tmaWVsZEluZGV4XSkge1xuICAgICAgICBfZmllbGRzW2ZpZWxkSW5kZXhdID0gZmllbGRWYWx1ZXM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBfZmllbGRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RmllbGRzTWFwKGZpZWxkcywgcGFnZU51bTogbnVtYmVyKSB7XG4gIGxldCBmaWVsZHNNYXAgPSB7fTtcbiAgZm9yIChjb25zdCBmaWVsZEluZGV4IGluIGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGRJbmRleCkgJiYgZmllbGRzW2ZpZWxkSW5kZXhdKSB7XG4gICAgICBjb25zdCBmaWVsZCA9IGZpZWxkc1tmaWVsZEluZGV4XTtcbiAgICAgIGxldCBrZXlOYW1lU3VmZml4ID0gJyc7XG4gICAgICBzd2l0Y2ggKGZpZWxkLnR5cGUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIGNhc2UgJ2NoZWNrYm94X2dyb3VwJzpcbiAgICAgICAgY2FzZSAncmFkaW9fYnV0dG9uX2dyb3VwJzpcbiAgICAgICAgICBrZXlOYW1lU3VmZml4ID0gZmllbGRbJ29wdGlvbklkJ10gPyAnLScgKyBmaWVsZFsnb3B0aW9uSWQnXSA6ICcnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZmllbGRzTWFwW2ZpZWxkLm5hbWUgKyBrZXlOYW1lU3VmZml4XSA9IHtcbiAgICAgICAgZmllbGRfbmFtZTogZmllbGQubmFtZSxcbiAgICAgICAga2V5TmFtZVN1ZmZpeDogZmllbGRbJ29wdGlvbklkJ10gPyAnLScgKyBmaWVsZFsnb3B0aW9uSWQnXSA6IG51bGwsXG4gICAgICAgIG9wdGlvbl9pZDogZmllbGRbJ29wdGlvbklkJ10sXG4gICAgICAgIGZpZWxkX3BhZ2VOdW06IHBhZ2VOdW0sXG4gICAgICAgIGZpZWxkX2ZpZWxkX2luZGV4OiBmaWVsZEluZGV4XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBmaWVsZHNNYXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFbGVtZW50U3R5bGVzKGZpZWxkcywgX2ZpZWxkcywgbW9kZSwgYnJvd3NlclR5cGUpIHtcbiAgaWYgKGZpZWxkcyAmJiBfZmllbGRzICYmIGZpZWxkcy5sZW5ndGggPT09IF9maWVsZHMubGVuZ3RoKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBfZmllbGRzLmxlbmd0aDsgeCsrKSB7XG4gICAgICBsZXQgZmllbGRJbmRleCA9IGZpbmRJbmRleChmaWVsZHMsIHsgbmFtZTogX2ZpZWxkc1t4XS5maWVsZF9uYW1lIH0pO1xuICAgICAgaWYgKGZpZWxkSW5kZXggPj0gMCkge1xuICAgICAgICBfZmllbGRzW3hdWydpbml0aWFsU3R5bGUnXSA9IGdldElucHV0U3R5bGUoZmllbGRzW2ZpZWxkSW5kZXhdLCBtb2RlLCBicm93c2VyVHlwZSk7XG4gICAgICAgIGlmIChfZmllbGRzW3hdLmNvbnRyb2xUeXBlLnRvTG93ZXJDYXNlKCkgPT09ICdjaGVja2JveCcgfHwgX2ZpZWxkc1t4XS5jb250cm9sVHlwZS50b0xvd2VyQ2FzZSgpID09PSAnY2hlY2tib3hfZ3JvdXAnIHx8IF9maWVsZHNbeF0uY29udHJvbFR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3JhZGlvX2J1dHRvbl9ncm91cCcpIHtcbiAgICAgICAgICBfZmllbGRzW3hdWydjaGVja2JveFN0eWxlJ10gPSBnZW5lcmF0ZUNoZWNrYm94TGFiZWwoZmllbGRzW2ZpZWxkSW5kZXhdLnJlcXVpcmVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gX2ZpZWxkcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElucHV0U3R5bGUoZmllbGQsIG1vZGUsIGJyb3dzZXJUeXBlKSB7XG4gIGNvbnN0IGZvbnRTaXplID0gMTE7XG4gIGxldCBzZXR0aW5nID0gJ3NldHRpbmcnO1xuICBpZiAoISFmaWVsZFsnc2V0dGluZ3MnXSkge1xuICAgIHNldHRpbmcgPSAnc2V0dGluZ3MnO1xuICB9XG4gIGNvbnN0IGlucHV0U3R5bGUgPSB7XG4gICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgJ2JhY2tncm91bmQnOiAnbm9uZSdcbiAgfTtcbiAgaWYgKChmaWVsZFtzZXR0aW5nXSAmJiBmaWVsZFtzZXR0aW5nXS5mb250X3NpemUpIHx8IGZpZWxkLnR5cGUgPT09ICdkYXRlJyB8fCBmaWVsZC50eXBlID09PSAnc2lnbmF0dXJlJyB8fCBmaWVsZC50eXBlID09PSAnaW5pdGlhbCcgfHwgZmllbGQudHlwZSA9PT0gJ3RpbWVzdGFtcCcpIHtcbiAgICBpbnB1dFN0eWxlWydmb250U2l6ZSddID0gZm9udFNpemUgKyAncHgnO1xuICAgIGlucHV0U3R5bGVbJ2xldHRlclNwYWNpbmcnXSA9ICcuM3B4ICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgaWYgKGZpZWxkLnR5cGUgPT09ICdkcm9wZG93bicpIHtcbiAgICBpbnB1dFN0eWxlWydmb250U2l6ZSddID0gJzEwLjhweCc7XG4gICAgZGVsZXRlIGlucHV0U3R5bGUuYmFja2dyb3VuZDtcbiAgfVxuXG4gIGlmIChmaWVsZC50eXBlID09PSAndGV4dGJveCcpIHtcbiAgICBpbnB1dFN0eWxlWydmb250U2l6ZSddID0gZm9udFNpemUgKyAncHgnO1xuICAgIGlucHV0U3R5bGVbJ2xldHRlclNwYWNpbmcnXSA9IGdldExldHRlclNwYWNpbmcoYnJvd3NlclR5cGUpICsgJ3B4JztcbiAgfVxuICBpZiAoZmllbGRbJ3JlcXVpcmVkJ10pIHtcbiAgICBpbnB1dFN0eWxlWydib3JkZXInXSA9ICcxcHggc29saWQgI2NjMDAwMCc7XG4gIH1cbiAgaWYgKGZpZWxkWydwcmVwYXJlZCddICYmIGZpZWxkWydwcmVwYXJlZCddID09PSB0cnVlICYmIG1vZGUgIT09ICdwcmVwYXJldmlldycpIHtcbiAgICBpbnB1dFN0eWxlWyd2aXNpYmlsaXR5J10gPSAnaGlkZGVuJztcbiAgfVxuICBpZiAoZmllbGRbc2V0dGluZ10gJiYgZmllbGRbc2V0dGluZ10uY29sb3IpIHtcbiAgICBpbnB1dFN0eWxlWydjb2xvciddID0gZmllbGRbc2V0dGluZ10uY29sb3I7XG4gIH1cbiAgaWYgKGZpZWxkW3NldHRpbmddICYmIGZpZWxkW3NldHRpbmddLnVwcGVyQ2FzZSkge1xuICAgIGlucHV0U3R5bGVbJ3RleHRUcmFuc2Zvcm0nXSA9ICd1cHBlcmNhc2UnO1xuICB9XG5cbiAgaWYgKGZpZWxkW3NldHRpbmddICYmIGZpZWxkW3NldHRpbmddLmxlYWRpbmcgPiAwKSB7XG4gICAgaW5wdXRTdHlsZVsnbGluZUhlaWdodCddID0gYCR7cmVzY2FsZSgxLCBmaWVsZFtzZXR0aW5nXS5sZWFkaW5nICsgLjUpfXB4YDtcbiAgfSBlbHNlIGlmIChmaWVsZC5sZWFkaW5nICYmIGZpZWxkLmxlYWRpbmcgPiAwKSB7XG4gICAgaW5wdXRTdHlsZVsnbGluZUhlaWdodCddID0gYCR7cmVzY2FsZSgxLCBmaWVsZC5sZWFkaW5nICsgLjUpfXB4YDtcbiAgfVxuXG4gIHJldHVybiBpbnB1dFN0eWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVDaGVja2JveExhYmVsKHJlcXVpcmVkKSB7XG4gIGNvbnN0IGxhYmVsU3R5bGUgPSB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgaGVpZ2h0OiBgMTMuNXB4YCxcbiAgICB3aWR0aDogYDEzLjVweGAsXG4gICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgIGJvcmRlcjogJzFweCBzb2xpZCAjNzc3J1xuICB9XG4gIGlmIChyZXF1aXJlZCA9PT0gdHJ1ZSkge1xuICAgIGxhYmVsU3R5bGVbJ2JveFNoYWRvdyddID0gJzAgMCAwIDFweCAjY2MwMDAwJztcbiAgfVxuICByZXR1cm4gbGFiZWxTdHlsZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMZXR0ZXJTcGFjaW5nKGJyb3dzZXJUeXBlKSB7XG4gIHN3aXRjaCAoYnJvd3NlclR5cGUpIHtcbiAgICBjYXNlICdvcGVyYSc6XG4gICAgICByZXR1cm4gLTAuMDAxODtcbiAgICBjYXNlICdmaXJlZm94JzpcbiAgICAgIHJldHVybiAtMC4yMzU5NDIxMDUyNjMxNTc4NztcbiAgICBjYXNlICdpZSc6XG4gICAgICByZXR1cm4gLTAuMDAxOTtcbiAgICBjYXNlICdlZGdlJzpcbiAgICAgIHJldHVybiAtMC4wMDE5O1xuICAgIGNhc2UgJ2Nocm9tZSc6XG4gICAgICByZXR1cm4gLTAuMDAxODtcbiAgICBjYXNlICdzYWZhcmknOlxuICAgICAgcmV0dXJuIC0wLjAwMTg7XG4gICAgY2FzZSAnYmxpbmsnOlxuICAgICAgcmV0dXJuIC0wLjAwMTg7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAtMC4wMDE4O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNjYWxlKHIsIG4pOiBudW1iZXIge1xuICByZXR1cm4gciAqIG47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlRmllbGRzRm9yU2lnbmVyKGZpZWxkcykge1xuICBsZXQgZmllbGRzRm9yQ3VycmVudFNpZ25lciA9IG5ldyBBcnJheShmaWVsZHMubGVuZ3RoKTtcbn1cbiJdfQ==