/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, PLATFORM_ID, RendererFactory2, ViewEncapsulation, Injector } from '@angular/core';
import { isPlatformBrowser, DOCUMENT } from '@angular/common';
import { Title, Meta } from '@angular/platform-browser';
import { filter, map, switchMap } from 'rxjs/operators';
import { ActivatedRoute, Router, NavigationEnd } from '@angular/router';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { EssentialsConfigToken } from '../essentials.module';
/** @enum {string} */
const Robots = {
    Noindex: 'Noindex',
    Index: 'Index',
    Follow: 'Follow',
    Noimageindex: 'Noimageindex',
    None: 'None',
    Noarchive: 'Noarchive',
    Nocache: 'Nocache',
    Nosnippet: 'Nosnippet',
};
export class PageService {
    /**
     * @param {?} titleService
     * @param {?} injector
     * @param {?} meta
     * @param {?} rendererFactory
     * @param {?} activatedRoute
     * @param {?} router
     * @param {?} vTokenStateService
     * @param {?} tokenObject
     * @param {?} platform
     * @param {?} document
     */
    constructor(titleService, injector, meta, rendererFactory, activatedRoute, router, vTokenStateService, tokenObject, platform, document) {
        this.titleService = titleService;
        this.injector = injector;
        this.meta = meta;
        this.rendererFactory = rendererFactory;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.vTokenStateService = vTokenStateService;
        this.tokenObject = tokenObject;
        this.platform = platform;
        this.document = document;
        this.segmentIsInitialized = false;
        this.lazyTitle = false;
        this._config_token = this.injector.get(EssentialsConfigToken);
    }
    /**
     * @return {?}
     */
    inti() {
        this.initializeSegment();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.additionalSetupForWidgets();
        }), 500);
        this.router.events.pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)), map((/**
         * @return {?}
         */
        () => this.activatedRoute)), map((/**
         * @param {?} route
         * @return {?}
         */
        route => {
            /** @type {?} */
            let targetRoute = route;
            while (targetRoute.firstChild) {
                targetRoute = targetRoute.firstChild;
            }
            return targetRoute;
        })), switchMap((/**
         * @param {?} route
         * @return {?}
         */
        route => route.data)), map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.lazyTitle = data.lazyTitle;
            return data.title;
        }))).subscribe((/**
         * @param {?} title
         * @return {?}
         */
        (title) => {
            if (this.lazyTitle) {
                this.lazyTitle = false;
            }
            else {
                this.setTitleAndRecord(title);
            }
        }));
    }
    /**
     * @param {?} title
     * @param {?=} pageName
     * @return {?}
     */
    setTitleAndRecord(title, pageName) {
        /** @type {?} */
        let newTitle = 'Verdocs';
        if (isPlatformBrowser(this.platform)) {
            if (this.document.cookie.includes(this._config_token.rForm_cookie_name)) {
                newTitle = title ? title : 'Verdocs';
                window['analytics'].page(pageName || newTitle);
            }
        }
        else {
            newTitle = 'Verdocs' + (title ? ` | ${title}` : '');
        }
        this.titleService.setTitle(newTitle);
    }
    /**
     * @param {?} property
     * @param {?} content
     * @return {?}
     */
    setMetaProperty(property, content) {
        if (!!content) {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.updateTag({ property, content }, `property="${property}"`);
            }
            else {
                this.meta.addTag({ property, content }, true);
            }
        }
        else {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.removeTag(`property=“${property}”`);
            }
        }
    }
    /**
     * @param {?} property
     * @param {?} content
     * @return {?}
     */
    setMetaName(property, content) {
        if (!!content) {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.updateTag({ property, content }, `name="${property}"`);
            }
            else {
                this.meta.addTag({ property, content }, true);
            }
        }
        else {
            if (!!this.getMetaTagProperty(property)) {
                this.meta.removeTag(`name=“${property}”`);
            }
        }
    }
    /**
     * @param {?} type
     * @param {?} title
     * @param {?} description
     * @param {?} image
     * @param {?} url
     * @return {?}
     */
    setOpenGraphMeta(type, title, description, image, url) {
        if (!!type) {
            this.setMetaProperty('og:type', type);
        }
        if (!!title) {
            this.setMetaProperty('og:title', title);
        }
        if (!!description) {
            this.setMetaProperty('og:description', description);
        }
        if (!!image) {
            this.setMetaProperty('og:image', image);
        }
        if (!!url) {
            this.setMetaProperty('og:url', url);
        }
        if (!!this.getMetaTagProperty('og:site_name')) {
            return;
        }
        else {
            this.meta.addTag({ property: 'og:site_name', content: 'Verdocs' });
        }
    }
    /**
     * @param {...?} robot_values
     * @return {?}
     */
    setRobotMeta(...robot_values) {
        /** @type {?} */
        let parameters = '';
        for (let x = 0; x < robot_values.length; x++) {
            if (robot_values[x]) {
                if (x === robot_values.length - 1) {
                    parameters += robot_values[x];
                }
                else {
                    parameters += robot_values[x] + ", ";
                }
            }
        }
        /** @type {?} */
        const robot_parameters = parameters;
        this.setMetaName('robots', robot_parameters);
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    setCanonicalUrl(tag) {
        if (!tag.href) {
            tag['href'] = this.document.url;
        }
        this.addTag(tag);
    }
    /**
     * @param {?} content
     * @return {?}
     */
    setDescriptionMeta(content) {
        if (!!this.getMetaTag('description')) {
            if (content) {
                this.meta.updateTag({ name: 'description', content: content }, `name='description'`);
            }
            else {
                this.meta.removeTag(`name='description'`);
            }
        }
        else {
            if (content) {
                this.meta.addTag({ name: 'description', content: content }, true);
            }
        }
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getMetaTag(name) {
        return this.meta.getTag(`name='${name}'`);
    }
    /**
     * @param {?} property
     * @return {?}
     */
    getMetaTagProperty(property) {
        return this.meta.getTag(`property='${property}'`);
    }
    /**
     * @private
     * @return {?}
     */
    initializeSegment() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const analytics = window['analytics'];
            if (document.cookie.includes(this._config_token.rForm_cookie_name)) {
                /** @type {?} */
                const idTokenSubscription = this.vTokenStateService.decodedIdTokenSubject.subscribe((/**
                 * @param {?} decodedIdToken
                 * @return {?}
                 */
                decodedIdToken => {
                    idTokenSubscription.unsubscribe();
                    if (!this.segmentIsInitialized) {
                        this.segmentIsInitialized = true;
                        analytics.reset();
                        /** @type {?} */
                        const profile = this.tokenObject.getProfile();
                        analytics.identify(decodedIdToken.sub, {
                            userId: decodedIdToken.sub,
                            email: decodedIdToken.email,
                            name: decodedIdToken.name,
                            'Verdoc plan': this.planType('verdoc'),
                            'Organization plan': this.planType('organization'),
                            'Current Profile Id': this.tokenObject.getProfileID(),
                            'Current Company': profile.organization.name,
                            company: {
                                id: profile.organization_id,
                                name: profile.organization.name
                            }
                        }, {
                            Intercom: { hideDefaultLauncher: true }
                        });
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    robotEnum() {
        return Robots;
    }
    /**
     * @private
     * @param {?} product
     * @return {?}
     */
    planType(product) {
        /** @type {?} */
        let productName = 'undefined';
        switch (product) {
            case 'verdoc':
                productName = 'env';
                break;
            case 'organization':
                productName = 'org';
                break;
        }
        /** @type {?} */
        const plan = this.tokenObject.getPlans().find((/**
         * @param {?} p
         * @return {?}
         */
        (p) => {
            return p.includes(productName);
        }));
        /** @type {?} */
        let planType = 'None';
        if (plan) {
            if (productName === 'env') {
                planType = plan.includes('pro') ? 'Pro' : 'Essential';
            }
            else {
                planType = plan.includes('premium') ? 'Premium' : 'Standard';
            }
        }
        return planType;
    }
    /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    addTag(tag, forceCreation) {
        /** @type {?} */
        const renderer = this.rendererFactory.createRenderer(this.document, {
            id: '-1',
            encapsulation: ViewEncapsulation.None,
            styles: [],
            data: {}
        });
        /** @type {?} */
        const link = renderer.createElement('link');
        /** @type {?} */
        const head = this.document.head;
        /** @type {?} */
        const selector = this._parseSelector(tag);
        Object.keys(tag).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        (prop) => {
            return renderer.setAttribute(link, prop, tag[prop]);
        }));
        try {
            if (head === null) {
                throw new Error('<head> not found within DOCUMENT.');
            }
            /** @type {?} */
            const existingLink = renderer.selectRootElement(selector);
            if (!!existingLink) {
                renderer.removeAttribute(existingLink, 'href');
                renderer.setAttribute(existingLink, 'href', tag['href']);
            }
            else {
                renderer.appendChild(head, link);
            }
        }
        catch (e) {
            // console.error('Error within linkService : ', e);
            renderer.appendChild(head, link);
        }
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    _parseSelector(tag) {
        /** @type {?} */
        const attr = tag.rel ? 'rel' : 'hreflang';
        return `link[${attr}="${tag[attr]}"]`;
    }
    /**
     * @private
     * @return {?}
     */
    additionalSetupForWidgets() {
        if (isPlatformBrowser(this.platform)) {
            if (window['Intercom']) {
                window['Intercom']('onHide', (/**
                 * @return {?}
                 */
                function () {
                    window['intercomIsOpen'] = false;
                }));
                window['Intercom']('onShow', (/**
                 * @return {?}
                 */
                function () {
                    window['intercomIsOpen'] = true;
                }));
            }
            window['lunchIntercom'] = (/**
             * @return {?}
             */
            function () {
                if (window['Intercom']) {
                    if (window['intercomIsOpen'] && window['intercomIsOpen'] === true) {
                        window['Intercom']('hide');
                    }
                    else {
                        window['Intercom']('show');
                    }
                }
                else {
                    console.error('Intercom is not loaded!');
                }
            });
            window['lunchElevio'] = (/**
             * @return {?}
             */
            function () {
                if (window['_elev']) {
                    if (window['_elev'].widgetIsOpen()) {
                        window['_elev'].close();
                    }
                    else {
                        window['_elev'].open();
                    }
                }
                else {
                    console.error('Elevio is not loaded!');
                }
            });
        }
    }
}
/** @nocollapse */
PageService.ctorParameters = () => [
    { type: Title },
    { type: Injector },
    { type: Meta },
    { type: RendererFactory2 },
    { type: ActivatedRoute },
    { type: Router },
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PageService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.segmentIsInitialized;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.lazyTitle;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.titleService;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.meta;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.rendererFactory;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.tokenObject;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    PageService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,