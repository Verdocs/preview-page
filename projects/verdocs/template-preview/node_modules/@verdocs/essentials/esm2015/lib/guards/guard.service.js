/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, Injector, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { PlansDialog } from '../dialogs/plan-dialogs/plans-dialog.component';
import { VerdocsStateService } from '@verdocs/tokens';
import { EssentialsConfigToken } from '../essentials.module';
export class GuardService {
    /**
     * @param {?} injector
     * @param {?} stateService
     * @param {?} dialog
     * @param {?} platform
     */
    constructor(injector, stateService, dialog, platform) {
        this.injector = injector;
        this.stateService = stateService;
        this.dialog = dialog;
        this.platform = platform;
        this._redirectUrl = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._plans = this._config_token.plans;
        this._rAccount_frontend_url = this._config_token.rAccount_frontend_url;
    }
    /**
     * @param {?} type
     * @param {?} subscriptionType
     * @param {?} openDialog
     * @return {?}
     */
    checkSubscription(type, subscriptionType, openDialog) {
        /** @type {?} */
        const idToken = this.stateService.getIDToken();
        /** @type {?} */
        const userId = this.toTokenObject(idToken)['sub'].slice(6);
        this._redirectUrl = `${this._rAccount_frontend_url}/rAccount/user/${userId}/billing`;
        switch (type) {
            case 'reminders':
                if (subscriptionType === this._plans['level-2'] || subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        const essentialDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        essentialDialog.componentInstance.type = 'essential';
                        essentialDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'live-link':
            case 'attachment':
            case 'payment':
                if (subscriptionType === this._plans['level-3']) {
                    return true;
                }
                else {
                    if (openDialog === true) {
                        /** @type {?} */
                        const proDialog = this.dialog.open(PlansDialog, {
                            panelClass: 'confirmation'
                        });
                        proDialog.componentInstance.type = 'pro';
                        proDialog.componentInstance.redirectUrl = this._redirectUrl;
                    }
                    return false;
                }
            case 'open-free-envelopes':
                /** @type {?} */
                const freeDialog = this.dialog.open(PlansDialog, {
                    panelClass: 'confirmation'
                });
                freeDialog.componentInstance.type = 'free';
                freeDialog.componentInstance.redirectUrl = this._redirectUrl;
                return false;
            default:
                return false;
        }
    }
    /**
     * @param {?} accessToken
     * @return {?}
     */
    toTokenObject(accessToken) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const base64Url = accessToken.split('.')[1];
            /** @type {?} */
            const base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
    }
    /**
     * @param {?} plans
     * @return {?}
     */
    getHighestEnvelopePlan(plans) {
        /** @type {?} */
        let plan = null;
        for (let x = 0; x < plans.length; x++) {
            if (plans[x] === this._plans['level-3']) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-2'] && (plan === null || plan === 'env:free')) {
                plan = plans[x];
            }
            else if (plans[x] === this._plans['level-1'] && plan === null) {
                plan = plans[x];
            }
        }
        return plan;
    }
}
GuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GuardService.ctorParameters = () => [
    { type: Injector },
    { type: VerdocsStateService },
    { type: MatDialog },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._plans;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._rAccount_frontend_url;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype._redirectUrl;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    GuardService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,