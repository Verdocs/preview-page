/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FourOhOneDialog } from '../dialogs/error-dialogs/four-oh-one.dialog';
import { PlansDialog } from '../dialogs/plan-dialogs/plans-dialog.component';
Injectable();
export class ErrorDialogService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * @param {?} err
     * @return {?}
     */
    show401ResponseError(err) {
        /** @type {?} */
        const errorDialog = this.dialog.open(FourOhOneDialog, {
            panelClass: 'error_dialog',
            disableClose: true
        });
        errorDialog.componentInstance.error = err;
    }
    /**
     * @param {?} type
     * @param {?} redirect_url
     * @param {?=} dialog_title
     * @param {?=} dialog_message
     * @return {?}
     */
    showPlansError(type, redirect_url, dialog_title, dialog_message) {
        /** @type {?} */
        const planErrorDialog = this.dialog.open(PlansDialog, {
            panelClass: 'error_dialog',
            disableClose: true
        });
        if (type) {
            planErrorDialog.componentInstance.type = type;
        }
        if (redirect_url) {
            planErrorDialog.componentInstance.type = redirect_url;
        }
        if (dialog_title) {
            planErrorDialog.componentInstance.dialogTitle = dialog_title;
        }
        if (dialog_message) {
            planErrorDialog.componentInstance.dialogMessage = dialog_message;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ErrorDialogService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9lc3NlbnRpYWxzLyIsInNvdXJjZXMiOlsibGliL2Vycm9yLWRpYWxvZ3MvZXJyb3ItZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUU3RSxVQUFVLEVBQUUsQ0FBQTtBQUNaLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFDN0IsWUFDVSxNQUFpQjtRQUFqQixXQUFNLEdBQU4sTUFBTSxDQUFXO0lBRzNCLENBQUM7Ozs7O0lBRUQsb0JBQW9CLENBQUMsR0FBRzs7Y0FDaEIsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwRCxVQUFVLEVBQUUsY0FBYztZQUMxQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDO1FBQ0YsV0FBVyxDQUFDLGlCQUFpQixDQUFDLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDNUMsQ0FBQzs7Ozs7Ozs7SUFFRCxjQUFjLENBQUMsSUFBWSxFQUFFLFlBQW9CLEVBQUUsWUFBcUIsRUFBRSxjQUF1Qjs7Y0FDekYsZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwRCxVQUFVLEVBQUUsY0FBYztZQUMxQixZQUFZLEVBQUUsSUFBSTtTQUNuQixDQUFDO1FBQ0YsSUFBSSxJQUFJLEVBQUU7WUFDUixlQUFlLENBQUMsaUJBQWlCLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUMvQztRQUNELElBQUksWUFBWSxFQUFFO1lBQ2hCLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsZUFBZSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxZQUFZLENBQUM7U0FDOUQ7UUFDRCxJQUFJLGNBQWMsRUFBRTtZQUNsQixlQUFlLENBQUMsaUJBQWlCLENBQUMsYUFBYSxHQUFHLGNBQWMsQ0FBQztTQUNsRTtJQUNILENBQUM7Q0FDRjs7Ozs7O0lBL0JHLG9DQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbmltcG9ydCB7IEZvdXJPaE9uZURpYWxvZyB9IGZyb20gJy4uL2RpYWxvZ3MvZXJyb3ItZGlhbG9ncy9mb3VyLW9oLW9uZS5kaWFsb2cnO1xuaW1wb3J0IHsgUGxhbnNEaWFsb2cgfSBmcm9tICcuLi9kaWFsb2dzL3BsYW4tZGlhbG9ncy9wbGFucy1kaWFsb2cuY29tcG9uZW50JztcblxuSW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRXJyb3JEaWFsb2dTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZ1xuICApIHtcbiAgICAgICAgXG4gIH1cblxuICBzaG93NDAxUmVzcG9uc2VFcnJvcihlcnIpIHtcbiAgICBjb25zdCBlcnJvckRpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oRm91ck9oT25lRGlhbG9nLCB7XG4gICAgICBwYW5lbENsYXNzOiAnZXJyb3JfZGlhbG9nJyxcbiAgICAgIGRpc2FibGVDbG9zZTogdHJ1ZVxuICAgIH0pO1xuICAgIGVycm9yRGlhbG9nLmNvbXBvbmVudEluc3RhbmNlLmVycm9yID0gZXJyO1xuICB9XG5cbiAgc2hvd1BsYW5zRXJyb3IodHlwZTogc3RyaW5nLCByZWRpcmVjdF91cmw6IHN0cmluZywgZGlhbG9nX3RpdGxlPzogc3RyaW5nLCBkaWFsb2dfbWVzc2FnZT86IHN0cmluZykge1xuICAgIGNvbnN0IHBsYW5FcnJvckRpYWxvZyA9IHRoaXMuZGlhbG9nLm9wZW4oUGxhbnNEaWFsb2csIHtcbiAgICAgIHBhbmVsQ2xhc3M6ICdlcnJvcl9kaWFsb2cnLFxuICAgICAgZGlzYWJsZUNsb3NlOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIHBsYW5FcnJvckRpYWxvZy5jb21wb25lbnRJbnN0YW5jZS50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgaWYgKHJlZGlyZWN0X3VybCkge1xuICAgICAgcGxhbkVycm9yRGlhbG9nLmNvbXBvbmVudEluc3RhbmNlLnR5cGUgPSByZWRpcmVjdF91cmw7XG4gICAgfVxuICAgIGlmIChkaWFsb2dfdGl0bGUpIHtcbiAgICAgIHBsYW5FcnJvckRpYWxvZy5jb21wb25lbnRJbnN0YW5jZS5kaWFsb2dUaXRsZSA9IGRpYWxvZ190aXRsZTtcbiAgICB9XG4gICAgaWYgKGRpYWxvZ19tZXNzYWdlKSB7XG4gICAgICBwbGFuRXJyb3JEaWFsb2cuY29tcG9uZW50SW5zdGFuY2UuZGlhbG9nTWVzc2FnZSA9IGRpYWxvZ19tZXNzYWdlO1xuICAgIH1cbiAgfVxufVxuIl19