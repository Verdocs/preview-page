/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import printJS from 'print-js';
/**
 * @param {?} string
 * @return {?}
 */
export function regParse(string) {
    return JSON.parse(string, (/**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        let prefix;
        if (typeof value !== 'string') {
            return value;
        }
        if (value.length < 8) {
            return value;
        }
        prefix = value.substring(0, 8);
        if (prefix === 'function') {
            return eval('(' + value + ')');
        }
        if (prefix === '_PxEgEr_') {
            return eval(value.slice(8));
        }
        if (prefix === '_NuFrRa_') {
            return eval(value.slice(8));
        }
        return value;
    }));
}
/**
 * @param {?} dataUrl
 * @param {?=} type
 * @return {?}
 */
export function dataURLtoBlob(dataUrl, type = 'image/png') {
    /** @type {?} */
    const arr = dataUrl.split(',');
    /** @type {?} */
    const 
    // mime = arr[0].match(/:(.*?);/)[1],
    bstr = atob(arr[1]);
    /** @type {?} */
    let n = bstr.length;
    /** @type {?} */
    const u8arr = new Uint8Array(n);
    while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
    }
    return new Blob([u8arr], { type: type });
}
/**
 * @param {?} pdfUrl
 * @return {?}
 */
export function printPdfUrl(pdfUrl) {
    if (typeof (pdfUrl) === 'string') {
        printJS(pdfUrl);
    }
    else {
        console.error('pdfUrl should be provided, instead received: ', pdfUrl);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9lc3NlbnRpYWxzLyIsInNvdXJjZXMiOlsibGliL2Z1bmN0aW9ucy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxPQUFPLE1BQU0sVUFBVSxDQUFDOzs7OztBQUcvQixNQUFNLFVBQVUsUUFBUSxDQUFDLE1BQWM7SUFDckMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Ozs7O0lBQUUsVUFBVSxHQUFHLEVBQUUsS0FBSzs7WUFDeEMsTUFBTTtRQUNWLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFL0IsSUFBSSxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDaEM7UUFDRCxJQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxNQUFNLEtBQUssVUFBVSxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDOzs7Ozs7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQU8sRUFBRSxPQUFlLFdBQVc7O1VBQ3pELEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7O0lBQzVCLHFDQUFxQztJQUNyQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFDZixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU07O1VBQ2YsS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMvQixPQUFPLENBQUMsRUFBRSxFQUFFO1FBQ1YsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUMzQyxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsTUFBTTtJQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDaEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2pCO1NBQU07UUFDTCxPQUFPLENBQUMsS0FBSyxDQUFDLCtDQUErQyxFQUFFLE1BQU0sQ0FBRSxDQUFDO0tBQ3pFO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwcmludEpTIGZyb20gJ3ByaW50LWpzJztcblxuXG5leHBvcnQgZnVuY3Rpb24gcmVnUGFyc2Uoc3RyaW5nOiBzdHJpbmcpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyaW5nLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGxldCBwcmVmaXg7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA8IDgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcHJlZml4ID0gdmFsdWUuc3Vic3RyaW5nKDAsIDgpO1xuXG4gICAgaWYgKHByZWZpeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGV2YWwoJygnICsgdmFsdWUgKyAnKScpO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSAnX1B4RWdFcl8nKSB7XG4gICAgICByZXR1cm4gZXZhbCh2YWx1ZS5zbGljZSg4KSk7XG4gICAgfVxuICAgIGlmIChwcmVmaXggPT09ICdfTnVGclJhXycpIHtcbiAgICAgIHJldHVybiBldmFsKHZhbHVlLnNsaWNlKDgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGFVUkx0b0Jsb2IoZGF0YVVybCwgdHlwZTogc3RyaW5nID0gJ2ltYWdlL3BuZycpIHtcbiAgY29uc3QgYXJyID0gZGF0YVVybC5zcGxpdCgnLCcpLFxuICAgIC8vIG1pbWUgPSBhcnJbMF0ubWF0Y2goLzooLio/KTsvKVsxXSxcbiAgICBic3RyID0gYXRvYihhcnJbMV0pO1xuICAgIGxldCBuID0gYnN0ci5sZW5ndGg7XG4gIGNvbnN0IHU4YXJyID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gIHdoaWxlIChuLS0pIHtcbiAgICB1OGFycltuXSA9IGJzdHIuY2hhckNvZGVBdChuKTtcbiAgfVxuICByZXR1cm4gbmV3IEJsb2IoW3U4YXJyXSwgeyB0eXBlOiB0eXBlIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRQZGZVcmwocGRmVXJsKSB7XG4gIGlmICh0eXBlb2YgKHBkZlVybCkgPT09ICdzdHJpbmcnKSB7XG4gICAgcHJpbnRKUyhwZGZVcmwpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGUuZXJyb3IoJ3BkZlVybCBzaG91bGQgYmUgcHJvdmlkZWQsIGluc3RlYWQgcmVjZWl2ZWQ6ICcsIHBkZlVybCApO1xuICB9XG59XG4iXX0=