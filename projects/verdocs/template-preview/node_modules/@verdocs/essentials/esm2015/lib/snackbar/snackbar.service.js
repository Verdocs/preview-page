/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { MatSnackBar } from '@angular/material/snack-bar';
export class SnackbarService {
    /**
     * @param {?} snackbar
     * @param {?} platform
     */
    constructor(snackbar, platform) {
        this.snackbar = snackbar;
        this.platform = platform;
    }
    /**
     * @param {?=} duration
     * @param {?=} position
     * @return {?}
     */
    initConfig(duration, position) {
        if ((isPlatformBrowser(this.platform))) {
            /** @type {?} */
            let snackbarConfig;
            if (window && window.innerWidth >= 920) {
                snackbarConfig = {
                    verticalPosition: position ? position : 'bottom',
                    horizontalPosition: 'left',
                    duration: duration ? duration : 5000
                };
            }
            else {
                snackbarConfig = {
                    verticalPosition: position ? position : 'top',
                    duration: duration ? duration : 5000
                };
            }
            return snackbarConfig;
        }
    }
    /**
     * @param {?} message
     * @param {?=} action
     * @param {?=} config
     * @return {?}
     */
    open(message, action, config) {
        return this.snackbar.open(message, action ? action : undefined, config ? config : this.initConfig());
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.snackbar.dismiss();
    }
}
SnackbarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SnackbarService.ctorParameters = () => [
    { type: MatSnackBar },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SnackbarService.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    SnackbarService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic25hY2tiYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL2Vzc2VudGlhbHMvIiwic291cmNlcyI6WyJsaWIvc25hY2tiYXIvc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQXFDLE1BQU0sNkJBQTZCLENBQUM7QUFHN0YsTUFBTSxPQUFPLGVBQWU7Ozs7O0lBQzFCLFlBQ1UsUUFBcUIsRUFDQSxRQUFRO1FBRDdCLGFBQVEsR0FBUixRQUFRLENBQWE7UUFDQSxhQUFRLEdBQVIsUUFBUSxDQUFBO0lBQ25DLENBQUM7Ozs7OztJQUVMLFVBQVUsQ0FBQyxRQUFpQixFQUFFLFFBQTJCO1FBQ3ZELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRTs7Z0JBQ2xDLGNBQWlDO1lBQ3JDLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksR0FBRyxFQUFFO2dCQUN0QyxjQUFjLEdBQUc7b0JBQ2YsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVE7b0JBQ2hELGtCQUFrQixFQUFFLE1BQU07b0JBQzFCLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSTtpQkFDckMsQ0FBQTthQUNGO2lCQUFNO2dCQUNMLGNBQWMsR0FBRztvQkFDZixnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSztvQkFDN0MsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJO2lCQUNyQyxDQUFBO2FBQ0Y7WUFFRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtJQUNILENBQUM7Ozs7Ozs7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLE1BQU8sRUFBRSxNQUFPO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUFqQ0YsVUFBVTs7OztZQUZGLFdBQVc7NENBTWYsTUFBTSxTQUFDLFdBQVc7Ozs7Ozs7SUFEbkIsbUNBQTZCOzs7OztJQUM3QixtQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBNYXRTbmFja0JhciwgTWF0U25hY2tCYXJDb25maWcsIE1hdFNuYWNrQmFyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvc25hY2stYmFyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNuYWNrYmFyU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc25hY2tiYXI6IE1hdFNuYWNrQmFyLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1cbiAgKSB7IH1cblxuICBpbml0Q29uZmlnKGR1cmF0aW9uPzogbnVtYmVyLCBwb3NpdGlvbj86ICdib3R0b20nIHwgJ3RvcCcpOiBNYXRTbmFja0JhckNvbmZpZyB7XG4gICAgaWYgKChpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkpIHtcbiAgICAgIGxldCBzbmFja2JhckNvbmZpZzogTWF0U25hY2tCYXJDb25maWdcbiAgICAgIGlmICh3aW5kb3cgJiYgd2luZG93LmlubmVyV2lkdGggPj0gOTIwKSB7XG4gICAgICAgIHNuYWNrYmFyQ29uZmlnID0ge1xuICAgICAgICAgIHZlcnRpY2FsUG9zaXRpb246IHBvc2l0aW9uID8gcG9zaXRpb24gOiAnYm90dG9tJyxcbiAgICAgICAgICBob3Jpem9udGFsUG9zaXRpb246ICdsZWZ0JyxcbiAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gPyBkdXJhdGlvbiA6IDUwMDBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc25hY2tiYXJDb25maWcgPSB7XG4gICAgICAgICAgdmVydGljYWxQb3NpdGlvbjogcG9zaXRpb24gPyBwb3NpdGlvbiA6ICd0b3AnLFxuICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiA/IGR1cmF0aW9uIDogNTAwMFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzbmFja2JhckNvbmZpZztcbiAgICB9XG4gIH1cblxuICBvcGVuKG1lc3NhZ2U6IHN0cmluZywgYWN0aW9uPywgY29uZmlnPyk6IE1hdFNuYWNrQmFyUmVmPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnNuYWNrYmFyLm9wZW4obWVzc2FnZSwgYWN0aW9uID8gYWN0aW9uIDogdW5kZWZpbmVkLCBjb25maWcgPyBjb25maWcgOiB0aGlzLmluaXRDb25maWcoKSk7XG4gIH1cblxuICBkaXNtaXNzKCk6IHZvaWQge1xuICAgIHRoaXMuc25hY2tiYXIuZGlzbWlzcygpO1xuICB9XG59XG4iXX0=