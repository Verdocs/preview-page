/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { Router } from '@angular/router';
import { TemplatesService, TemplatesGuardService, TemplateActions } from '@verdocs/sdk';
// import { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';
import { throwError as observableThrowError, ReplaySubject, from, forkJoin, Subject, of } from 'rxjs';
import { catchError, map, delay, mergeMap } from 'rxjs/operators';
import { filter } from 'lodash';
import { findIndex, remove } from 'lodash';
import { nameToRGBA, getRGBA } from '@verdocs/sdk';
import { SnackbarService } from '../snackbar/snackbar.service';
import { EventTrackerService } from '@verdocs/event-tracker';
import { EssentialsConfigToken } from '../essentials.module';
export class BuilderDataService {
    /**
     * @param {?} http
     * @param {?} router
     * @param {?} templatesService
     * @param {?} templateGuard
     * @param {?} snackbarService
     * @param {?} eventTracker
     * @param {?} injector
     */
    constructor(http, router, templatesService, templateGuard, snackbarService, eventTracker, injector) {
        this.http = http;
        this.router = router;
        this.templatesService = templatesService;
        this.templateGuard = templateGuard;
        this.snackbarService = snackbarService;
        this.eventTracker = eventTracker;
        this.injector = injector;
        this.recipients = [];
        this.roles = [];
        this.templateSubject = new ReplaySubject(1, 500);
        this.hasFields = false;
        this.templateNameSubject = new ReplaySubject(1, 500);
        this.templatePagesSubject = new ReplaySubject(1, 500);
        this.recipientsSubject = new ReplaySubject();
        this.activeRecipientSubject = new ReplaySubject();
        this.scrollInfoSubject = new ReplaySubject();
        this.screenInfoSubject = new ReplaySubject();
        this.newTypeSubject = new Subject();
        this.newOptionSubject = new ReplaySubject(1, 100);
        this.duplicateFieldSubject = new ReplaySubject();
        this.saveStatusSubject = new ReplaySubject();
        this.renderedSubject = new ReplaySubject();
        this.activeFieldIndexSubject = new ReplaySubject(1, 100);
        this.numberOfRolesSubject = new ReplaySubject();
        this.numberOfSequenceSubject = new ReplaySubject();
        this.hasFieldsSubject = new ReplaySubject();
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        /* Use NGRX to do the subscriptions */
        this.templateSubject.subscribe((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            this.template = template;
            if (template && template.name) {
                this.templateNameSubject.next(template.name);
            }
        }));
        this.templateNameSubject.subscribe((/**
         * @param {?} name
         * @return {?}
         */
        name => {
            this.templateName = name;
        }));
        /* Remove above after refactoring */
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    createTemplate(template_body) {
        return this.http
            .post(this.rForm_backend_url + '/templates', template_body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            this.templateSubject.next(res);
            this.recipientsSubject.next([]);
            return res;
        })));
    }
    /**
     * @return {?}
     */
    updateLocalTemplateData() {
        this.templateName = this.template.name;
        this.templateNameSubject.next(this.templateName);
        this.templatePages = this.template.pages.length;
        this.templatePagesSubject.next(this.templatePages);
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    updateTemplate(template_body) {
        return this.templatesService.updateTemplateObservable(template_body.id, template_body).pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        template => template)));
    }
    /**
     * @param {?} template
     * @param {?} name
     * @return {?}
     */
    updateTemplateName(template, name) {
        if (template && template.id) {
            return this.templatesService.updateTemplateObservable(template.id, { name: name })
                .pipe(map((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                template.name = res.name;
                this.updateLocalTemplate(template);
                this.saveStatusSubject.next('saved');
                this.createSnackBar('Name Changed to: ' + name);
                return res.name;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                this.saveStatusSubject.next('Failed to save');
                this.createSnackBar('Failed to change Template name');
                return err;
            })));
        }
        else {
            this.templateNameSubject.next(name);
            this.saveStatusSubject.next('Name will be updated');
        }
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplateObservable(templateId) {
        return this.templatesService.getTemplateObservable(templateId);
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplate(templateId) {
        return this.templatesService.getTemplate(templateId).toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        template => {
            this.updateLocalTemplate(template);
            this.recipients = this.sortRoles(this.template);
            this.template.roles = this.recipients;
            this.roles = this.recipients;
            this.recipientsSubject.next(this.recipients);
            this.activeRecipientSubject.next(this.recipients[0]);
            return this.template;
        }));
    }
    /**
     * @return {?}
     */
    watchForUpdatedTemplate() {
        return this.templateSubject.pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        template => template)));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    updateLocalTemplate(template) {
        if (template) {
            this.template = template;
            if (this.template && this.template.pages) {
                this.template.pages = this.template.pages.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => {
                    return a.sequence - b.sequence;
                }));
            }
            if (this.template) {
                this.updateLocalTemplateData();
                this.checkForFields(this.template.roles);
            }
            this.recipientsSubject.next(this.template.roles.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sequence - b.sequence;
            })));
            this.templateSubject.next(this.template);
        }
        else {
            this.templateNameSubject.next(null);
            this.templatePagesSubject.next(null);
            this.numberOfRolesSubject.next(null);
            this.numberOfSequenceSubject.next(null);
            this.hasFieldsSubject.next(false);
        }
    }
    /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    uploadTemplateDocument(file, template) {
        /** @type {?} */
        const formdata = new FormData();
        formdata.append('document', file, file.name);
        /** @type {?} */
        const req = new HttpRequest('POST', this.rForm_backend_url + '/templates/' + template.id + '/documents', formdata, {
            reportProgress: true
        });
        return this.http.request(req)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return observableThrowError(err);
        })));
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    getTemplateDocument(templateId) {
        this.templateDoc = this.templatesService.getAllTemplateDocumentsObservable(templateId).pipe(map((/**
         * @param {?} docs
         * @return {?}
         */
        (docs) => {
            this.templateDoc = docs[0];
            return this.templateDoc;
        })));
        return this.templateDoc;
    }
    /**
     * @param {?} templateId
     * @param {?} templateDoc
     * @return {?}
     */
    getTemplateDocumentFile(templateId, templateDoc) {
        if (templateId && templateDoc) {
            return this.templatesService.getTemplateDocumentPDFObservable(templateId, templateDoc).pipe(map((/**
             * @param {?} pdf
             * @return {?}
             */
            pdf => {
                /** @type {?} */
                const pdfUrl = URL.createObjectURL(pdf);
                return pdfUrl;
            })));
        }
    }
    /**
     * @param {?} templateDocument
     * @return {?}
     */
    setTemplateDocument(templateDocument) {
        this.templateDoc = templateDocument;
    }
    /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePage(document, pageNum, templateId) {
        /** @type {?} */
        const body = {
            sequence: pageNum,
            page_number: pageNum,
            document_id: document.id
        };
        return this.http.post(this.rForm_backend_url + `/templates/${templateId}/pages`, body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return observableThrowError(err);
        })));
    }
    /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePages(document, pageNums, templateId) {
        return from(pageNums)
            .pipe(mergeMap((/**
         * @param {?} pageNum
         * @return {?}
         */
        pageNum => {
            /** @type {?} */
            const page = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return (/** @type {?} */ (this.http.post(this.rForm_backend_url + `/templates/${templateId}/pages`, page).pipe(delay(200))));
        })));
    }
    /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    deleteTemplateField(template, fieldName, i, j) {
        return this.http
            .delete(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + fieldName.trim())
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: fieldName });
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
            if (roleIndex > -1) {
                /** @type {?} */
                const roleFieldIndex = findIndex(template.roles[roleIndex].fields, { name: fieldName });
                if (roleFieldIndex > -1) {
                    template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                }
            }
            template.pages[i].fields.splice(fieldIndex, 1);
            this.updateLocalTemplate(template);
            this.saveStatusSubject.next('saved');
            this.checkForFields(template.roles);
            return template;
        })));
    }
    /**
     * @param {?} fieldNames
     * @param {?} template
     * @return {?}
     */
    deleteTemplateFields(fieldNames, template) {
        if (fieldNames && fieldNames.length > 0) {
            /** @type {?} */
            const pages = template.pages;
            for (const fieldName of fieldNames) {
                for (let x = 0; x < pages.length; x++) {
                    /** @type {?} */
                    const fieldIndex = findIndex(pages[x].fields, { name: fieldName });
                    if (fieldIndex >= 0) {
                        template.pages[x].fields.splice(fieldIndex, 1);
                    }
                }
            }
            this.checkForFields(template.roles);
        }
    }
    /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    addTemplateField(newField, i, j, template) {
        newField.name = newField.name.trim();
        return this.http
            .post(this.rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field added`,
                label: `document id: ${newField.template_id}`
            });
            template.pages[i].fields[j] = field;
            this.checkForFields(template.roles);
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template.roles[roleIndex]['fields'].push(field);
            }
            this.templateSubject.next(template);
            return template;
        })));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplateOwnerInfo(id) {
        return this.templatesService.getTemplateOwnerInfo(id);
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateTemplateField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field updated`,
                label: `document id: ${template.id}`
            });
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            if (field.page_sequence - 1 !== i) {
                template.pages[i].fields.splice(fieldIndex, 1);
                template.pages[field.page_sequence - 1].fields.push(field);
            }
            else {
                template.pages[i].fields[fieldIndex] = field;
            }
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template = this.updateRoleField(template, field, roleIndex, oldName);
            }
            this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    updateRoleField(template, updated_field, role_index, old_name) {
        /** @type {?} */
        const field_index = findIndex(template.roles[role_index].fields, { name: old_name });
        if (field_index >= 0) {
            template.roles[role_index].fields[field_index] = updated_field;
        }
        else {
            template.roles[role_index].fields.push(updated_field);
        }
        return template;
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateDropdownField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this.rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            template.pages[i].fields[fieldIndex] = field;
            this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} template_id
     * @param {?} sequence_number
     * @return {?}
     */
    deleteSequence(template_id, sequence_number) {
        return this.templatesService.deleteSequence(template_id, sequence_number);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    prepareFieldDuplication(field) {
        this.duplicateFieldSubject.next(field);
    }
    ;
    /**
     * @param {?} roles
     * @return {?}
     */
    checkForFields(roles) {
        /** @type {?} */
        let hasFields = true;
        if (roles && roles.length > 0) {
            for (let role of roles) {
                if (role && role.type === 'signer' && role.fields.length === 0) {
                    hasFields = false;
                }
            }
        }
        else {
            hasFields = false;
        }
        this.hasFields = hasFields;
        this.hasFieldsSubject.next(this.hasFields);
    }
    /**
     * @param {?} title
     * @param {?=} buttonTitle
     * @return {?}
     */
    createSnackBar(title, buttonTitle = 'OK') {
        //   let snackbarConfig: MatSnackBarConfig
        //   if (window.innerWidth >= 920) {
        //     snackbarConfig = {
        //       verticalPosition: 'bottom',
        //       horizontalPosition: 'left',
        //       duration: 5000
        //     }
        //   } else {
        //     snackbarConfig = {
        //       verticalPosition: 'top',
        //       duration: 5000
        //     }
        //   }
        //   this.snackbar.open(title, buttonTitle, snackbarConfig);
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editDocsUrl(templateId) {
        /** @type {?} */
        const editDocsPageUrl = `/builder/${templateId}/docs`;
        return editDocsPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editRolesUrl(templateId) {
        /** @type {?} */
        const editRolesPageUrl = `/builder/${templateId}/roles`;
        return editRolesPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    editTemplateUrl(templateId) {
        /** @type {?} */
        const editPageUrl = `/builder/${templateId}/fields`;
        return editPageUrl;
    }
    /**
     * @param {?} templateId
     * @return {?}
     */
    previewTemplateUrl(templateId) {
        /** @type {?} */
        const reviewTemplateUrl = `/document/${templateId}`;
        return reviewTemplateUrl;
    }
    /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    addFieldRole(templateId, fieldId, roleId, i, j) {
        /** @type {?} */
        const fieldRoleInfo = JSON.stringify({
            field_id: fieldId,
            role_id: roleId
        });
        return this.http
            .post(this.rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
         * @param {?} fieldRole
         * @return {?}
         */
        fieldRole => {
            return fieldRole;
        }));
    }
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    addRole(role, template) {
        /** @type {?} */
        const templateBackend = this.rForm_backend_url + '/templates/' + template.id + '/roles';
        this.roles = [];
        this.roles = this.roles.concat(role);
        /** @type {?} */
        const roleRequests = [];
        this.roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            roleRequests.push(this.http.post(templateBackend, role));
        }));
        if (this.roles && this.roles.length > 0) {
            return forkJoin(roleRequests).pipe(map((/**
             * @param {?} savedRoles
             * @return {?}
             */
            savedRoles => {
                savedRoles.concat((/** @type {?} */ (savedRoles)));
                if (!template['roles']) {
                    template['roles'] = (/** @type {?} */ ([]));
                }
                /** @type {?} */
                const savedRolesWithFields = savedRoles.map((/**
                 * @param {?} newRole
                 * @return {?}
                 */
                newRole => {
                    newRole['fields'] = [];
                    return newRole;
                }));
                template['roles'] = template['roles'].concat(savedRolesWithFields);
                this.recipients = this.sortRoles(template);
                this.roles = this.recipients;
                this.templateSubject.next(template);
                this.recipientsSubject.next(this.recipients);
                this.recipients;
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        }
        else {
            return of(template);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    addCheckboxGroup(field) {
        this.newOptionSubject.next({
            type: 'checkbox_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    }
    /**
     * @param {?} field
     * @return {?}
     */
    addRadioGroup(field) {
        this.newOptionSubject.next({
            type: 'radio_button_group',
            page_sequence: field.page_sequence,
            field_name: field.name,
        });
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    getRolesInSequence(roles) {
        /** @type {?} */
        const rolesInSequence = [];
        for (let roleIndex = 0; roleIndex < roles.length; roleIndex++) {
            /** @type {?} */
            const sequenceIndex = roles[roleIndex]['sequence'] - 1;
            /** @type {?} */
            const role = Object.assign({}, roles[roleIndex]);
            role['style'] = {
                backgroundColor: `${this.getRoleColor(role.name, roleIndex)}`
            };
            if (!rolesInSequence[sequenceIndex]) {
                rolesInSequence[sequenceIndex] = [role];
            }
            else {
                rolesInSequence[sequenceIndex].push(role);
            }
        }
        this.numberOfSequenceSubject.next(rolesInSequence.length);
        this.numberOfRolesSubject.next(roles.length);
        return rolesInSequence;
    }
    /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    deleteRole(roleName, template) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
            .toPromise()
            .then((/**
         * @return {?}
         */
        () => {
            remove(template.roles, (/**
             * @param {?} role
             * @return {?}
             */
            (role) => {
                this.recipients = this.sortRoles(template);
                if (role.name === roleName) {
                    /** @type {?} */
                    const fields = role.fields;
                    /** @type {?} */
                    const fieldNames = [];
                    for (const field of fields) {
                        fieldNames.push(field.name);
                    }
                    this.deleteTemplateFields(fieldNames, template);
                }
                this.templateSubject.next(template);
                this.recipientsSubject.next(this.recipients);
                return role.name === roleName;
            }));
        }));
    }
    /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    deleteRoles(roleNames, template) {
        /** @type {?} */
        const deleteCalls = [];
        roleNames.forEach((/**
         * @param {?} role_name
         * @return {?}
         */
        role_name => {
            template = Object.assign({}, template, { roles: template.roles.filter((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => role.name !== role_name)) });
            deleteCalls.push(this.http.delete(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
        }));
        return forkJoin(deleteCalls).pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            console.error('Couldn\'t delete all the roles');
            return err;
        })));
    }
    /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    updateRoles(roles, template) {
        /** @type {?} */
        const updateCalls = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            /** @type {?} */
            const body = {
                template_id: template.id,
                name: role.name.trim(),
                full_name: role.full_name,
                email: role.email,
                sequence: role.sequence,
                type: role.type,
                delegator: role.delegator,
                message: role.message,
                phone: role.phone
            };
            /** @type {?} */
            const role_index = findIndex(template.roles, { name: role.old_name });
            if (role_index >= 0) {
                template.roles[role_index] = Object.assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
            }
            this.eventTracker.createEvent({
                category: 'document',
                action: 'document role updated',
                label: `document id: ${template.id}`
            });
            updateCalls.push(this.http.put(this.rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
        }));
        return forkJoin(updateCalls)
            .pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            console.error('Couldn\'t save all the roles');
            return err;
        })));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    sortRoles(template) {
        if (template.roles.length < 1) {
            return [];
        }
        /** @type {?} */
        const roles = template.roles.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a.sequence === b.sequence) {
                return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0;
            }
            return a.sequence - b.sequence;
        }));
        for (let x = 0; x < roles.length; x++) {
            roles[x]['rgba'] = getRGBA(x);
        }
        template.roles = roles;
        return roles;
    }
    /**
     * @param {?} name
     * @param {?=} index
     * @param {?=} template
     * @return {?}
     */
    getRoleColor(name, index, template) {
        if (index !== null && index > -1) {
            return getRGBA(index);
        }
        else if (template) {
            if (template.roles && template.roles.length > 0) {
                index = findIndex(template.roles, { name: name });
                if (index >= 0) {
                    return template.roles[index].rgba ? template.roles[index].rgba : getRGBA(index);
                }
            }
            else {
                return nameToRGBA(name);
            }
        }
        else {
            return nameToRGBA(name);
        }
    }
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    updateFullName(role, template) {
        for (let i = 0; i < template.pages.length; i++) {
            if (template.pages[i].fields.length > 0) {
                for (let j = 0; j < template.pages[i].fields.length; j++) {
                    if (template.pages[i].fields[j].type === 'placeholder' && template.pages[i].fields[j].setting['type'] === 'full_name') {
                        if (template.pages[i].fields[j].setting['result'] !== role.full_name &&
                            template.pages[i].fields[j].role_name === role.name) {
                            template.pages[i].fields[j].setting['result'] = role.full_name;
                            /** @type {?} */
                            const updatedField = Object.assign({}, template.pages[i].fields[j]);
                            this.updateTemplateField(template, updatedField, updatedField.name, i, j).toPromise().then((/**
                             * @return {?}
                             */
                            () => {
                                this.templateSubject.next(template);
                            }));
                        }
                    }
                }
            }
        }
    }
    /**
     * @param {?} activeFieldIndex
     * @return {?}
     */
    setActiveFieldIndex(activeFieldIndex) {
        this.activeFieldIndex = activeFieldIndex;
        this.activeFieldIndexSubject.next(this.activeFieldIndex);
    }
    /**
     * @param {?} template
     * @return {?}
     */
    autoAddSigner(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                /** @type {?} */
                const recipients = yield this.addRole((/** @type {?} */ ({ name: 'Signer 1', type: 'signer', sequence: 1 })), template).toPromise();
                this.activeRecipientSubject.next(recipients[0]);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    resolve();
                }), 500);
            })));
        });
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openTemplate(template) {
        if (this.canUserPreview(template)) {
            this.router.navigate([`document/${template.id}`]);
        }
        else if (this.canUserEdit(template)) {
            this.router.navigate([`builder/${template.id}/fields`]);
        }
        else {
            this.snackbarService.open(`Template is in build mode, and not ready for use.  Please check back soon.`);
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserEdit(template) {
        /** @type {?} */
        const response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserPreview(template) {
        /** @type {?} */
        const hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        let canPreview;
        /** @type {?} */
        const signers = filter(template.roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        for (const signer of signers) {
            canPreview = signer['fields'] && signer['fields'].length > 0;
        }
        return hasPermission && canPreview;
    }
}
BuilderDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BuilderDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: Router },
    { type: TemplatesService },
    { type: TemplatesGuardService },
    { type: SnackbarService },
    { type: EventTrackerService },
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.recipients;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.template;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateDoc;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatePages;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateName;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.activeFieldIndex;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.roles;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateId;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.hasFields;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.rForm_backend_url;
    /** @type {?} */
    BuilderDataService.prototype.templateNameSubject;
    /** @type {?} */
    BuilderDataService.prototype.templatePagesSubject;
    /** @type {?} */
    BuilderDataService.prototype.recipientsSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeRecipientSubject;
    /** @type {?} */
    BuilderDataService.prototype.scrollInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.screenInfoSubject;
    /** @type {?} */
    BuilderDataService.prototype.newTypeSubject;
    /** @type {?} */
    BuilderDataService.prototype.newOptionSubject;
    /** @type {?} */
    BuilderDataService.prototype.duplicateFieldSubject;
    /** @type {?} */
    BuilderDataService.prototype.saveStatusSubject;
    /** @type {?} */
    BuilderDataService.prototype.renderedSubject;
    /** @type {?} */
    BuilderDataService.prototype.activeFieldIndexSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfRolesSubject;
    /** @type {?} */
    BuilderDataService.prototype.numberOfSequenceSubject;
    /** @type {?} */
    BuilderDataService.prototype.hasFieldsSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templatesService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.snackbarService;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.eventTracker;
    /**
     * @type {?}
     * @private
     */
    BuilderDataService.prototype.injector;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,