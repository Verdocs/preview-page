/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { find } from 'lodash';
export class ModalService {
    constructor() {
        this.modals = [];
        this.subject = new Subject();
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    add(modal) {
        this.modals.push(modal);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    open(id) {
        /** @type {?} */
        const modal = find(this.modals, { id: id });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    close(id) {
        /** @type {?} */
        const modal = find(this.modals, { id: id });
        modal.close();
    }
    /**
     * @param {?} componentData
     * @return {?}
     */
    setComponentData(componentData) {
        this.componentData = componentData;
        this.subject.next(componentData);
    }
    /**
     * @return {?}
     */
    getComponentData() {
        return this.subject.asObservable();
    }
}
ModalService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.modals;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.componentData;
    /**
     * @type {?}
     * @private
     */
    ModalService.prototype.subject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL2Vzc2VudGlhbHMvIiwic291cmNlcyI6WyJsaWIvbW9kYWwvbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUU3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBSTlCLE1BQU0sT0FBTyxZQUFZO0lBRHpCO1FBRVUsV0FBTSxHQUF3QixFQUFFLENBQUM7UUFFakMsWUFBTyxHQUEyQixJQUFJLE9BQU8sRUFBaUIsQ0FBQztJQXVCekUsQ0FBQzs7Ozs7SUFyQkMsR0FBRyxDQUFDLEtBQVU7UUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVELElBQUksQ0FBQyxFQUFVOztjQUNQLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUM3QyxDQUFDOzs7OztJQUVELEtBQUssQ0FBQyxFQUFVOztjQUNSLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxhQUFrQjtRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQTFCRixVQUFVOzs7Ozs7O0lBRVQsOEJBQXlDOzs7OztJQUN6QyxxQ0FBMkI7Ozs7O0lBQzNCLCtCQUF1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgLCAgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29tcG9uZW50RGF0YSB9IGZyb20gJ0B2ZXJkb2NzL3Nkayc7XG5pbXBvcnQgeyBmaW5kIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBNb2RhbFNlcnZpY2Uge1xuICBwcml2YXRlIG1vZGFsczogTWF0RGlhbG9nUmVmPGFueT5bXSA9IFtdO1xuICBwcml2YXRlIGNvbXBvbmVudERhdGE6IGFueTtcbiAgcHJpdmF0ZSBzdWJqZWN0OiBTdWJqZWN0PENvbXBvbmVudERhdGE+ID0gbmV3IFN1YmplY3Q8Q29tcG9uZW50RGF0YT4oKTtcblxuICBhZGQobW9kYWw6IGFueSkge1xuICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuICB9XG5cbiAgb3BlbihpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgbW9kYWwgPSBmaW5kKHRoaXMubW9kYWxzLCB7IGlkOiBpZCB9KTtcbiAgfVxuXG4gIGNsb3NlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtb2RhbCA9IGZpbmQodGhpcy5tb2RhbHMsIHsgaWQ6IGlkIH0pO1xuICAgIG1vZGFsLmNsb3NlKCk7XG4gIH1cblxuICBzZXRDb21wb25lbnREYXRhKGNvbXBvbmVudERhdGE6IGFueSkge1xuICAgIHRoaXMuY29tcG9uZW50RGF0YSA9IGNvbXBvbmVudERhdGE7XG4gICAgdGhpcy5zdWJqZWN0Lm5leHQoY29tcG9uZW50RGF0YSk7XG4gIH1cblxuICBnZXRDb21wb25lbnREYXRhKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19