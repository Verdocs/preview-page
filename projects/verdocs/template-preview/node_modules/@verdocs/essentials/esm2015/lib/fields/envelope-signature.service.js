/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { DocumentsService, FieldData } from '@verdocs/sdk';
import { VerdocsStateService } from '@verdocs/tokens';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { EssentialsConfigToken } from '../essentials.module';
import { dataURLtoBlob } from '../functions/utils';
export class SignatureService {
    /**
     * @param {?} httpClient
     * @param {?} injector
     * @param {?} envelopeSvc
     * @param {?} vTokenStateService
     */
    constructor(httpClient, injector, envelopeSvc, vTokenStateService) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.envelopeSvc = envelopeSvc;
        this.vTokenStateService = vTokenStateService;
        this.workingField = new FieldData({ order: 0, fName: '' });
        this.fields = [];
        this._total = -1;
        this._fields = new ReplaySubject();
        this._recipient = new ReplaySubject();
        this._showSig = new ReplaySubject();
        this._signedFields = new BehaviorSubject({});
        this._envId = new ReplaySubject();
        this._rName = new ReplaySubject();
        this.signImgSubject = new ReplaySubject();
        this.initialImgSubject = new ReplaySubject();
        this.initialIdSubject = new ReplaySubject();
        this.signatureIdSubject = new ReplaySubject();
        this.signedFields = {};
        this.mode = '';
        this._config_token = this.injector.get(EssentialsConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
        this.envUrl = `${this._rForm_backend_url}/envelopes`;
    }
    /**
     * @param {?} payment
     * @return {?}
     */
    setWorkingPayment(payment) {
        this.workingPayment = payment;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    updateFields(fields) {
        this.fields = fields;
        this._fields.next(this.fields);
    }
    /**
     * @return {?}
     */
    postSignatureBlob() {
        /** @type {?} */
        const blobFile = this.signatureBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('signature', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/signatures', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload signature image');
            }
        }));
    }
    /**
     * @return {?}
     */
    postInitialBlob() {
        /** @type {?} */
        const blobFile = this.initialBlob;
        /** @type {?} */
        const formData = new FormData();
        formData.append('initial', blobFile, blobFile['name']);
        /** @type {?} */
        const request = new HttpRequest('POST', this._rForm_backend_url + '/initials', formData);
        return this.httpClient.request(request)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response && response['body']) {
                return response['body'];
            }
            else {
                console.error('Failed to upload Initial');
            }
        }));
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    toggleSig(bool) {
        this._showSig.next(bool);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setSigId(id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setInitialId(id) {
        this.initialId = id;
        this.initialIdSubject.next(id);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setSignImg(url) {
        this.signImg = url;
        this.signImgSubject.next(this.signImg);
    }
    /**
     * @return {?}
     */
    getSignImg() {
        return this.signImg;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    setInitialImg(url) {
        this.initialImg = url;
        this.initialImgSubject.next(this.initialImg);
    }
    /**
     * @return {?}
     */
    getInitialImg() {
        return this.initialImg;
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} signatureId
     * @return {?}
     */
    putSignatureField(envelopeId, fieldName, signatureId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}/signature/${signatureId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    /**
     * @param {?} envelopeId
     * @param {?} fieldName
     * @param {?} initialId
     * @return {?}
     */
    putInitialField(envelopeId, fieldName, initialId) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const ipAddress = yield this.getPublicIp();
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}/initial/${initialId}`, {
                ip_address: ipAddress
            }).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        })));
    }
    // refactor it to 4 functions
    /**
     * @param {?} envelopeId
     * @param {?=} ifPrepared
     * @return {?}
     */
    updateEnvelopeField(envelopeId, ifPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            const result = this.getEnvelopeFieldValue(ifPrepared);
            this.putEnvelopeField(envelopeId, result);
        }
    }
    /**
     * @param {?=} isPrepared
     * @return {?}
     */
    getEnvelopeFieldValue(isPrepared) {
        if (this.workingField && this.workingField.type) {
            /** @type {?} */
            const result = {
                value: ''
            };
            if (typeof (isPrepared) === 'boolean') {
                result['prepared'] = isPrepared;
            }
            switch (this.workingField.type.toLowerCase()) {
                case 'textbox':
                case 'checkbox':
                case 'date':
                    result.value = this.workingField.value;
                    break;
                default:
                    break;
            }
            return result;
        }
        return null;
    }
    /**
     * @param {?} envelopeId
     * @param {?} result
     * @return {?}
     */
    putEnvelopeField(envelopeId, result) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${this.workingField.fName}`, result).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @param {?} fieldName
     * @param {?=} ifPrepared
     * @return {?}
     */
    updateGroupedField(envelopeId, body, fieldName, ifPrepared) {
        if (typeof (ifPrepared) === 'boolean') {
            body['prepared'] = ifPrepared;
        }
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.httpClient
                .put(this.envUrl + `/${envelopeId}/fields/${fieldName}`, body).toPromise().then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                return resolve(res);
            }));
        }));
    }
    /**
     * @param {?} envelopeId
     * @param {?} setPrepared
     * @return {?}
     */
    prepareEnvelopeField(envelopeId, setPrepared) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.workingField && this.workingField.type) {
                /** @type {?} */
                const fieldType = this.workingField.type.toLowerCase();
                if (fieldType !== 'textbox' && fieldType !== 'date' && fieldType !== 'checkbox') {
                    return false;
                }
                else {
                    /** @type {?} */
                    const fieldResponse = yield this.updateEnvelopeField(envelopeId, setPrepared);
                    if (fieldResponse) {
                        return fieldResponse.prepared;
                    }
                }
            }
            return false;
        });
    }
    /**
     * @private
     * @return {?}
     */
    getPublicIp() {
        /** @type {?} */
        const apiUrl = 'https://api.ipify.org?format=jsonp';
        /** @type {?} */
        const callback = 'callback=JSONP_CALLBACK';
        return this.httpClient
            .jsonp(apiUrl, callback)
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res['ip'];
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error('Failed to get ip', err);
            return 'ip_unavailable';
        }));
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @param {?} vName
     * @param {?} pageNum
     * @param {?} id
     * @param {?} required
     * @param {?} order
     * @param {?} type
     * @return {?}
     */
    updateCurrentField(fName, result, vName, pageNum, id, required, order, type) {
        this.workingField.fName = fName;
        this.workingField.value = result;
        this.workingField.pageNum = pageNum;
        this.workingField.id = id;
        this.workingField.vName = vName;
        this.workingField.required = required;
        this.workingField.order = order;
        this.workingField.type = type;
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    setCurrentFields(fields) {
        this.currentFields = fields;
    }
    /**
     * @return {?}
     */
    get currField() {
        return this.workingField;
    }
    /**
     * @param {?} pageNum
     * @param {?} id
     * @return {?}
     */
    errorMessages(pageNum, id) {
        return this.currentFields[pageNum][id]['error'];
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setEnvId(id) {
        this._envId.next(id);
    }
    /**
     * @param {?} role
     * @return {?}
     */
    setrName(role) {
        this.rName = role;
        this._rName.next(role);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getSignatureUrl(data) {
        if (data) {
            /** @type {?} */
            const blob = dataURLtoBlob(data);
            /** @type {?} */
            const url = URL.createObjectURL(blob);
            return url;
        }
        return null;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setSignatureData(data) {
        /** @type {?} */
        const blob = dataURLtoBlob(data);
        /** @type {?} */
        const url = URL.createObjectURL(blob);
        this.signatureBlob = blob;
        this.setSignImg(url);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setInitialData(data) {
        /** @type {?} */
        const blob = dataURLtoBlob(data);
        /** @type {?} */
        const url = URL.createObjectURL(blob);
        this.initialBlob = blob;
        this.setInitialImg(url);
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    updateSigned(fName, result) {
        this.workingField['value'] = 'signed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    }
    /**
     * @param {?} fName
     * @param {?} result
     * @return {?}
     */
    updateInitialed(fName, result) {
        this.workingField['value'] = 'initialed';
        this.signedFields[fName] = result;
        this._signedFields.next(this.signedFields);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    setSignatureId(id) {
        this.signatureId = id;
        this.signatureIdSubject.next(id);
    }
    /**
     * @param {?} recipient
     * @return {?}
     */
    setRecipient(recipient) {
        this._recipient.next(recipient);
    }
    /**
     * @param {?} t
     * @return {?}
     */
    setTotal(t) {
        this._total = t;
    }
}
SignatureService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SignatureService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector },
    { type: DocumentsService },
    { type: VerdocsStateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialId;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.currentFields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingField;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.signatureBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialBlob;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.fields;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype._total;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.initialImg;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.workingPayment;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.rName;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.recipients;
    /** @type {?} */
    SignatureService.prototype._fields;
    /** @type {?} */
    SignatureService.prototype._recipient;
    /** @type {?} */
    SignatureService.prototype._showSig;
    /** @type {?} */
    SignatureService.prototype._signedFields;
    /** @type {?} */
    SignatureService.prototype._envId;
    /** @type {?} */
    SignatureService.prototype._rName;
    /** @type {?} */
    SignatureService.prototype.signImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialImgSubject;
    /** @type {?} */
    SignatureService.prototype.initialIdSubject;
    /** @type {?} */
    SignatureService.prototype.signatureIdSubject;
    /** @type {?} */
    SignatureService.prototype.signedFields;
    /** @type {?} */
    SignatureService.prototype.signImg;
    /** @type {?} */
    SignatureService.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.envelopeSvc;
    /**
     * @type {?}
     * @private
     */
    SignatureService.prototype.vTokenStateService;
}
//# sourceMappingURL=data:application/json;base64,