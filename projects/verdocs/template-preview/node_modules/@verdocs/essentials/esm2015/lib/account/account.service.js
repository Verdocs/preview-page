/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { VerdocsStateService } from '@verdocs/tokens';
import { ProfileModel, ProfileCollection } from '@verdocs/profiles';
import { EssentialsConfigToken } from '../essentials.module';
import { findIndex } from 'lodash';
export class AccountService {
    /**
     * @param {?} http
     * @param {?} router
     * @param {?} vTokenStateService
     * @param {?} injector
     */
    constructor(http, router, vTokenStateService, injector) {
        this.http = http;
        this.router = router;
        this.vTokenStateService = vTokenStateService;
        this.injector = injector;
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.profileLoadingSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.currentOrganizationId = null;
        this._config_token = this.injector.get(EssentialsConfigToken);
        this.backend_url = this._config_token.rAccount_backend_url;
        this.rForm_backend_url = this._config_token.rForm_backend_url;
        this.rSecure_backend_url = this._config_token.rSecure_backend_url;
    }
    /**
     * @return {?}
     */
    getAccountData() {
        /***********
        * Refactor *
        ***********/
        // const headerService = this.injector.get(HeaderService);
        // headerService.noHeader.subscribe(status => {
        // if (status === false) {
        this.getProfiles();
        // }
        // });
    }
    /**
     * @return {?}
     */
    getProfiles() {
        return this.http.get(this.backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            p => p.organization.name === 'realster')), 1);
            this.personalAccountSubject.next(personal[0]);
            this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            this.profileData.unshift(personal[0]);
            /** @type {?} */
            const currentIndex = findIndex(this.profileData, { current: true });
            if (this.profileData[currentIndex]['first_name']) {
                this.userFullname = this.profileData[currentIndex]['first_name'] + ' ' + this.profileData[currentIndex]['last_name'];
                this.userInitial = this.profileData[currentIndex]['first_name'].charAt(0) +
                    this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                this.userFullname = '';
            }
            if (this.profileData[currentIndex]['phone']) {
                this.userPhone = this.profileData[currentIndex]['phone'];
            }
            else {
                this.userPhone = '';
            }
            if (this.profileData[currentIndex]['email']) {
                this.userEmail = this.profileData[currentIndex]['email'];
            }
            this.userData = {
                name: this.userFullname,
                initial: this.userInitial,
                email: this.userEmail,
                phone: this.userPhone
            };
            this.userProfileSubject.next(this.profileData);
            /** @type {?} */
            const currentProfile = this.profileData[currentIndex];
            this.currentProfileSubject.next(currentProfile);
            this.currentOrganizationId = currentProfile.organization_id;
            this.userDataSubject.next(this.userData);
            return this.userData;
        }));
    }
    /**
     * @param {?} profiles
     * @return {?}
     */
    getProfileCollection(profiles) {
        /** @type {?} */
        const profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        profile => {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        const profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    removeFromProfileData(id) {
        /** @type {?} */
        const removeIndex = findIndex(this.profileData, { organization_id: name });
        if (removeIndex >= 0) {
            this.profileData.splice(removeIndex, 1);
            this.userProfileSubject.next(this.profileData);
        }
    }
    /**
     * @return {?}
     */
    getAllProfiles() {
        return this.http.get(this.backend_url + '/profiles/').toPromise();
    }
    /**
     * @param {?} profile_id
     * @return {?}
     */
    switchProfile(profile_id) {
        this.profileLoadingSubject.next(true);
        return this.http.post(this.backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.vTokenStateService.setTokens(res.tokens);
            this.profileLoadingSubject.next(false);
            return Promise.resolve(res);
        })));
    }
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    updateTokens(sendMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.vTokenStateService.updateTokens(this.rSecure_backend_url).subscribe((/**
                 * @param {?} tokens
                 * @return {?}
                 */
                tokens => {
                    if (tokens && tokens.length > 0) {
                        if (sendMessage) {
                            // this.snackbar.dismiss();
                            this.createSnackbar('Status updated');
                        }
                    }
                    this.getAccountData();
                    return resolve();
                }));
            }));
        });
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.http.post(this.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.createSnackbar('Verification email sent');
        }));
    }
    /**
     * *****************************
     * replace with snackbar service *
     * ******************************
     * @param {?} message
     * @return {?}
     */
    createSnackbar(message) {
        // let snackbarConfig: MatSnackBarConfig
        // if (window.innerWidth >= 920) {
        //   snackbarConfig = {
        //     verticalPosition: 'bottom',
        //     horizontalPosition: 'left',
        //     duration: 5000
        //   }
        // } else {
        //   snackbarConfig = {
        //     verticalPosition: 'top',
        //     duration: 5000
        //   }
        // }
        // this.snackbar.open(message, null, snackbarConfig);
    }
    /**
     * @param {?} userData
     * @return {?}
     */
    putAccountData(userData) {
        if (userData.email) {
            this.userData.email = userData.email;
        }
        if (userData.first_name && userData.last_name) {
            this.userData.name = userData.first_name + ' ' + userData.last_name;
            this.userData.initial = userData.first_name.charAt(0) + userData.last_name.charAt(0);
        }
        if (userData.phone) {
            this.userData.phone = userData.phone || '';
        }
        this.http.put(this.backend_url + '/profiles/' + userData.id, userData).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.userDataSubject.next(this.userData);
        }));
    }
    /**
     * @return {?}
     */
    deleteAccount() {
        return this.http.delete(this.backend_url).toPromise();
    }
    /**
     * @param {?} email
     * @param {?} oldPassword
     * @param {?} newPassword
     * @return {?}
     */
    changePassword(email, oldPassword, newPassword) {
        return this.http.put(this.backend_url + 'updatepassword', {
            email,
            oldPassword,
            newPassword
        }).toPromise();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getNameValidity(name) {
        return this.http.get(this.backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @param {?} body
     * @return {?}
     */
    createOrganization(body) {
        return this.http.post(this.backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getOptions() {
        /** @type {?} */
        const rTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        const authValue = 'Bearer ' + rTokenCookie['accessToken'];
        /** @type {?} */
        const headers = new Headers({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { 'headers': headers };
    }
    /**
     * @param {?} id
     * @param {?} roleName
     * @param {?} invite
     * @param {?=} redirectReq
     * @return {?}
     */
    fetchToken(id, roleName, invite, redirectReq) {
        /** @type {?} */
        const req = this.rForm_backend_url + `/envelopes/${id}/recipients/${roleName}/invitation/${invite}`;
        return this.http.get(req, { observe: 'response' }).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.vTokenStateService.storeOtherCookie('signer_token', res['headers'].get('signer_token'));
            if (redirectReq) {
                this.router.navigate([`/view/sign/${id}/role/${roleName}`], { queryParams: { redirectReq: redirectReq } });
            }
            else {
                this.router.navigate([`/view/sign/${id}/role/${roleName}`]);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            this.router.navigate([`/view/sign/${id}/role/${roleName}`, { error: err }]);
        }));
    }
}
AccountService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AccountService.ctorParameters = () => [
    { type: HttpClient },
    { type: Router },
    { type: VerdocsStateService },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    AccountService.prototype.userDataSubject;
    /** @type {?} */
    AccountService.prototype.userProfileSubject;
    /** @type {?} */
    AccountService.prototype.profileLoadingSubject;
    /** @type {?} */
    AccountService.prototype.currentProfileSubject;
    /** @type {?} */
    AccountService.prototype.personalAccountSubject;
    /** @type {?} */
    AccountService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rSecure_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.currentOrganizationId;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    AccountService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvZXNzZW50aWFscy8iLCJzb3VyY2VzIjpbImxpYi9hY2NvdW50L2FjY291bnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEUsT0FBTyxFQUFvQixxQkFBcUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHbkMsTUFBTSxPQUFPLGNBQWM7Ozs7Ozs7SUEwQnpCLFlBQ1UsSUFBZ0IsRUFDaEIsTUFBYyxFQUNkLGtCQUF1QyxFQUN2QyxRQUFrQjtRQUhsQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXFCO1FBQ3ZDLGFBQVEsR0FBUixRQUFRLENBQVU7UUE3QnJCLG9CQUFlLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUMzQyx1QkFBa0IsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQzlDLDBCQUFxQixHQUFHLElBQUksYUFBYSxFQUFXLENBQUM7UUFDckQsMEJBQXFCLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUNqRCwyQkFBc0IsR0FBRyxJQUFJLGFBQWEsRUFBTyxDQUFDO1FBQ2xELG9CQUFlLEdBQUcsSUFBSSxhQUFhLEVBQU8sQ0FBQztRQUcxQyxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQUNqQixjQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ2YsY0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNmLGFBQVEsR0FBRztZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVk7WUFDdkIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTO1NBQ3RCLENBQUM7UUFNTSwwQkFBcUIsR0FBVyxJQUFJLENBQUM7UUFRM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztRQUMzRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztRQUM5RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztJQUNwRSxDQUFDOzs7O0lBRUQsY0FBYztRQUNaOztvQkFFWTtRQUNaLDBEQUEwRDtRQUMxRCwrQ0FBK0M7UUFDN0MsMEJBQTBCO1FBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQixJQUFJO1FBQ04sTUFBTTtJQUNSLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUk7Ozs7UUFBQyxDQUFDLEdBQVUsRUFBRSxFQUFFOztrQkFDN0UsUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUc7Ozs7WUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBQyxFQUFFLENBQUMsQ0FBQztZQUN2RixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUk7Ozs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUU7b0JBQzdDLE9BQU8sQ0FBQyxDQUFDLENBQUM7aUJBQ1g7Z0JBQ0QsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRTtvQkFDN0MsT0FBTyxDQUFDLENBQUM7aUJBQ1Y7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLEVBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOztrQkFDaEMsWUFBWSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1lBQ25FLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNySCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDdkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDekQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7YUFDeEI7WUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQzthQUNyQjtZQUNELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRztnQkFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQ3ZCLE9BQU8sRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDekIsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTO2dCQUNyQixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVM7YUFDdEIsQ0FBQztZQUNGLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOztrQkFDekMsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1lBQ3JELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxlQUFlLENBQUM7WUFDNUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsb0JBQW9CLENBQUMsUUFBUTs7Y0FDckIsYUFBYSxHQUFtQixFQUFFO1FBQ3hDLFFBQVEsQ0FBQyxPQUFPOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekIsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUMsRUFBQyxDQUFDOztjQUNHLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsYUFBYSxDQUFDO1FBQzlELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQzs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxFQUFFOztjQUNoQixXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDMUUsSUFBSSxXQUFXLElBQUksQ0FBQyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBUSxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzNFLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLFVBQVU7UUFDdEIsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLFVBQVUsR0FBRyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSTs7OztRQUFDLENBQU8sR0FBUSxFQUFFLEVBQUU7WUFDeEgsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFBLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUssWUFBWSxDQUFDLFdBQXFCOztZQUN0QyxPQUFPLElBQUksT0FBTzs7Ozs7WUFBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTOzs7O2dCQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUNoRixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDL0IsSUFBSSxXQUFXLEVBQUU7NEJBQ2YsMkJBQTJCOzRCQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUM7eUJBQ3ZDO3FCQUNGO29CQUNELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDdEIsT0FBTyxPQUFPLEVBQUUsQ0FBQztnQkFDbkIsQ0FBQyxFQUFDLENBQUE7WUFDSixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUM7S0FBQTs7OztJQUVELHVCQUF1QjtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSTs7O1FBQUMsR0FBRyxFQUFFO1lBQ2hHLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUNqRCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7O0lBSUQsY0FBYyxDQUFDLE9BQWU7UUFDNUIsd0NBQXdDO1FBQ3hDLGtDQUFrQztRQUNsQyx1QkFBdUI7UUFDdkIsa0NBQWtDO1FBQ2xDLGtDQUFrQztRQUNsQyxxQkFBcUI7UUFDckIsTUFBTTtRQUNOLFdBQVc7UUFDWCx1QkFBdUI7UUFDdkIsK0JBQStCO1FBQy9CLHFCQUFxQjtRQUNyQixNQUFNO1FBQ04sSUFBSTtRQUNKLHFEQUFxRDtJQUN2RCxDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxRQUFRO1FBQ3JCLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxRQUFRLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztZQUNwRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0RjtRQUNELElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQztTQUM1QztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSTs7O1FBQUMsR0FBRyxFQUFFO1lBQzNGLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDeEQsQ0FBQzs7Ozs7OztJQUVELGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFdBQVc7UUFDNUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLGdCQUFnQixFQUFFO1lBQ3hELEtBQUs7WUFDTCxXQUFXO1lBQ1gsV0FBVztTQUNaLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxJQUFJO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRywrQkFBK0IsR0FBRyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQy9GLFNBQVMsRUFBRTthQUNYLElBQUk7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUNWLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsSUFBSTtRQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUNoRixTQUFTLEVBQUU7YUFDWCxJQUFJOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDVixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUVPLFVBQVU7O2NBQ1YsWUFBWSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQzs7Y0FDL0UsU0FBUyxHQUFHLFNBQVMsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDOztjQUNuRCxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUM7WUFDMUIsZUFBZSxFQUFFLFVBQVU7WUFDM0IsUUFBUSxFQUFFLFVBQVU7WUFDcEIsU0FBUyxFQUFFLCtCQUErQjtZQUMxQyxtQkFBbUIsRUFBRSxHQUFHO1lBQ3hCLGNBQWMsRUFBRSxrQkFBa0I7WUFDbEMsZUFBZSxFQUFFLFNBQVM7WUFDMUIsUUFBUSxFQUFFLGtCQUFrQjtTQUM3QixDQUFDO1FBQ0YsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7OztJQUVNLFVBQVUsQ0FBQyxFQUFVLEVBQUUsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsV0FBb0I7O2NBQzVFLEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsY0FBYyxFQUFFLGVBQWUsUUFBUSxlQUFlLE1BQU0sRUFBRTtRQUNuRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFNLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLFNBQVM7Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTtZQUNwRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztZQUM3RixJQUFJLFdBQVcsRUFBRTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGNBQWMsRUFBRSxTQUFTLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzVHO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsY0FBYyxFQUFFLFNBQVMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQzdEO1FBQ0gsQ0FBQzs7OztRQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxjQUFjLEVBQUUsU0FBUyxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUUsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUE3T0YsVUFBVTs7OztZQVRGLFVBQVU7WUFDVixNQUFNO1lBRU4sbUJBQW1CO1lBSlAsUUFBUTs7OztJQVkzQix5Q0FBa0Q7O0lBQ2xELDRDQUFxRDs7SUFDckQsK0NBQTREOztJQUM1RCwrQ0FBd0Q7O0lBQ3hELGdEQUF5RDs7SUFDekQseUNBQWtEOzs7OztJQUVsRCx1Q0FBd0M7Ozs7O0lBQ3hDLHNDQUEwQjs7Ozs7SUFDMUIscUNBQXlCOzs7OztJQUN6QixtQ0FBdUI7Ozs7O0lBQ3ZCLG1DQUF1Qjs7Ozs7SUFDdkIsa0NBS0U7Ozs7O0lBRUYscUNBQXlCOzs7OztJQUN6QixxQ0FBb0I7Ozs7O0lBQ3BCLDZDQUFvQzs7Ozs7SUFDcEMsMkNBQWtDOzs7OztJQUNsQywrQ0FBNkM7Ozs7O0lBRzNDLDhCQUF3Qjs7Ozs7SUFDeEIsZ0NBQXNCOzs7OztJQUN0Qiw0Q0FBK0M7Ozs7O0lBQy9DLGtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFZlcmRvY3NTdGF0ZVNlcnZpY2UgfSBmcm9tICdAdmVyZG9jcy90b2tlbnMnO1xuaW1wb3J0IHsgUHJvZmlsZU1vZGVsLCBQcm9maWxlQ29sbGVjdGlvbiB9IGZyb20gJ0B2ZXJkb2NzL3Byb2ZpbGVzJztcbmltcG9ydCB7IEVzc2VudGlhbHNDb25maWcsIEVzc2VudGlhbHNDb25maWdUb2tlbiB9IGZyb20gJy4uL2Vzc2VudGlhbHMubW9kdWxlJztcblxuaW1wb3J0IHsgZmluZEluZGV4IH0gZnJvbSAnbG9kYXNoJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjY291bnRTZXJ2aWNlIHtcbiAgcHVibGljIHVzZXJEYXRhU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcbiAgcHVibGljIHVzZXJQcm9maWxlU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGFueT4oKTtcbiAgcHVibGljIHByb2ZpbGVMb2FkaW5nU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIHB1YmxpYyBjdXJyZW50UHJvZmlsZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KCk7XG4gIHB1YmxpYyBwZXJzb25hbEFjY291bnRTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuICBwdWJsaWMgcHJvZmlsZXNTdWJqZWN0ID0gbmV3IFJlcGxheVN1YmplY3Q8YW55PigpO1xuXG4gIHByaXZhdGUgX2NvbmZpZ190b2tlbjogRXNzZW50aWFsc0NvbmZpZztcbiAgcHJpdmF0ZSB1c2VyRnVsbG5hbWUgPSAnJztcbiAgcHJpdmF0ZSB1c2VySW5pdGlhbCA9ICcnO1xuICBwcml2YXRlIHVzZXJFbWFpbCA9ICcnO1xuICBwcml2YXRlIHVzZXJQaG9uZSA9ICcnO1xuICBwcml2YXRlIHVzZXJEYXRhID0ge1xuICAgIG5hbWU6IHRoaXMudXNlckZ1bGxuYW1lLFxuICAgIGluaXRpYWw6IG51bGwsXG4gICAgZW1haWw6IHRoaXMudXNlckVtYWlsLFxuICAgIHBob25lOiB0aGlzLnVzZXJQaG9uZVxuICB9O1xuXG4gIHByaXZhdGUgcHJvZmlsZURhdGE6IGFueTtcbiAgcHJpdmF0ZSBiYWNrZW5kX3VybDtcbiAgcHJpdmF0ZSByU2VjdXJlX2JhY2tlbmRfdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgckZvcm1fYmFja2VuZF91cmw6IHN0cmluZztcbiAgcHJpdmF0ZSBjdXJyZW50T3JnYW5pemF0aW9uSWQ6IHN0cmluZyA9IG51bGw7XG4gIFxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIHZUb2tlblN0YXRlU2VydmljZTogVmVyZG9jc1N0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHtcbiAgICB0aGlzLl9jb25maWdfdG9rZW4gPSB0aGlzLmluamVjdG9yLmdldChFc3NlbnRpYWxzQ29uZmlnVG9rZW4pO1xuICAgIHRoaXMuYmFja2VuZF91cmwgPSB0aGlzLl9jb25maWdfdG9rZW4uckFjY291bnRfYmFja2VuZF91cmw7XG4gICAgdGhpcy5yRm9ybV9iYWNrZW5kX3VybCA9IHRoaXMuX2NvbmZpZ190b2tlbi5yRm9ybV9iYWNrZW5kX3VybDtcbiAgICB0aGlzLnJTZWN1cmVfYmFja2VuZF91cmwgPSB0aGlzLl9jb25maWdfdG9rZW4uclNlY3VyZV9iYWNrZW5kX3VybDtcbiAgfVxuXG4gIGdldEFjY291bnREYXRhKCkge1xuICAgIC8qKioqKioqKioqKlxuICAgICogUmVmYWN0b3IgKlxuICAgICoqKioqKioqKioqL1xuICAgIC8vIGNvbnN0IGhlYWRlclNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChIZWFkZXJTZXJ2aWNlKTtcbiAgICAvLyBoZWFkZXJTZXJ2aWNlLm5vSGVhZGVyLnN1YnNjcmliZShzdGF0dXMgPT4ge1xuICAgICAgLy8gaWYgKHN0YXR1cyA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5nZXRQcm9maWxlcygpO1xuICAgICAgLy8gfVxuICAgIC8vIH0pO1xuICB9XG5cbiAgZ2V0UHJvZmlsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5iYWNrZW5kX3VybCArICcvcHJvZmlsZXMnKS50b1Byb21pc2UoKS50aGVuKChyZXM6IGFueVtdKSA9PiB7XG4gICAgICBjb25zdCBwZXJzb25hbCA9IHJlcy5zcGxpY2UoZmluZEluZGV4KHJlcywgcCA9PiBwLm9yZ2FuaXphdGlvbi5uYW1lID09PSAncmVhbHN0ZXInKSwgMSk7XG4gICAgICB0aGlzLnBlcnNvbmFsQWNjb3VudFN1YmplY3QubmV4dChwZXJzb25hbFswXSk7XG4gICAgICB0aGlzLnByb2ZpbGVEYXRhID0gcmVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEub3JnYW5pemF0aW9uLm5hbWUgPCBiLm9yZ2FuaXphdGlvbi5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhLm9yZ2FuaXphdGlvbi5uYW1lID4gYi5vcmdhbml6YXRpb24ubmFtZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnByb2ZpbGVEYXRhLnVuc2hpZnQocGVyc29uYWxbMF0pO1xuICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gZmluZEluZGV4KHRoaXMucHJvZmlsZURhdGEsIHsgY3VycmVudDogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb2ZpbGVEYXRhW2N1cnJlbnRJbmRleF1bJ2ZpcnN0X25hbWUnXSkge1xuICAgICAgICB0aGlzLnVzZXJGdWxsbmFtZSA9IHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnZmlyc3RfbmFtZSddICsgJyAnICsgdGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdWydsYXN0X25hbWUnXTtcbiAgICAgICAgdGhpcy51c2VySW5pdGlhbCA9IHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsnZmlyc3RfbmFtZSddLmNoYXJBdCgwKSArXG4gICAgICAgICAgdGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdWydsYXN0X25hbWUnXS5jaGFyQXQoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVzZXJGdWxsbmFtZSA9ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsncGhvbmUnXSkge1xuICAgICAgICB0aGlzLnVzZXJQaG9uZSA9IHRoaXMucHJvZmlsZURhdGFbY3VycmVudEluZGV4XVsncGhvbmUnXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudXNlclBob25lID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdWydlbWFpbCddKSB7XG4gICAgICAgIHRoaXMudXNlckVtYWlsID0gdGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdWydlbWFpbCddO1xuICAgICAgfVxuICAgICAgdGhpcy51c2VyRGF0YSA9IHtcbiAgICAgICAgbmFtZTogdGhpcy51c2VyRnVsbG5hbWUsXG4gICAgICAgIGluaXRpYWw6IHRoaXMudXNlckluaXRpYWwsXG4gICAgICAgIGVtYWlsOiB0aGlzLnVzZXJFbWFpbCxcbiAgICAgICAgcGhvbmU6IHRoaXMudXNlclBob25lXG4gICAgICB9O1xuICAgICAgdGhpcy51c2VyUHJvZmlsZVN1YmplY3QubmV4dCh0aGlzLnByb2ZpbGVEYXRhKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRQcm9maWxlID0gdGhpcy5wcm9maWxlRGF0YVtjdXJyZW50SW5kZXhdO1xuICAgICAgdGhpcy5jdXJyZW50UHJvZmlsZVN1YmplY3QubmV4dChjdXJyZW50UHJvZmlsZSk7XG4gICAgICB0aGlzLmN1cnJlbnRPcmdhbml6YXRpb25JZCA9IGN1cnJlbnRQcm9maWxlLm9yZ2FuaXphdGlvbl9pZDtcbiAgICAgIHRoaXMudXNlckRhdGFTdWJqZWN0Lm5leHQodGhpcy51c2VyRGF0YSk7XG4gICAgICByZXR1cm4gdGhpcy51c2VyRGF0YTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldFByb2ZpbGVDb2xsZWN0aW9uKHByb2ZpbGVzKSB7XG4gICAgY29uc3QgcHJvZmlsZU1vZGVsczogUHJvZmlsZU1vZGVsW10gPSBbXTtcbiAgICBwcm9maWxlcy5mb3JFYWNoKHByb2ZpbGUgPT4ge1xuICAgICAgcHJvZmlsZU1vZGVscy5wdXNoKG5ldyBQcm9maWxlTW9kZWwocHJvZmlsZSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IHByb2ZpbGVDb2xsZWN0aW9uID0gbmV3IFByb2ZpbGVDb2xsZWN0aW9uKHByb2ZpbGVNb2RlbHMpO1xuICAgIHJldHVybiBwcm9maWxlQ29sbGVjdGlvbjtcbiAgfVxuXG4gIHJlbW92ZUZyb21Qcm9maWxlRGF0YShpZCkge1xuICAgIGNvbnN0IHJlbW92ZUluZGV4ID0gZmluZEluZGV4KHRoaXMucHJvZmlsZURhdGEsIHsgb3JnYW5pemF0aW9uX2lkOiBuYW1lIH0pO1xuICAgIGlmIChyZW1vdmVJbmRleCA+PSAwKSB7XG4gICAgICB0aGlzLnByb2ZpbGVEYXRhLnNwbGljZShyZW1vdmVJbmRleCwgMSk7XG4gICAgICB0aGlzLnVzZXJQcm9maWxlU3ViamVjdC5uZXh0KHRoaXMucHJvZmlsZURhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGdldEFsbFByb2ZpbGVzKCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PGFueVtdPih0aGlzLmJhY2tlbmRfdXJsICsgJy9wcm9maWxlcy8nKS50b1Byb21pc2UoKTtcbiAgfVxuXG4gIHN3aXRjaFByb2ZpbGUocHJvZmlsZV9pZCkge1xuICAgIHRoaXMucHJvZmlsZUxvYWRpbmdTdWJqZWN0Lm5leHQodHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYmFja2VuZF91cmwgKyAnL3Byb2ZpbGVzLycgKyBwcm9maWxlX2lkICsgJy9zd2l0Y2gnLCBudWxsKS50b1Byb21pc2UoKS50aGVuKGFzeW5jIChyZXM6IGFueSkgPT4ge1xuICAgICAgdGhpcy52VG9rZW5TdGF0ZVNlcnZpY2Uuc2V0VG9rZW5zKHJlcy50b2tlbnMpO1xuICAgICAgdGhpcy5wcm9maWxlTG9hZGluZ1N1YmplY3QubmV4dChmYWxzZSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyB1cGRhdGVUb2tlbnMoc2VuZE1lc3NhZ2U/OiBib29sZWFuKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMudlRva2VuU3RhdGVTZXJ2aWNlLnVwZGF0ZVRva2Vucyh0aGlzLnJTZWN1cmVfYmFja2VuZF91cmwpLnN1YnNjcmliZSh0b2tlbnMgPT4ge1xuICAgICAgICBpZiAodG9rZW5zICYmIHRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHNlbmRNZXNzYWdlKSB7XG4gICAgICAgICAgICAvLyB0aGlzLnNuYWNrYmFyLmRpc21pc3MoKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU25hY2tiYXIoJ1N0YXR1cyB1cGRhdGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0QWNjb3VudERhdGEoKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxuICByZXNlbmRFbWFpbFZlcmlmaWNhdGlvbigpIHtcbiAgICB0aGlzLmh0dHAucG9zdCh0aGlzLnJTZWN1cmVfYmFja2VuZF91cmwgKyAnL3VzZXIvZW1haWxfdmVyaWZpY2F0aW9uJywgbnVsbCkudG9Qcm9taXNlKCkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmNyZWF0ZVNuYWNrYmFyKCdWZXJpZmljYXRpb24gZW1haWwgc2VudCcpO1xuICAgIH0pO1xuICB9XG4gIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICAqIHJlcGxhY2Ugd2l0aCBzbmFja2JhciBzZXJ2aWNlICpcbiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gIGNyZWF0ZVNuYWNrYmFyKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIC8vIGxldCBzbmFja2JhckNvbmZpZzogTWF0U25hY2tCYXJDb25maWdcbiAgICAvLyBpZiAod2luZG93LmlubmVyV2lkdGggPj0gOTIwKSB7XG4gICAgLy8gICBzbmFja2JhckNvbmZpZyA9IHtcbiAgICAvLyAgICAgdmVydGljYWxQb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgLy8gICAgIGhvcml6b250YWxQb3NpdGlvbjogJ2xlZnQnLFxuICAgIC8vICAgICBkdXJhdGlvbjogNTAwMFxuICAgIC8vICAgfVxuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICBzbmFja2JhckNvbmZpZyA9IHtcbiAgICAvLyAgICAgdmVydGljYWxQb3NpdGlvbjogJ3RvcCcsXG4gICAgLy8gICAgIGR1cmF0aW9uOiA1MDAwXG4gICAgLy8gICB9XG4gICAgLy8gfVxuICAgIC8vIHRoaXMuc25hY2tiYXIub3BlbihtZXNzYWdlLCBudWxsLCBzbmFja2JhckNvbmZpZyk7XG4gIH1cblxuICBwdXRBY2NvdW50RGF0YSh1c2VyRGF0YSkge1xuICAgIGlmICh1c2VyRGF0YS5lbWFpbCkge1xuICAgICAgdGhpcy51c2VyRGF0YS5lbWFpbCA9IHVzZXJEYXRhLmVtYWlsO1xuICAgIH1cbiAgICBpZiAodXNlckRhdGEuZmlyc3RfbmFtZSAmJiB1c2VyRGF0YS5sYXN0X25hbWUpIHtcbiAgICAgIHRoaXMudXNlckRhdGEubmFtZSA9IHVzZXJEYXRhLmZpcnN0X25hbWUgKyAnICcgKyB1c2VyRGF0YS5sYXN0X25hbWU7XG4gICAgICB0aGlzLnVzZXJEYXRhLmluaXRpYWwgPSB1c2VyRGF0YS5maXJzdF9uYW1lLmNoYXJBdCgwKSArIHVzZXJEYXRhLmxhc3RfbmFtZS5jaGFyQXQoMCk7XG4gICAgfVxuICAgIGlmICh1c2VyRGF0YS5waG9uZSkge1xuICAgICAgdGhpcy51c2VyRGF0YS5waG9uZSA9IHVzZXJEYXRhLnBob25lIHx8ICcnO1xuICAgIH1cbiAgICB0aGlzLmh0dHAucHV0KHRoaXMuYmFja2VuZF91cmwgKyAnL3Byb2ZpbGVzLycgKyB1c2VyRGF0YS5pZCwgdXNlckRhdGEpLnRvUHJvbWlzZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy51c2VyRGF0YVN1YmplY3QubmV4dCh0aGlzLnVzZXJEYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZUFjY291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUodGhpcy5iYWNrZW5kX3VybCkudG9Qcm9taXNlKCk7XG4gIH1cblxuICBjaGFuZ2VQYXNzd29yZChlbWFpbCwgb2xkUGFzc3dvcmQsIG5ld1Bhc3N3b3JkKSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQodGhpcy5iYWNrZW5kX3VybCArICd1cGRhdGVwYXNzd29yZCcsIHtcbiAgICAgIGVtYWlsLFxuICAgICAgb2xkUGFzc3dvcmQsXG4gICAgICBuZXdQYXNzd29yZFxuICAgIH0pLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgZ2V0TmFtZVZhbGlkaXR5KG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmJhY2tlbmRfdXJsICsgJy9vcmdhbml6YXRpb25zL2lzX3ZhbGlkP25hbWU9JyArIG5hbWUsIHRoaXMuZ2V0T3B0aW9ucygpKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlcyk7XG4gICAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZU9yZ2FuaXphdGlvbihib2R5KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYmFja2VuZF91cmwgKyAnL29yZ2FuaXphdGlvbnMnLCBib2R5LCB0aGlzLmdldE9wdGlvbnMoKSlcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXMpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldE9wdGlvbnMoKTogYW55IHtcbiAgICBjb25zdCByVG9rZW5Db29raWUgPSB0aGlzLnZUb2tlblN0YXRlU2VydmljZS5nZXRPdGhlckNvb2tpZU9iamVjdCgnckFjY291bnRfVmVyZG9jcycpO1xuICAgIGNvbnN0IGF1dGhWYWx1ZSA9ICdCZWFyZXIgJyArIHJUb2tlbkNvb2tpZVsnYWNjZXNzVG9rZW4nXTtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoe1xuICAgICAgJ0NhY2hlLUNvbnRyb2wnOiAnbm8tY2FjaGUnLFxuICAgICAgJ1ByYWdtYSc6ICduby1jYWNoZScsXG4gICAgICAnRXhwaXJlcyc6ICdTYXQsIDAxIEphbiAyMDAwIDAwOjAwOjAwIEdNVCcsXG4gICAgICAnSWYtTW9kaWZpZWQtU2luY2UnOiAnMCcsXG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0F1dGhvcml6YXRpb24nOiBhdXRoVmFsdWUsXG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfSk7XG4gICAgcmV0dXJuIHsgJ2hlYWRlcnMnOiBoZWFkZXJzIH07XG4gIH1cblxuICBwdWJsaWMgZmV0Y2hUb2tlbihpZDogc3RyaW5nLCByb2xlTmFtZTogc3RyaW5nLCBpbnZpdGU6IHN0cmluZywgcmVkaXJlY3RSZXE/OiBzdHJpbmcpIHtcbiAgICBjb25zdCByZXEgPSB0aGlzLnJGb3JtX2JhY2tlbmRfdXJsICsgYC9lbnZlbG9wZXMvJHtpZH0vcmVjaXBpZW50cy8ke3JvbGVOYW1lfS9pbnZpdGF0aW9uLyR7aW52aXRlfWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQ8YW55PihyZXEsIHtvYnNlcnZlOiAncmVzcG9uc2UnfSkuc3Vic2NyaWJlKHJlcyA9PiB7XG4gICAgICB0aGlzLnZUb2tlblN0YXRlU2VydmljZS5zdG9yZU90aGVyQ29va2llKCdzaWduZXJfdG9rZW4nLCByZXNbJ2hlYWRlcnMnXS5nZXQoJ3NpZ25lcl90b2tlbicpKTtcbiAgICAgIGlmIChyZWRpcmVjdFJlcSkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbYC92aWV3L3NpZ24vJHtpZH0vcm9sZS8ke3JvbGVOYW1lfWBdLCB7IHF1ZXJ5UGFyYW1zOiB7IHJlZGlyZWN0UmVxOiByZWRpcmVjdFJlcSB9IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW2Avdmlldy9zaWduLyR7aWR9L3JvbGUvJHtyb2xlTmFtZX1gXSk7XG4gICAgICB9XG4gICAgfSwgZXJyID0+IHtcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgL3ZpZXcvc2lnbi8ke2lkfS9yb2xlLyR7cm9sZU5hbWV9YCwgeyBlcnJvcjogZXJyIH1dKTtcbiAgICB9KTtcbiAgfVxufVxuIl19