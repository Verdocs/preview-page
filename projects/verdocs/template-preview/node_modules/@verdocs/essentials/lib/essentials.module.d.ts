import { InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AngularApiModule } from '@verdocs/sdk';
import { SnackbarService } from './snackbar/snackbar.service';
import { AccountService } from './account/account.service';
import { BrowserToiTextService } from './builder/browser-to-iText.service';
import { BuilderDataService } from './builder/builder-data.service';
import { BuilderService } from './builder/builder-settings.service';
import { ConversionService } from './fields/conversion.service';
import { SignatureService } from './fields/envelope-signature.service';
import { EnvelopeViewService } from './fields/envelope-view.service';
import { PageService } from './fields/page.service';
import { ModalService } from './modal/modal.service';
import { ErrorDialogService } from './error-dialogs/error-dialog.service';
import { GuardService } from './guards/guard.service';
import { FourOhOneDialog } from './dialogs/error-dialogs/four-oh-one.dialog';
import { PlansDialog } from './dialogs/plan-dialogs/plans-dialog.component';
export interface EssentialsConfig {
    production: boolean;
    domain: string;
    rForm_backend_url: string;
    rForm_frontend_url: string;
    rSecure_frontend_url: string;
    rSecure_backend_url: string;
    rAccount_frontend_url: string;
    rAccount_backend_url: string;
    rNotification_backend_url: string;
    rForm_cookie_name: string;
    loginURL: string;
    origin: 'rAccount' | 'rForm';
    plans: {
        'level-1': string;
        'level-2': string;
        'level-3': string;
    };
}
export declare const EssentialsConfigToken: InjectionToken<EssentialsConfig>;
export declare class EssentialsModule {
    static initializeEssentials(config: EssentialsConfig): {
        ngModule: typeof EssentialsModule;
        import: (typeof CommonModule | {
            ngModule: typeof AngularApiModule;
            imports: {
                ngModule: typeof import("@verdocs/tokens").TokensModule;
                providers: {
                    provide: InjectionToken<import("@verdocs/tokens").VTokenConfig>;
                    useValue: import("@verdocs/tokens").VTokenConfig;
                }[];
            }[];
            providers: (typeof import("@verdocs/sdk").ValidatorService | typeof import("@verdocs/sdk").AuthGuardService | typeof import("@verdocs/sdk").DocumentsService | typeof import("@verdocs/sdk").EnvelopRemindersService | typeof import("@verdocs/sdk").RecipientService | typeof import("@verdocs/sdk").TemplatesGuardService | typeof import("@verdocs/sdk").TemplatesService | typeof import("@verdocs/sdk").TemplatesRemindersService | typeof import("@verdocs/sdk").BuilderService | {
                provide: InjectionToken<import("@verdocs/sdk").VSDKConfig>;
                useValue: import("@verdocs/sdk").VSDKConfig;
            })[];
        })[];
        providers: (typeof SnackbarService | typeof BrowserToiTextService | typeof BuilderDataService | typeof BuilderService | typeof ConversionService | typeof SignatureService | typeof EnvelopeViewService | typeof PageService | typeof ModalService | typeof ErrorDialogService | typeof GuardService | typeof AccountService | {
            provide: InjectionToken<EssentialsConfig>;
            useValue: EssentialsConfig;
        })[];
        declarations: (typeof FourOhOneDialog | typeof PlansDialog)[];
        EntryComponents: (typeof FourOhOneDialog | typeof PlansDialog)[];
        exports: (typeof FourOhOneDialog | typeof PlansDialog)[];
    };
}
