import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DocumentsService, FieldData } from '@verdocs/sdk';
import { VerdocsStateService } from '@verdocs/tokens';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
export declare class SignatureService {
    private httpClient;
    private injector;
    private envelopeSvc;
    private vTokenStateService;
    private _config_token;
    private signatureId;
    private initialId;
    private _rForm_backend_url;
    private envUrl;
    private currentFields;
    private workingField;
    private signatureBlob;
    private initialBlob;
    private fields;
    private _total;
    private initialImg;
    private workingPayment;
    private rName;
    private recipients;
    _fields: ReplaySubject<any[]>;
    _recipient: ReplaySubject<string>;
    _showSig: ReplaySubject<boolean>;
    _signedFields: BehaviorSubject<any>;
    _envId: ReplaySubject<string>;
    _rName: ReplaySubject<string>;
    signImgSubject: ReplaySubject<any>;
    initialImgSubject: ReplaySubject<any>;
    initialIdSubject: ReplaySubject<string>;
    signatureIdSubject: ReplaySubject<string>;
    signedFields: any;
    signImg: any;
    mode: string;
    constructor(httpClient: HttpClient, injector: Injector, envelopeSvc: DocumentsService, vTokenStateService: VerdocsStateService);
    setWorkingPayment(payment: any): void;
    updateFields(fields: any[]): void;
    postSignatureBlob(): Promise<any>;
    postInitialBlob(): Promise<any>;
    toggleSig(bool: any): void;
    setSigId(id: any): void;
    setInitialId(id: any): void;
    setSignImg(url: any): void;
    getSignImg(): any;
    setInitialImg(url: any): void;
    getInitialImg(): any;
    putSignatureField(envelopeId: any, fieldName: any, signatureId: any): Promise<any>;
    putInitialField(envelopeId: any, fieldName: any, initialId: any): Promise<any>;
    updateEnvelopeField(envelopeId: any, ifPrepared?: boolean): void;
    getEnvelopeFieldValue(isPrepared?: boolean): {
        value: string;
    };
    putEnvelopeField(envelopeId: any, result: any): Promise<any>;
    updateGroupedField(envelopeId: any, body: any, fieldName: any, ifPrepared?: boolean): Promise<any>;
    prepareEnvelopeField(envelopeId: any, setPrepared: any): Promise<boolean>;
    private getPublicIp;
    updateCurrentField(fName: string, result: string, vName: string, pageNum: number, id: number, required: boolean, order: number, type: string): void;
    setCurrentFields(fields: any[]): void;
    readonly currField: FieldData<any>;
    errorMessages(pageNum: any, id: any): any;
    setEnvId(id: any): void;
    setrName(role: any): void;
    getSignatureUrl(data: any): string;
    setSignatureData(data: any): void;
    setInitialData(data: any): void;
    updateSigned(fName: any, result: any): void;
    updateInitialed(fName: any, result: any): void;
    setSignatureId(id: any): void;
    setRecipient(recipient: string): void;
    setTotal(t: number): void;
}
