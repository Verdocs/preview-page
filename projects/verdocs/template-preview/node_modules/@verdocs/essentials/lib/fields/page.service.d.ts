import { RendererFactory2, Injector } from '@angular/core';
import { Title, Meta } from '@angular/platform-browser';
import { ActivatedRoute, Router } from '@angular/router';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
declare enum Robots {
    Noindex = "Noindex",
    Index = "Index",
    Follow = "Follow",
    Noimageindex = "Noimageindex",
    None = "None",
    Noarchive = "Noarchive",
    Nocache = "Nocache",
    Nosnippet = "Nosnippet"
}
export declare class PageService {
    private titleService;
    private injector;
    private meta;
    private rendererFactory;
    private activatedRoute;
    private router;
    private vTokenStateService;
    private tokenObject;
    private platform;
    private document;
    private _config_token;
    private segmentIsInitialized;
    private lazyTitle;
    constructor(titleService: Title, injector: Injector, meta: Meta, rendererFactory: RendererFactory2, activatedRoute: ActivatedRoute, router: Router, vTokenStateService: VerdocsStateService, tokenObject: VerdocsTokenObjectService, platform: any, document: any);
    inti(): void;
    setTitleAndRecord(title: string, pageName?: string): void;
    setMetaProperty(property: any, content: any): void;
    setMetaName(property: any, content: any): void;
    setOpenGraphMeta(type: string, title: string, description: string, image: string, url: string): void;
    setRobotMeta(...robot_values: string[]): void;
    setCanonicalUrl(tag: LinkDefinition): void;
    setDescriptionMeta(content: string): void;
    getMetaTag(name: string): HTMLMetaElement;
    getMetaTagProperty(property: string): HTMLMetaElement;
    private initializeSegment;
    robotEnum(): typeof Robots;
    private planType;
    addTag(tag: LinkDefinition, forceCreation?: boolean): void;
    private _parseSelector;
    private additionalSetupForWidgets;
}
export declare type LinkDefinition = {
    charset?: string;
    crossorigin?: string;
    href?: string;
    hreflang?: string;
    media?: string;
    rel?: string;
    rev?: string;
    sizes?: string;
    target?: string;
    type?: string;
} & {
    [prop: string]: string;
};
export {};
