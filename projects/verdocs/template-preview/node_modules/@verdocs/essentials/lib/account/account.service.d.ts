import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { VerdocsStateService } from '@verdocs/tokens';
import { ProfileCollection } from '@verdocs/profiles';
export declare class AccountService {
    private http;
    private router;
    private vTokenStateService;
    private injector;
    userDataSubject: ReplaySubject<any>;
    userProfileSubject: ReplaySubject<any>;
    profileLoadingSubject: ReplaySubject<boolean>;
    currentProfileSubject: ReplaySubject<any>;
    personalAccountSubject: ReplaySubject<any>;
    profilesSubject: ReplaySubject<any>;
    private _config_token;
    private userFullname;
    private userInitial;
    private userEmail;
    private userPhone;
    private userData;
    private profileData;
    private backend_url;
    private rSecure_backend_url;
    private rForm_backend_url;
    private currentOrganizationId;
    constructor(http: HttpClient, router: Router, vTokenStateService: VerdocsStateService, injector: Injector);
    getAccountData(): void;
    getProfiles(): Promise<{
        name: string;
        initial: any;
        email: string;
        phone: string;
    }>;
    getProfileCollection(profiles: any): ProfileCollection;
    removeFromProfileData(id: any): void;
    getAllProfiles(): Promise<any[]>;
    switchProfile(profile_id: any): Promise<any>;
    updateTokens(sendMessage?: boolean): Promise<unknown>;
    resendEmailVerification(): void;
    /********************************
    * replace with snackbar service *
    ********************************/
    createSnackbar(message: string): void;
    putAccountData(userData: any): void;
    deleteAccount(): Promise<Object>;
    changePassword(email: any, oldPassword: any, newPassword: any): Promise<Object>;
    getNameValidity(name: any): Promise<ArrayBuffer>;
    createOrganization(body: any): Promise<ArrayBuffer>;
    private getOptions;
    fetchToken(id: string, roleName: string, invite: string, redirectReq?: string): import("rxjs").Subscription;
}
