import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { TemplatesService, ITemplate, IPage, IRole, IField, OptionType, FieldRole, TemplatesGuardService } from '@verdocs/sdk';
import { ReplaySubject, Observable, Subject } from 'rxjs';
import { SnackbarService } from '../snackbar/snackbar.service';
import { EventTrackerService } from '@verdocs/event-tracker';
export declare class BuilderDataService {
    private http;
    private router;
    private templatesService;
    private templateGuard;
    private snackbarService;
    private eventTracker;
    private injector;
    private _config_token;
    private recipients;
    private template;
    private templateDoc;
    private templatePages;
    private templateName;
    private activeFieldIndex;
    private roles;
    private templateSubject;
    private templateId;
    private hasFields;
    private rForm_backend_url;
    templateNameSubject: ReplaySubject<string>;
    templatePagesSubject: ReplaySubject<number>;
    recipientsSubject: ReplaySubject<IRole[]>;
    activeRecipientSubject: ReplaySubject<IRole>;
    scrollInfoSubject: ReplaySubject<any>;
    screenInfoSubject: ReplaySubject<any>;
    newTypeSubject: Subject<string | null>;
    newOptionSubject: ReplaySubject<OptionType>;
    duplicateFieldSubject: ReplaySubject<IField>;
    saveStatusSubject: ReplaySubject<string>;
    renderedSubject: ReplaySubject<string>;
    activeFieldIndexSubject: ReplaySubject<any>;
    numberOfRolesSubject: ReplaySubject<number>;
    numberOfSequenceSubject: ReplaySubject<number>;
    hasFieldsSubject: ReplaySubject<boolean>;
    constructor(http: HttpClient, router: Router, templatesService: TemplatesService, templateGuard: TemplatesGuardService, snackbarService: SnackbarService, eventTracker: EventTrackerService, injector: Injector);
    createTemplate(template_body: ITemplate): Observable<ITemplate>;
    updateLocalTemplateData(): void;
    updateTemplate(template_body: ITemplate): Observable<ITemplate>;
    updateTemplateName(template: any, name: any): Observable<string>;
    getTemplateObservable(templateId: string): Observable<ITemplate>;
    getTemplate(templateId: string): Promise<any>;
    watchForUpdatedTemplate(): Observable<ITemplate>;
    updateLocalTemplate(template: any): void;
    uploadTemplateDocument(file: File, template: ITemplate): Observable<import("@angular/common/http").HttpEvent<unknown>>;
    getTemplateDocument(templateId: any): any;
    getTemplateDocumentFile(templateId: any, templateDoc: any): Observable<string>;
    setTemplateDocument(templateDocument: any): void;
    addTemplatePage(document: any, pageNum: any, templateId: any): Observable<IPage>;
    addTemplatePages(document: any, pageNums: number[], templateId: string): Observable<IPage>;
    deleteTemplateField(template: ITemplate, fieldName: string, i: any, j: any): Observable<ITemplate>;
    deleteTemplateFields(fieldNames: string[], template: ITemplate): void;
    addTemplateField(newField: IField, i: any, j: any, template: ITemplate): Observable<ITemplate>;
    getTemplateOwnerInfo(id: string): Promise<{
        profile_id: string;
        email: string;
        name: string;
    }>;
    updateTemplateField(template: ITemplate, body: IField, oldName: any, i: any, j: any): Observable<ITemplate>;
    updateRoleField(template: ITemplate, updated_field: any, role_index: any, old_name: any): ITemplate;
    updateDropdownField(template: ITemplate, body: any, oldName: any, i: any, j: any): Observable<ITemplate>;
    deleteSequence(template_id: string, sequence_number: number): Promise<Object>;
    prepareFieldDuplication(field: any): void;
    checkForFields(roles: any): void;
    createSnackBar(title: string, buttonTitle?: string): void;
    editDocsUrl(templateId: string): string;
    editRolesUrl(templateId: string): string;
    editTemplateUrl(templateId: string): string;
    previewTemplateUrl(templateId: string): string;
    addFieldRole(templateId: string, fieldId: string, roleId: string, i: any, j: any): Promise<FieldRole>;
    addRole(role: IRole | IRole[], template: ITemplate): Observable<ITemplate>;
    addCheckboxGroup(field: any): void;
    addRadioGroup(field: any): void;
    getRolesInSequence(roles: any): any[];
    deleteRole(roleName: any, template: ITemplate): Promise<void>;
    deleteRoles(roleNames: Array<string>, template: ITemplate): Observable<ITemplate>;
    updateRoles(roles: any, template: ITemplate): Observable<ITemplate>;
    sortRoles(template: ITemplate): IRole[];
    getRoleColor(name: any, index?: any, template?: ITemplate): string;
    updateFullName(role: IRole, template: ITemplate): void;
    setActiveFieldIndex(activeFieldIndex: any): void;
    autoAddSigner(template: ITemplate): Promise<unknown>;
    openTemplate(template: ITemplate): void;
    canUserEdit(template: ITemplate): boolean;
    canUserPreview(template: ITemplate): any;
}
