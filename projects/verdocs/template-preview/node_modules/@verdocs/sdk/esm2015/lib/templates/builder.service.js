/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { EventTrackerService } from '@verdocs/event-tracker';
import { ReplaySubject, throwError, from, forkJoin, of } from 'rxjs';
import { catchError, map, delay, mergeMap } from 'rxjs/operators';
import { findIndex } from 'lodash';
import { VSDKConfigToken } from '../angular-api.module';
export class BuilderService {
    /**
     * @param {?} http
     * @param {?} injector
     * @param {?} eventTracker
     */
    constructor(http, injector, eventTracker) {
        this.http = http;
        this.injector = injector;
        this.eventTracker = eventTracker;
        this.saveStatusSubject = new ReplaySubject();
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    createTemplate(template_body) {
        return this.http
            .post(this._rForm_backend_url + '/templates', template_body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res;
        })));
    }
    /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    uploadTemplateDocument(file, template) {
        /** @type {?} */
        const formdata = new FormData();
        formdata.append('document', file, file.name);
        /** @type {?} */
        const req = new HttpRequest('POST', `${this._rForm_backend_url}/templates/${template.id}/documents`, formdata, {
            reportProgress: true
        });
        return this.http.request(req)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return throwError(err);
        })));
    }
    /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePage(document, pageNum, templateId) {
        /** @type {?} */
        const body = {
            sequence: pageNum,
            page_number: pageNum,
            document_id: document.id
        };
        return this.http.post(`${this._rForm_backend_url}/templates/${templateId}/pages`, body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => res)), catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            return throwError(err);
        })));
    }
    /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    addTemplatePages(document, pageNums, templateId) {
        return from(pageNums)
            .pipe(mergeMap((/**
         * @param {?} pageNum
         * @return {?}
         */
        pageNum => {
            /** @type {?} */
            const page = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return (/** @type {?} */ (this.http.post(`${this._rForm_backend_url}/templates/${templateId}/pages`, page).pipe(delay(200))));
        })));
    }
    /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    addTemplateField(newField, i, j, template) {
        newField.name = newField.name.trim();
        return this.http
            .post(this._rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field added`,
                label: `document id: ${newField.template_id}`
            });
            template.pages[i].fields[j] = field;
            // this.checkForFields(template.roles);
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template.roles[roleIndex]['fields'].push(field);
            }
            // this.templateSubject.next(template);
            return template;
        })));
    }
    /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    deleteTemplateField(template, fieldName, i, j) {
        return this.http
            .delete(`${this._rForm_backend_url}/templates/${template.id}/fields/${fieldName.trim()}`)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: fieldName });
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
            if (roleIndex > -1) {
                /** @type {?} */
                const roleFieldIndex = findIndex(template.roles[roleIndex].fields, { name: fieldName });
                if (roleFieldIndex > -1) {
                    template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                }
            }
            template.pages[i].fields.splice(fieldIndex, 1);
            // this.updateLocalTemplate(template);
            // this.saveStatusSubject.next('saved');
            // this.checkForFields(template.roles);
            return template;
        })));
    }
    /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    updateRoleField(template, updated_field, role_index, old_name) {
        /** @type {?} */
        const field_index = findIndex(template.roles[role_index].fields, { name: old_name });
        if (field_index >= 0) {
            template.roles[role_index].fields[field_index] = updated_field;
        }
        else {
            template.roles[role_index].fields.push(updated_field);
        }
        return template;
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateTemplateField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            this.eventTracker.createEvent({
                category: 'document',
                action: `document ${field.type} field updated`,
                label: `document id: ${template.id}`
            });
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            if (field.page_sequence - 1 !== i) {
                template.pages[i].fields.splice(fieldIndex, 1);
                template.pages[field.page_sequence - 1].fields.push(field);
            }
            else {
                template.pages[i].fields[fieldIndex] = field;
            }
            /** @type {?} */
            const roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template = this.updateRoleField(template, field, roleIndex, oldName);
            }
            // this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    updateDropdownField(template, body, oldName, i, j) {
        oldName = oldName.trim();
        return this.http
            .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            template.pages[i].fields[fieldIndex] = field;
            // this.templateSubject.next(template);
            this.saveStatusSubject.next('saved');
            return template;
        })));
    }
    /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    addFieldRole(templateId, fieldId, roleId, i, j) {
        /** @type {?} */
        const fieldRoleInfo = JSON.stringify({
            field_id: fieldId,
            role_id: roleId
        });
        return this.http
            .post(this._rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
         * @param {?} fieldRole
         * @return {?}
         */
        fieldRole => {
            return fieldRole;
        }));
    }
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    addRole(role, template) {
        /** @type {?} */
        const templateBackend = this._rForm_backend_url + '/templates/' + template.id + '/roles';
        /** @type {?} */
        let roles = [];
        roles = roles.concat(role);
        /** @type {?} */
        const roleRequests = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            roleRequests.push(this.http.post(templateBackend, role));
        }));
        if (roles && roles.length > 0) {
            return forkJoin(roleRequests).pipe(map((/**
             * @param {?} savedRoles
             * @return {?}
             */
            savedRoles => {
                savedRoles.concat((/** @type {?} */ (savedRoles)));
                if (!template['roles']) {
                    template['roles'] = (/** @type {?} */ ([]));
                }
                /** @type {?} */
                const savedRolesWithFields = savedRoles.map((/**
                 * @param {?} newRole
                 * @return {?}
                 */
                newRole => {
                    newRole['fields'] = [];
                    return newRole;
                }));
                template['roles'] = template['roles'].concat(savedRolesWithFields);
                // this.recipients = this.sortRoles(template);
                // this.roles = this.recipients;
                // this.templateSubject.next(template);
                // this.recipientsSubject.next(this.recipients);
                // this.recipients;
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        }
        else {
            return of(template);
        }
    }
    /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    deleteRole(roleName, template) {
        return this.http.delete(this._rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
            .toPromise()
            .then((/**
         * @return {?}
         */
        () => {
            // remove(template.roles, (role: IRole) => {
            // this.recipients = this.sortRoles(template);
            // if (role.name === roleName) {
            //   const fields = role.fields;
            //   const fieldNames = [];
            //   for (const field of fields) {
            //     fieldNames.push(field.name);
            //   }
            //   this.deleteTemplateFields(fieldNames, template);
            // }
            // this.templateSubject.next(template);
            // this.recipientsSubject.next(this.recipients);
            //   return role.name === roleName
            // });
        }));
    }
    /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    deleteRoles(roleNames, template) {
        /** @type {?} */
        const deleteCalls = [];
        roleNames.forEach((/**
         * @param {?} role_name
         * @return {?}
         */
        role_name => {
            template = Object.assign({}, template, { roles: template.roles.filter((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => role.name !== role_name)) });
            deleteCalls.push(this.http.delete(this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
        }));
        return forkJoin(deleteCalls).pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error(err);
            console.error('Couldn\'t delete all the roles');
            return err;
        })));
    }
    /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    updateRoles(roles, template) {
        /** @type {?} */
        const updateCalls = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            /** @type {?} */
            const body = {
                template_id: template.id,
                name: role.name.trim(),
                full_name: role.full_name,
                email: role.email,
                sequence: role.sequence,
                type: role.type,
                delegator: role.delegator,
                message: role.message,
                phone: role.phone
            };
            /** @type {?} */
            const role_index = findIndex(template.roles, { name: role.old_name });
            if (role_index >= 0) {
                template.roles[role_index] = Object.assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
            }
            this.eventTracker.createEvent({
                category: 'document',
                action: 'document role updated',
                label: `document id: ${template.id}`
            });
            updateCalls.push(this.http.put(this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
        }));
        return forkJoin(updateCalls)
            .pipe(map((/**
         * @return {?}
         */
        () => {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            console.error(err);
            console.error('Couldn\'t save all the roles');
            return err;
        })));
    }
}
BuilderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BuilderService.ctorParameters = () => [
    { type: HttpClient },
    { type: Injector },
    { type: EventTrackerService }
];
if (false) {
    /** @type {?} */
    BuilderService.prototype.saveStatusSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.eventTracker;
}
//# sourceMappingURL=data:application/json;base64,