/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, Injector, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest } from '@angular/common/http';
// import { MatDialog } from '@angular/material/dialog'
import { catchError, map } from 'rxjs/operators';
import { Subject, Observable, EMPTY, of } from 'rxjs';
import { VerdocsTokenObjectService } from '@verdocs/tokens';
import { filter } from 'lodash';
// import { environment } from '../../../environments/environment';
import { TemplatesGuardService } from './templates.guard';
import { TemplateActions } from '../definitions/template.enums';
import { VSDKConfigToken } from '../angular-api.module';
var TemplatesService = /** @class */ (function () {
    function TemplatesService(http, vTokenObjectService, templateGuard, injector, platform) {
        this.http = http;
        this.vTokenObjectService = vTokenObjectService;
        this.templateGuard = templateGuard;
        this.injector = injector;
        this.platform = platform;
        this.templates = new Subject();
        this.template = new Subject();
        this.loadingStatus = new Subject();
        this._config_token = this.injector.get(VSDKConfigToken);
        this.rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} err
     * @return {?}
     */
    TemplatesService.prototype.errorMessageNotVerified = /**
     * @param {?} err
     * @return {?}
     */
    function (err) {
        return err.error.error === 'email is not verified' && err.error.code === 401;
    };
    /**
     * @param {?=} filter
     * @return {?}
     */
    TemplatesService.prototype.getTemplates = /**
     * @param {?=} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        this.loadingStatus.next(true);
        this.templates.next([]);
        /** @type {?} */
        var query = null;
        if (filter) {
            switch (filter) {
                case 'creator':
                    query = '?is_creator=true';
                    break;
                case 'organization':
                    query = '?is_organization=true';
                    break;
                case 'starred':
                    query = '?is_starred=true';
                    break;
                default:
                    query = '';
                    break;
            }
        }
        /** @type {?} */
        var requestUrl = this.rForm_backend_url + '/templates' + (query ? query : '');
        return this.http.request(new HttpRequest('GET', requestUrl, {}, { reportProgress: true })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                /** @type {?} */
                var template = (/** @type {?} */ (event.body));
                _this.templates.next(template);
                _this.loadingStatus.next(false);
                return (/** @type {?} */ (event));
            }
            return event;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err && err.status === 401 && !_this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
            }
            _this.loadingStatus.next(false);
            return Observable.throw(err);
        })));
    };
    // Move this to another service
    // Move this to another service
    /**
     * @param {?} id
     * @param {?=} thumbnail
     * @return {?}
     */
    TemplatesService.prototype.getTemplateObservable = 
    // Move this to another service
    /**
     * @param {?} id
     * @param {?=} thumbnail
     * @return {?}
     */
    function (id, thumbnail) {
        var _this = this;
        this.loadingStatus.next(true);
        /** @type {?} */
        var templateUrl = this.rForm_backend_url + '/templates/' + id;
        if (thumbnail === true) {
            templateUrl += '?thumbnail=true';
        }
        return this.http.get(templateUrl)
            .pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            _this.loadingStatus.next(false);
            return template;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loadingStatus.next(false);
            if (err && err.status === 401 && !_this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return EMPTY;
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TemplatesService.prototype.starTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.post(this.rForm_backend_url + ("/templates/" + id + "/stars"), {}).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err && err.status === 401 && _this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return Observable.throw(err);
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TemplatesService.prototype.unstarTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.delete(this.rForm_backend_url + ("/templates/" + id + "/stars")).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err && err.status === 401 && _this.errorMessageNotVerified(err)) {
                // const errorDialog = this.dialog.open(FourOhOneDialog, {
                //   panelClass: 'error__dialog',
                //   disableClose: true
                // })
                // errorDialog.componentInstance.error = err;
                return of(err);
            }
            return Observable.throw((/** @type {?} */ (err)));
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TemplatesService.prototype.getTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.getTemplateObservable(id).pipe(map((/**
         * @param {?} template
         * @return {?}
         */
        function (template) {
            _this.template.next(template);
            return template;
        })));
    };
    /**
     * @return {?}
     */
    TemplatesService.prototype.getCreatorTemplates = /**
     * @return {?}
     */
    function () {
        return this.getTemplates('creator');
    };
    /**
     * @return {?}
     */
    TemplatesService.prototype.getOrganizationTemplates = /**
     * @return {?}
     */
    function () {
        return this.getTemplates('organization');
    };
    /**
     * @return {?}
     */
    TemplatesService.prototype.getStarredTemplates = /**
     * @return {?}
     */
    function () {
        return this.getTemplates('starred');
    };
    /**
     * @return {?}
     */
    TemplatesService.prototype.getPermissions = /**
     * @return {?}
     */
    function () {
        return this.vTokenObjectService.getPermissions();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TemplatesService.prototype.getTemplateOwnerInfo = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.rForm_backend_url + "/templates/" + id + "?owner_info=true")
            .toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        }));
    };
    /**
     * @param {?} template_id
     * @param {?} template_document
     * @return {?}
     */
    TemplatesService.prototype.getTemplateDocumentPDFObservable = /**
     * @param {?} template_id
     * @param {?} template_document
     * @return {?}
     */
    function (template_id, template_document) {
        return this.http.get(this.rForm_backend_url + '/templates/' + template_id + '/documents/' +
            template_document.id + '?file=true', { responseType: 'blob' });
    };
    /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    TemplatesService.prototype.getTemplateDocument = /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    function (templateId, templateDocument) {
        return this.getTemplateDocumentPDFObservable(templateId, templateDocument).toPromise();
    };
    /**
     * @param {?} templateId
     * @param {?} templateDocumentId
     * @return {?}
     */
    TemplatesService.prototype.getTemplateThumbnail = /**
     * @param {?} templateId
     * @param {?} templateDocumentId
     * @return {?}
     */
    function (templateId, templateDocumentId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents/' +
            templateDocumentId + '?thumbnail=true', { responseType: 'blob' }).toPromise();
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    TemplatesService.prototype.getAllTemplateDocumentsObservable = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents');
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    TemplatesService.prototype.getAllTemplateDocuments = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        return this.http.get(this.rForm_backend_url + '/templates/' + templateId + '/documents')
            .toPromise();
    };
    /**
     * @param {?} template
     * @return {?}
     */
    TemplatesService.prototype.downloadTemplateDocument = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var _this = this;
        if ((isPlatformBrowser(this.platform))) {
            this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
             * @param {?} template_file
             * @return {?}
             */
            function (template_file) {
                _this.prepareSave(template, template_file);
            }));
        }
    };
    /**
     * @param {?} template
     * @param {?} template_file
     * @return {?}
     */
    TemplatesService.prototype.prepareSave = /**
     * @param {?} template
     * @param {?} template_file
     * @return {?}
     */
    function (template, template_file) {
        if (window && window.URL) {
            /** @type {?} */
            var fileUrl = URL.createObjectURL(template_file);
            // saveAs(fileUrl, template.template_documents[0].name + '.pdf');
        }
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    TemplatesService.prototype.searchTemplates = /**
     * @param {?} searchParams
     * @return {?}
     */
    function (searchParams) {
        for (var key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.rForm_backend_url + '/templates/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event;
        })));
    };
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    TemplatesService.prototype.updateTemplateObservable = /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    function (templateId, body) {
        return this.http.put(this.rForm_backend_url + '/templates/' + templateId, body);
    };
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    TemplatesService.prototype.updateTemplate = /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    function (templateId, body) {
        return this.updateTemplateObservable(templateId, body)
            .toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template; }));
    };
    /**
     * @param {?} templateId
     * @return {?}
     */
    TemplatesService.prototype.deleteTemplate = /**
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + templateId);
    };
    /**
     * @param {?} templateId
     * @param {?} sequence_number
     * @return {?}
     */
    TemplatesService.prototype.deleteSequence = /**
     * @param {?} templateId
     * @param {?} sequence_number
     * @return {?}
     */
    function (templateId, sequence_number) {
        return this.http.delete(this.rForm_backend_url + '/templates/' + templateId + '/roles?sequence=' + sequence_number).toPromise();
    };
    /**
     * @param {?} templates
     * @return {?}
     */
    TemplatesService.prototype.updateTemplates = /**
     * @param {?} templates
     * @return {?}
     */
    function (templates) {
        this.templates.next(templates);
    };
    /**
     * @param {?} template
     * @return {?}
     */
    TemplatesService.prototype.canSendEnvelope = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var e_1, _a;
        if (template) {
            /** @type {?} */
            var signers = filter(template.roles, { type: 'signer' });
            /** @type {?} */
            var hasSigner = signers.length > 0;
            /** @type {?} */
            var signersHaveFields = false;
            if (hasSigner) {
                try {
                    for (var signers_1 = tslib_1.__values(signers), signers_1_1 = signers_1.next(); !signers_1_1.done; signers_1_1 = signers_1.next()) {
                        var signer = signers_1_1.value;
                        signersHaveFields = signer['fields'] && signer['fields'].length > 0;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (signers_1_1 && !signers_1_1.done && (_a = signers_1.return)) _a.call(signers_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            /** @type {?} */
            var hasAccessToTemplate = this.templateGuard.canPerformAction(TemplateActions.READ, template).canPerform;
            return hasAccessToTemplate && hasSigner && signersHaveFields && this.templateGuard.canBeSender(template);
        }
        else {
            return false;
        }
    };
    TemplatesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TemplatesService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: VerdocsTokenObjectService },
        { type: TemplatesGuardService },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return TemplatesService;
}());
export { TemplatesService };
if (false) {
    /** @type {?} */
    TemplatesService.prototype.templates;
    /** @type {?} */
    TemplatesService.prototype.template;
    /** @type {?} */
    TemplatesService.prototype.loadingStatus;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TemplatesService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,