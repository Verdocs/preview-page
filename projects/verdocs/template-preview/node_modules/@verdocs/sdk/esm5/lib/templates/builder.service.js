/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient, HttpRequest } from '@angular/common/http';
import { EventTrackerService } from '@verdocs/event-tracker';
import { ReplaySubject, throwError, from, forkJoin, of } from 'rxjs';
import { catchError, map, delay, mergeMap } from 'rxjs/operators';
import { findIndex } from 'lodash';
import { VSDKConfigToken } from '../angular-api.module';
var BuilderService = /** @class */ (function () {
    function BuilderService(http, injector, eventTracker) {
        this.http = http;
        this.injector = injector;
        this.eventTracker = eventTracker;
        this.saveStatusSubject = new ReplaySubject();
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} template_body
     * @return {?}
     */
    BuilderService.prototype.createTemplate = /**
     * @param {?} template_body
     * @return {?}
     */
    function (template_body) {
        return this.http
            .post(this._rForm_backend_url + '/templates', template_body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })));
    };
    /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.uploadTemplateDocument = /**
     * @param {?} file
     * @param {?} template
     * @return {?}
     */
    function (file, template) {
        /** @type {?} */
        var formdata = new FormData();
        formdata.append('document', file, file.name);
        /** @type {?} */
        var req = new HttpRequest('POST', this._rForm_backend_url + "/templates/" + template.id + "/documents", formdata, {
            reportProgress: true
        });
        return this.http.request(req)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return throwError(err);
        })));
    };
    /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    BuilderService.prototype.addTemplatePage = /**
     * @param {?} document
     * @param {?} pageNum
     * @param {?} templateId
     * @return {?}
     */
    function (document, pageNum, templateId) {
        /** @type {?} */
        var body = {
            sequence: pageNum,
            page_number: pageNum,
            document_id: document.id
        };
        return this.http.post(this._rForm_backend_url + "/templates/" + templateId + "/pages", body)
            .pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            return throwError(err);
        })));
    };
    /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    BuilderService.prototype.addTemplatePages = /**
     * @param {?} document
     * @param {?} pageNums
     * @param {?} templateId
     * @return {?}
     */
    function (document, pageNums, templateId) {
        var _this = this;
        return from(pageNums)
            .pipe(mergeMap((/**
         * @param {?} pageNum
         * @return {?}
         */
        function (pageNum) {
            /** @type {?} */
            var page = {
                sequence: pageNum,
                page_number: pageNum,
                document_id: document.id
            };
            return (/** @type {?} */ (_this.http.post(_this._rForm_backend_url + "/templates/" + templateId + "/pages", page).pipe(delay(200))));
        })));
    };
    /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.addTemplateField = /**
     * @param {?} newField
     * @param {?} i
     * @param {?} j
     * @param {?} template
     * @return {?}
     */
    function (newField, i, j, template) {
        var _this = this;
        newField.name = newField.name.trim();
        return this.http
            .post(this._rForm_backend_url + '/templates/' + newField.template_id + '/fields', newField)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            _this.eventTracker.createEvent({
                category: 'document',
                action: "document " + field.type + " field added",
                label: "document id: " + newField.template_id
            });
            template.pages[i].fields[j] = field;
            // this.checkForFields(template.roles);
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template.roles[roleIndex]['fields'].push(field);
            }
            // this.templateSubject.next(template);
            return template;
        })));
    };
    /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderService.prototype.deleteTemplateField = /**
     * @param {?} template
     * @param {?} fieldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, fieldName, i, j) {
        return this.http
            .delete(this._rForm_backend_url + "/templates/" + template.id + "/fields/" + fieldName.trim())
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: fieldName });
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: template.pages[i].fields[fieldIndex].role_name });
            if (roleIndex > -1) {
                /** @type {?} */
                var roleFieldIndex = findIndex(template.roles[roleIndex].fields, { name: fieldName });
                if (roleFieldIndex > -1) {
                    template.roles[roleIndex].fields.splice(roleFieldIndex, 1);
                }
            }
            template.pages[i].fields.splice(fieldIndex, 1);
            // this.updateLocalTemplate(template);
            // this.saveStatusSubject.next('saved');
            // this.checkForFields(template.roles);
            return template;
        })));
    };
    /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    BuilderService.prototype.updateRoleField = /**
     * @param {?} template
     * @param {?} updated_field
     * @param {?} role_index
     * @param {?} old_name
     * @return {?}
     */
    function (template, updated_field, role_index, old_name) {
        /** @type {?} */
        var field_index = findIndex(template.roles[role_index].fields, { name: old_name });
        if (field_index >= 0) {
            template.roles[role_index].fields[field_index] = updated_field;
        }
        else {
            template.roles[role_index].fields.push(updated_field);
        }
        return template;
    };
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderService.prototype.updateTemplateField = /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, body, oldName, i, j) {
        var _this = this;
        oldName = oldName.trim();
        return this.http
            .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            _this.eventTracker.createEvent({
                category: 'document',
                action: "document " + field.type + " field updated",
                label: "document id: " + template.id
            });
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            if (field.page_sequence - 1 !== i) {
                template.pages[i].fields.splice(fieldIndex, 1);
                template.pages[field.page_sequence - 1].fields.push(field);
            }
            else {
                template.pages[i].fields[fieldIndex] = field;
            }
            /** @type {?} */
            var roleIndex = findIndex(template.roles, { name: field.role_name });
            if (roleIndex >= 0) {
                template = _this.updateRoleField(template, field, roleIndex, oldName);
            }
            // this.templateSubject.next(template);
            _this.saveStatusSubject.next('saved');
            return template;
        })));
    };
    /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderService.prototype.updateDropdownField = /**
     * @param {?} template
     * @param {?} body
     * @param {?} oldName
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (template, body, oldName, i, j) {
        var _this = this;
        oldName = oldName.trim();
        return this.http
            .put(this._rForm_backend_url + '/templates/' + template.id + '/fields/' + oldName, body)
            .pipe(map((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var fieldIndex = findIndex(template.pages[i].fields, { name: oldName });
            template.pages[i].fields[fieldIndex] = field;
            // this.templateSubject.next(template);
            _this.saveStatusSubject.next('saved');
            return template;
        })));
    };
    /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    BuilderService.prototype.addFieldRole = /**
     * @param {?} templateId
     * @param {?} fieldId
     * @param {?} roleId
     * @param {?} i
     * @param {?} j
     * @return {?}
     */
    function (templateId, fieldId, roleId, i, j) {
        /** @type {?} */
        var fieldRoleInfo = JSON.stringify({
            field_id: fieldId,
            role_id: roleId
        });
        return this.http
            .post(this._rForm_backend_url + '/template/' + templateId + '/field_role', fieldRoleInfo).toPromise().then((/**
         * @param {?} fieldRole
         * @return {?}
         */
        function (fieldRole) {
            return fieldRole;
        }));
    };
    /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.addRole = /**
     * @param {?} role
     * @param {?} template
     * @return {?}
     */
    function (role, template) {
        var _this = this;
        /** @type {?} */
        var templateBackend = this._rForm_backend_url + '/templates/' + template.id + '/roles';
        /** @type {?} */
        var roles = [];
        roles = roles.concat(role);
        /** @type {?} */
        var roleRequests = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            roleRequests.push(_this.http.post(templateBackend, role));
        }));
        if (roles && roles.length > 0) {
            return forkJoin(roleRequests).pipe(map((/**
             * @param {?} savedRoles
             * @return {?}
             */
            function (savedRoles) {
                savedRoles.concat((/** @type {?} */ (savedRoles)));
                if (!template['roles']) {
                    template['roles'] = (/** @type {?} */ ([]));
                }
                /** @type {?} */
                var savedRolesWithFields = savedRoles.map((/**
                 * @param {?} newRole
                 * @return {?}
                 */
                function (newRole) {
                    newRole['fields'] = [];
                    return newRole;
                }));
                template['roles'] = template['roles'].concat(savedRolesWithFields);
                // this.recipients = this.sortRoles(template);
                // this.roles = this.recipients;
                // this.templateSubject.next(template);
                // this.recipientsSubject.next(this.recipients);
                // this.recipients;
                return template;
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error(err);
                console.error('Couldn\'t save all the roles');
                return err;
            })));
        }
        else {
            return of(template);
        }
    };
    /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.deleteRole = /**
     * @param {?} roleName
     * @param {?} template
     * @return {?}
     */
    function (roleName, template) {
        return this.http.delete(this._rForm_backend_url + '/templates/' + template.id + '/roles/' + roleName)
            .toPromise()
            .then((/**
         * @return {?}
         */
        function () {
            // remove(template.roles, (role: IRole) => {
            // this.recipients = this.sortRoles(template);
            // if (role.name === roleName) {
            //   const fields = role.fields;
            //   const fieldNames = [];
            //   for (const field of fields) {
            //     fieldNames.push(field.name);
            //   }
            //   this.deleteTemplateFields(fieldNames, template);
            // }
            // this.templateSubject.next(template);
            // this.recipientsSubject.next(this.recipients);
            //   return role.name === roleName
            // });
        }));
    };
    /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.deleteRoles = /**
     * @param {?} roleNames
     * @param {?} template
     * @return {?}
     */
    function (roleNames, template) {
        var _this = this;
        /** @type {?} */
        var deleteCalls = [];
        roleNames.forEach((/**
         * @param {?} role_name
         * @return {?}
         */
        function (role_name) {
            template = tslib_1.__assign({}, template, { roles: template.roles.filter((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) { return role.name !== role_name; })) });
            deleteCalls.push(_this.http.delete(_this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role_name));
        }));
        return forkJoin(deleteCalls).pipe(map((/**
         * @return {?}
         */
        function () {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            console.error('Couldn\'t delete all the roles');
            return err;
        })));
    };
    /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    BuilderService.prototype.updateRoles = /**
     * @param {?} roles
     * @param {?} template
     * @return {?}
     */
    function (roles, template) {
        var _this = this;
        /** @type {?} */
        var updateCalls = [];
        roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            /** @type {?} */
            var body = {
                template_id: template.id,
                name: role.name.trim(),
                full_name: role.full_name,
                email: role.email,
                sequence: role.sequence,
                type: role.type,
                delegator: role.delegator,
                message: role.message,
                phone: role.phone
            };
            /** @type {?} */
            var role_index = findIndex(template.roles, { name: role.old_name });
            if (role_index >= 0) {
                template.roles[role_index] = tslib_1.__assign({}, template.roles[role_index], { template_id: template.id, name: role.name.trim(), full_name: role.full_name, email: role.email, sequence: role.sequence, type: role.type, delegator: role.delegator, message: role.message, phone: role.phone });
            }
            _this.eventTracker.createEvent({
                category: 'document',
                action: 'document role updated',
                label: "document id: " + template.id
            });
            updateCalls.push(_this.http.put(_this._rForm_backend_url + '/templates/' + template.id + '/roles/' + role.old_name, body));
        }));
        return forkJoin(updateCalls)
            .pipe(map((/**
         * @return {?}
         */
        function () {
            return template;
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            console.error('Couldn\'t save all the roles');
            return err;
        })));
    };
    BuilderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BuilderService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Injector },
        { type: EventTrackerService }
    ]; };
    return BuilderService;
}());
export { BuilderService };
if (false) {
    /** @type {?} */
    BuilderService.prototype.saveStatusSubject;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    BuilderService.prototype.eventTracker;
}
//# sourceMappingURL=data:application/json;base64,