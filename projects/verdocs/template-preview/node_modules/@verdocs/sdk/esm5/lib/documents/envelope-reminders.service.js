/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { VSDKConfigToken } from '../angular-api.module';
var EnvelopRemindersService = /** @class */ (function () {
    function EnvelopRemindersService(http, injector) {
        this.http = http;
        this.injector = injector;
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @return {?}
     */
    EnvelopRemindersService.prototype.getReminder = /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @return {?}
     */
    function (envelopeId, reminderId) {
        return this.http.get(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId).toPromise()
            .then((/**
         * @param {?} reminder
         * @return {?}
         */
        function (reminder) {
            return reminder;
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @param {?} body
     * @return {?}
     */
    EnvelopRemindersService.prototype.updateReminder = /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @param {?} body
     * @return {?}
     */
    function (envelopeId, reminderId, body) {
        return this.http
            .put(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId, body)
            .toPromise();
    };
    /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @return {?}
     */
    EnvelopRemindersService.prototype.deleteReminder = /**
     * @param {?} envelopeId
     * @param {?} reminderId
     * @return {?}
     */
    function (envelopeId, reminderId) {
        return this.http.delete(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder/" + reminderId).toPromise();
    };
    /**
     * @param {?} envelopeId
     * @param {?} body
     * @return {?}
     */
    EnvelopRemindersService.prototype.createReminder = /**
     * @param {?} envelopeId
     * @param {?} body
     * @return {?}
     */
    function (envelopeId, body) {
        return this.http.post(this._rForm_backend_url + "/envelopes/" + envelopeId + "/reminder", body).toPromise()
            .then((/**
         * @param {?} reminder
         * @return {?}
         */
        function (reminder) {
            return reminder;
        }));
    };
    EnvelopRemindersService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EnvelopRemindersService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Injector }
    ]; };
    return EnvelopRemindersService;
}());
export { EnvelopRemindersService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EnvelopRemindersService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    EnvelopRemindersService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    EnvelopRemindersService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    EnvelopRemindersService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW52ZWxvcGUtcmVtaW5kZXJzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9zZGsvIiwic291cmNlcyI6WyJsaWIvZG9jdW1lbnRzL2VudmVsb3BlLXJlbWluZGVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHbEQsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3BFO0lBTUUsaUNBQ1UsSUFBZ0IsRUFDaEIsUUFBa0I7UUFEbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRTFCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7SUFDakUsQ0FBQzs7Ozs7O0lBRUQsNkNBQVc7Ozs7O0lBQVgsVUFBWSxVQUFVLEVBQUUsVUFBVTtRQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFlLElBQUksQ0FBQyxrQkFBa0IsbUJBQWMsVUFBVSxrQkFBYSxVQUFZLENBQUMsQ0FBQyxTQUFTLEVBQUU7YUFDckgsSUFBSTs7OztRQUFDLFVBQUMsUUFBUTtZQUNiLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7OztJQUVELGdEQUFjOzs7Ozs7SUFBZCxVQUFlLFVBQWtCLEVBQUUsVUFBVSxFQUFFLElBQUk7UUFDakQsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBZSxJQUFJLENBQUMsa0JBQWtCLG1CQUFjLFVBQVUsa0JBQWEsVUFBWSxFQUFFLElBQUksQ0FBQzthQUNqRyxTQUFTLEVBQUUsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFRCxnREFBYzs7Ozs7SUFBZCxVQUFlLFVBQVUsRUFBRSxVQUFVO1FBQ25DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUksSUFBSSxDQUFDLGtCQUFrQixtQkFBYyxVQUFVLGtCQUFhLFVBQVksQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ25ILENBQUM7Ozs7OztJQUVELGdEQUFjOzs7OztJQUFkLFVBQWUsVUFBVSxFQUFFLElBQW1FO1FBQzVGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQWUsSUFBSSxDQUFDLGtCQUFrQixtQkFBYyxVQUFVLGNBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUU7YUFDOUcsSUFBSTs7OztRQUFDLFVBQUMsUUFBUTtZQUNiLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBcENGLFVBQVU7Ozs7Z0JBTkYsVUFBVTtnQkFERSxRQUFROztJQTZDN0IsOEJBQUM7Q0FBQSxBQXRDRCxJQXNDQztTQXJDWSx1QkFBdUI7Ozs7OztJQUVsQyxnREFBa0M7Ozs7O0lBQ2xDLHFEQUFtQzs7Ozs7SUFHakMsdUNBQXdCOzs7OztJQUN4QiwyQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgSVJlbWluZGVyIH0gZnJvbSAnLi4vbW9kZWxzL3JlbWluZGVyLm1vZGVsJztcbmltcG9ydCB7IFZTREtDb25maWcsIFZTREtDb25maWdUb2tlbiB9IGZyb20gJy4uL2FuZ3VsYXItYXBpLm1vZHVsZSc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVudmVsb3BSZW1pbmRlcnNTZXJ2aWNlIHtcblxuICBwcml2YXRlIF9jb25maWdfdG9rZW46IFZTREtDb25maWc7XG4gIHByaXZhdGUgX3JGb3JtX2JhY2tlbmRfdXJsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZ190b2tlbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KFZTREtDb25maWdUb2tlbik7XG4gICAgdGhpcy5fckZvcm1fYmFja2VuZF91cmwgPSB0aGlzLl9jb25maWdfdG9rZW4uckZvcm1fYmFja2VuZF91cmw7XG4gIH1cblxuICBnZXRSZW1pbmRlcihlbnZlbG9wZUlkLCByZW1pbmRlcklkKTogUHJvbWlzZTxJUmVtaW5kZXI+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldDxJUmVtaW5kZXI+KGAke3RoaXMuX3JGb3JtX2JhY2tlbmRfdXJsfS9lbnZlbG9wZXMvJHtlbnZlbG9wZUlkfS9yZW1pbmRlci8ke3JlbWluZGVySWR9YCkudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKChyZW1pbmRlcikgPT4ge1xuICAgICAgICByZXR1cm4gcmVtaW5kZXI7XG4gICAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVJlbWluZGVyKGVudmVsb3BlSWQ6IHN0cmluZywgcmVtaW5kZXJJZCwgYm9keSk6IFByb21pc2U8SVJlbWluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLnB1dDxJUmVtaW5kZXI+KGAke3RoaXMuX3JGb3JtX2JhY2tlbmRfdXJsfS9lbnZlbG9wZXMvJHtlbnZlbG9wZUlkfS9yZW1pbmRlci8ke3JlbWluZGVySWR9YCwgYm9keSlcbiAgICAgIC50b1Byb21pc2UoKTtcbiAgfVxuXG4gIGRlbGV0ZVJlbWluZGVyKGVudmVsb3BlSWQsIHJlbWluZGVySWQpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShgJHt0aGlzLl9yRm9ybV9iYWNrZW5kX3VybH0vZW52ZWxvcGVzLyR7ZW52ZWxvcGVJZH0vcmVtaW5kZXIvJHtyZW1pbmRlcklkfWApLnRvUHJvbWlzZSgpO1xuICB9XG5cbiAgY3JlYXRlUmVtaW5kZXIoZW52ZWxvcGVJZCwgYm9keTogeyBzZXR1cF90aW1lOiBudW1iZXIsIGludGVydmFsX3RpbWU6IG51bWJlciwgaXNfb246IGJvb2xlYW4gfSk6IFByb21pc2U8SVJlbWluZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PElSZW1pbmRlcj4oYCR7dGhpcy5fckZvcm1fYmFja2VuZF91cmx9L2VudmVsb3Blcy8ke2VudmVsb3BlSWR9L3JlbWluZGVyYCwgYm9keSkudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKChyZW1pbmRlcikgPT4ge1xuICAgICAgICByZXR1cm4gcmVtaW5kZXI7XG4gICAgICB9KTtcbiAgfVxuXG59XG4iXX0=