/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} rgba
 * @return {?}
 */
export function getRGB(rgba) {
    /** @type {?} */
    var rgbNumbers = rgba.replace('rgba(', '').replace(')', '').split(',');
    /** @type {?} */
    var rgbObject = {
        red: rgbNumbers[0],
        green: rgbNumbers[1],
        blue: rgbNumbers[2],
        alpha: rgbNumbers[3]
    };
    /** @type {?} */
    var alpha = 1 - rgbObject.alpha;
    /** @type {?} */
    var red = Math.round((rgbObject.alpha * (rgbObject.red / 255) + alpha) * 255);
    /** @type {?} */
    var green = Math.round((rgbObject.alpha * (rgbObject.green / 255) + alpha) * 255);
    /** @type {?} */
    var blue = Math.round((rgbObject.alpha * (rgbObject.blue / 255) + alpha) * 255);
    return ('#' + rgbToHex(red) + rgbToHex(green) + rgbToHex(blue));
}
/**
 * @param {?} rgb
 * @return {?}
 */
function rgbToHex(rgb) {
    /** @type {?} */
    var hex = rgb.toString(16);
    if (hex.length < 2) {
        return '0' + hex;
    }
    return hex;
}
/**
 * @param {?} index
 * @return {?}
 */
export function getRGBA(index) {
    switch (index % 10) {
        case 0:
            return index === 0 ? 'rgba(255, 193, 7, 0.4)' : 'rgba(134, 134, 134, 0.3)'; //#FFE69C
        case 1:
            return 'rgba(156, 39, 176, .4)'; //'#E3C3E9'
        case 2:
            return 'rgba(33, 150, 243, .4)'; //'#C1E1FB'
        case 3:
            return 'rgba(220, 231, 117, 0.3)';
        case 4:
            return 'rgba(121, 134, 203, 0.3)';
        case 5:
            return 'rgba(77, 182, 172, 0.3)';
        case 6:
            return 'rgba(255, 202, 165, 0.3)';
        case 7:
            return 'rgba(2, 247, 190, 0.3)';
        case 8:
            return 'rgba(255, 138, 101, 0.3)';
        case 9:
            return 'rgba(82, 255, 79, 0.3)';
        default:
            return 'rgba(229, 115, 155, 0.3)';
    }
}
/**
 * @param {?} str
 * @return {?}
 */
export function nameToRGBA(str) {
    if (!!str) {
        /** @type {?} */
        var validNum = parseInt(str.slice(-1), 10);
        if (!isNaN(validNum)) {
            str += (validNum * 99).toString();
        }
        /** @type {?} */
        var hash = 0;
        for (var i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        hash = Math.round(hash / 1.3);
        /** @type {?} */
        var c = (hash & 0x00FFFF08)
            .toString(16)
            .toUpperCase();
        /** @type {?} */
        var hex = '#' + '00000'.substring(0, 6 - c.length) + c;
        /** @type {?} */
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        /** @type {?} */
        var color = {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        };
        return "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 0.2)";
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmdiLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3Mvc2RrLyIsInNvdXJjZXMiOlsibGliL2Z1bmN0aW9ucy9yZ2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQUk7O1FBQ25CLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1FBQ2xFLFNBQVMsR0FBRztRQUNoQixHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNsQixLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNuQixLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztLQUNyQjs7UUFDSyxLQUFLLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLOztRQUMzQixHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQzs7UUFDekUsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUM7O1FBQzdFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2pGLE9BQU8sQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFD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USxLQUFLLENBQUMsQ0FBQyxVQUFLLEtBQUssQ0FBQyxDQUFDLFVBQUssS0FBSyxDQUFDLENBQUMsV0FBUSxDQUFDO0tBQ3hEO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRSR0IocmdiYSkge1xuICBjb25zdCByZ2JOdW1iZXJzID0gcmdiYS5yZXBsYWNlKCdyZ2JhKCcsICcnKS5yZXBsYWNlKCcpJywgJycpLnNwbGl0KCcsJyk7XG4gIGNvbnN0IHJnYk9iamVjdCA9IHtcbiAgICByZWQ6IHJnYk51bWJlcnNbMF0sXG4gICAgZ3JlZW46IHJnYk51bWJlcnNbMV0sXG4gICAgYmx1ZTogcmdiTnVtYmVyc1syXSxcbiAgICBhbHBoYTogcmdiTnVtYmVyc1szXVxuICB9O1xuICBjb25zdCBhbHBoYSA9IDEgLSByZ2JPYmplY3QuYWxwaGE7XG4gIGNvbnN0IHJlZCA9IE1hdGgucm91bmQoKHJnYk9iamVjdC5hbHBoYSAqIChyZ2JPYmplY3QucmVkIC8gMjU1KSArIGFscGhhKSAqIDI1NSk7XG4gIGNvbnN0IGdyZWVuID0gTWF0aC5yb3VuZCgocmdiT2JqZWN0LmFscGhhICogKHJnYk9iamVjdC5ncmVlbiAvIDI1NSkgKyBhbHBoYSkgKiAyNTUpO1xuICBjb25zdCBibHVlID0gTWF0aC5yb3VuZCgocmdiT2JqZWN0LmFscGhhICogKHJnYk9iamVjdC5ibHVlIC8gMjU1KSArIGFscGhhKSAqIDI1NSk7XG4gIHJldHVybiAoJyMnICsgcmdiVG9IZXgocmVkKSArIHJnYlRvSGV4KGdyZWVuKSArIHJnYlRvSGV4KGJsdWUpKTtcbn1cblxuZnVuY3Rpb24gcmdiVG9IZXgocmdiOiBudW1iZXIpIHtcbiAgY29uc3QgaGV4ID0gcmdiLnRvU3RyaW5nKDE2KTtcbiAgaWYgKGhleC5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuICcwJyArIGhleDtcbiAgfVxuICByZXR1cm4gaGV4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UkdCQShpbmRleCkge1xuICBzd2l0Y2ggKGluZGV4ICUgMTApIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gaW5kZXggPT09IDAgPyAncmdiYSgyNTUsIDE5MywgNywgMC40KScgOiAncmdiYSgxMzQsIDEzNCwgMTM0LCAwLjMpJzsgLy8jRkZFNjlDXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuICdyZ2JhKDE1NiwgMzksIDE3NiwgLjQpJzsgLy8nI0UzQzNFOSdcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gJ3JnYmEoMzMsIDE1MCwgMjQzLCAuNCknOyAvLycjQzFFMUZCJ1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiAncmdiYSgyMjAsIDIzMSwgMTE3LCAwLjMpJztcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gJ3JnYmEoMTIxLCAxMzQsIDIwMywgMC4zKSc7XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuICdyZ2JhKDc3LCAxODIsIDE3MiwgMC4zKSc7XG4gICAgY2FzZSA2OlxuICAgICAgcmV0dXJuICdyZ2JhKDI1NSwgMjAyLCAxNjUsIDAuMyknO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiAncmdiYSgyLCAyNDcsIDE5MCwgMC4zKSc7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuICdyZ2JhKDI1NSwgMTM4LCAxMDEsIDAuMyknO1xuICAgIGNhc2UgOTpcbiAgICAgIHJldHVybiAncmdiYSg4MiwgMjU1LCA3OSwgMC4zKSc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAncmdiYSgyMjksIDExNSwgMTU1LCAwLjMpJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFtZVRvUkdCQShzdHIpIHtcbiAgaWYgKCEhc3RyKSB7XG4gICAgY29uc3QgdmFsaWROdW0gPSBwYXJzZUludChzdHIuc2xpY2UoLTEpLCAxMCk7XG4gICAgaWYgKCFpc05hTih2YWxpZE51bSkpIHtcbiAgICAgIHN0ciArPSAodmFsaWROdW0gKiA5OSkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgbGV0IGhhc2ggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYXNoID0gc3RyLmNoYXJDb2RlQXQoaSkgKyAoKGhhc2ggPDwgNSkgLSBoYXNoKTtcbiAgICB9XG4gICAgaGFzaCA9IE1hdGgucm91bmQoaGFzaCAvIDEuMyk7XG4gICAgY29uc3QgYyA9IChoYXNoICYgMHgwMEZGRkYwOClcbiAgICAgIC50b1N0cmluZygxNilcbiAgICAgIC50b1VwcGVyQ2FzZSgpO1xuICAgIGNvbnN0IGhleCA9ICcjJyArICcwMDAwMCcuc3Vic3RyaW5nKDAsIDYgLSBjLmxlbmd0aCkgKyBjO1xuICAgIGNvbnN0IHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICAgIGNvbnN0IGNvbG9yID0ge1xuICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSxcbiAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpXG4gICAgfTtcbiAgICByZXR1cm4gYHJnYmEoJHtjb2xvci5yfSwgJHtjb2xvci5nfSwgJHtjb2xvci5ifSwgMC4yKWA7XG4gIH1cbn0iXX0=