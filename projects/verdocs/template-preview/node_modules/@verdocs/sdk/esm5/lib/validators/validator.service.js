/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { regParse } from '../functions/regex';
import { VSDKConfigToken } from '../angular-api.module';
var ValidatorService = /** @class */ (function () {
    function ValidatorService(http, injector) {
        this.http = http;
        this.injector = injector;
        this.validators = [];
        this.validatorsObject = {};
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @return {?}
     */
    ValidatorService.prototype.getValidatorsArray = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.validators && this.validators.length > 0) {
            return this.validators;
        }
        else {
            return this.http.get(this._rForm_backend_url + '/validators').toPromise().then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.validators = response;
                return (/** @type {?} */ (_this.validators));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                return null;
            }));
        }
    };
    /**
     * @return {?}
     */
    ValidatorService.prototype.getValidatorsObject = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var i, name_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.validatorsObject = {};
                        return [4 /*yield*/, this.getValidatorsArray()];
                    case 1:
                        _a.sent();
                        for (i = 0; i < this.validators['length']; i++) {
                            name_1 = this.validators[i]['name'];
                            this.validatorsObject[name_1] = regParse(this.validators[i]['regex']);
                        }
                        return [2 /*return*/, this.validatorsObject];
                }
            });
        });
    };
    ValidatorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ValidatorService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Injector }
    ]; };
    return ValidatorService;
}());
export { ValidatorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.validators;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.validatorsObject;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ValidatorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy9zZGsvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy92YWxpZGF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR3BFO0lBT0UsMEJBQ1UsSUFBZ0IsRUFDaEIsUUFBa0I7UUFEbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTHBCLGVBQVUsR0FBVSxFQUFFLENBQUM7UUFDdkIscUJBQWdCLEdBQVEsRUFBRSxDQUFDO1FBTWpDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7SUFDakUsQ0FBQzs7OztJQUVNLDZDQUFrQjs7O0lBQXpCO1FBQUEsaUJBV0M7UUFWQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUN4QjthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsYUFBYSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSTs7OztZQUFDLFVBQUMsUUFBZTtnQkFDL0YsS0FBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7Z0JBQzNCLE9BQU8sbUJBQUEsS0FBSSxDQUFDLFVBQVUsRUFBUyxDQUFDO1lBQ2xDLENBQUM7Ozs7WUFBRSxVQUFDLEdBQUc7Z0JBQ0wsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVZLDhDQUFtQjs7O0lBQWhDOzs7Ozs7d0JBQ0UsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQzt3QkFDM0IscUJBQU0sSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUE7O3dCQUEvQixTQUErQixDQUFDO3dCQUNoQyxLQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7NEJBQzVDLFNBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7NEJBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO3lCQUNyRTt3QkFDRCxzQkFBTyxJQUFJLENBQUMsZ0JBQWdCLEVBQUM7Ozs7S0FDOUI7O2dCQXBDRixVQUFVOzs7O2dCQU5GLFVBQVU7Z0JBREUsUUFBUTs7SUE0QzdCLHVCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FwQ1ksZ0JBQWdCOzs7Ozs7SUFDM0IseUNBQWtDOzs7OztJQUNsQyw4Q0FBbUM7Ozs7O0lBQ25DLHNDQUErQjs7Ozs7SUFDL0IsNENBQW1DOzs7OztJQUdqQyxnQ0FBd0I7Ozs7O0lBQ3hCLG9DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyByZWdQYXJzZSB9IGZyb20gJy4uL2Z1bmN0aW9ucy9yZWdleCc7XG5pbXBvcnQgeyBWU0RLQ29uZmlnLCBWU0RLQ29uZmlnVG9rZW4gfSBmcm9tICcuLi9hbmd1bGFyLWFwaS5tb2R1bGUnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWYWxpZGF0b3JTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnX3Rva2VuOiBWU0RLQ29uZmlnO1xuICBwcml2YXRlIF9yRm9ybV9iYWNrZW5kX3VybDogc3RyaW5nO1xuICBwcml2YXRlIHZhbGlkYXRvcnM6IGFueVtdID0gW107XG4gIHByaXZhdGUgdmFsaWRhdG9yc09iamVjdDogYW55ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkge1xuICAgIHRoaXMuX2NvbmZpZ190b2tlbiA9IHRoaXMuaW5qZWN0b3IuZ2V0KFZTREtDb25maWdUb2tlbik7XG4gICAgdGhpcy5fckZvcm1fYmFja2VuZF91cmwgPSB0aGlzLl9jb25maWdfdG9rZW4uckZvcm1fYmFja2VuZF91cmw7XG4gIH1cblxuICBwdWJsaWMgZ2V0VmFsaWRhdG9yc0FycmF5KCkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRvcnMgJiYgdGhpcy52YWxpZGF0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5fckZvcm1fYmFja2VuZF91cmwgKyAnL3ZhbGlkYXRvcnMnKS50b1Byb21pc2UoKS50aGVuKChyZXNwb25zZTogYW55W10pID0+IHtcbiAgICAgICAgdGhpcy52YWxpZGF0b3JzID0gcmVzcG9uc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvcnMgYXMgYW55W107XG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFZhbGlkYXRvcnNPYmplY3QoKSB7XG4gICAgdGhpcy52YWxpZGF0b3JzT2JqZWN0ID0ge307XG4gICAgYXdhaXQgdGhpcy5nZXRWYWxpZGF0b3JzQXJyYXkoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmFsaWRhdG9yc1snbGVuZ3RoJ107IGkrKykge1xuICAgICAgY29uc3QgbmFtZSA9IHRoaXMudmFsaWRhdG9yc1tpXVsnbmFtZSddO1xuICAgICAgdGhpcy52YWxpZGF0b3JzT2JqZWN0W25hbWVdID0gcmVnUGFyc2UodGhpcy52YWxpZGF0b3JzW2ldWydyZWdleCddKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yc09iamVjdDtcbiAgfVxufVxuIl19