/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject } from 'rxjs';
import { VSDKConfigToken } from '../angular-api.module';
import { findIndex } from 'lodash';
var RecipientService = /** @class */ (function () {
    function RecipientService(httpClient, injector) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.recipientsSubject = new ReplaySubject();
        this.recipients = [];
        this._config_token = this.injector.get(VSDKConfigToken);
        this._rForm_backend_url = this._config_token.rForm_backend_url;
    }
    /**
     * @private
     * @param {?} recipient
     * @return {?}
     */
    RecipientService.prototype.updateRecipients = /**
     * @private
     * @param {?} recipient
     * @return {?}
     */
    function (recipient) {
        if (recipient && recipient['length'] && recipient['length'] > 0) {
            this.recipients = (/** @type {?} */ (recipient));
        }
        else if (recipient) {
            if (this.recipients && this.recipients['length'] && this.recipients['length'] > 0) {
                /** @type {?} */
                var updatedRecipientIndex = findIndex((/** @type {?} */ (this.recipients)), { role_name: recipient['role_name'] });
                if (updatedRecipientIndex !== -1) {
                    this.recipients[updatedRecipientIndex] = (/** @type {?} */ (recipient));
                }
            }
            else {
                this.recipients.push((/** @type {?} */ (recipient)));
            }
        }
        this.recipientsSubject.next(this.recipients);
    };
    /**
     * @param {?} envelopeId
     * @return {?}
     */
    RecipientService.prototype.getRecipients = /**
     * @param {?} envelopeId
     * @return {?}
     */
    function (envelopeId) {
        var _this = this;
        return this.httpClient.get(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients"))
            .toPromise().then((/**
         * @param {?} recipients
         * @return {?}
         */
        function (recipients) {
            _this.updateRecipients(recipients);
            return recipients;
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error(err);
            return [];
        }));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} recipientsToUpdate
     * @return {?}
     */
    RecipientService.prototype.prepareRecipients = /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} recipientsToUpdate
     * @return {?}
     */
    function (envId, roleName, recipientsToUpdate) {
        var _this = this;
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'prepare', recipients: recipientsToUpdate }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        function (updatedRecipient) {
            _this.updateRecipients(updatedRecipient);
        }));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} newFullName
     * @return {?}
     */
    RecipientService.prototype.updateRecipientName = /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} newFullName
     * @return {?}
     */
    function (envId, roleName, newFullName) {
        var _this = this;
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'update', new_full_name: newFullName }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        function (updatedRecipient) {
            _this.updateRecipients(updatedRecipient);
        }));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    RecipientService.prototype.setAsAgreed = /**
     * @param {?} envId
     * @param {?} roleName
     * @return {?}
     */
    function (envId, roleName) {
        var _this = this;
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName), { action: 'update', agreed: true }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        function (updatedRecipient) {
            _this.updateRecipients(updatedRecipient);
        }));
    };
    /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} profileToClaim
     * @return {?}
     */
    RecipientService.prototype.claimProfile = /**
     * @param {?} envId
     * @param {?} roleName
     * @param {?} profileToClaim
     * @return {?}
     */
    function (envId, roleName, profileToClaim) {
        var _this = this;
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envId + "/recipients/" + roleName + "/claim"), { profile: profileToClaim }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        function (updatedRecipient) {
            _this.updateRecipients(updatedRecipient);
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @param {?} recipientInfo
     * @return {?}
     */
    RecipientService.prototype.updateRecipientInfoByOwner = /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @param {?} recipientInfo
     * @return {?}
     */
    function (envelopeId, roleName, recipientInfo) {
        var _this = this;
        return this.httpClient.put(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients/" + roleName), { action: 'owner_update', full_name: recipientInfo.full_name, email: recipientInfo.email, phone: recipientInfo.phone }).toPromise().then((/**
         * @param {?} updatedRecipient
         * @return {?}
         */
        function (updatedRecipient) {
            _this.updateRecipients(updatedRecipient);
            return updatedRecipient;
        }));
    };
    /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    RecipientService.prototype.getInPersonLink = /**
     * @param {?} envelopeId
     * @param {?} roleName
     * @return {?}
     */
    function (envelopeId, roleName) {
        return this.httpClient.get(this._rForm_backend_url + ("/envelopes/" + envelopeId + "/recipients/" + roleName + "?in_person_link=true"))
            .toPromise().then((/**
         * @param {?} inPersonLink
         * @return {?}
         */
        function (inPersonLink) {
            return inPersonLink;
        }));
    };
    RecipientService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RecipientService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Injector }
    ]; };
    return RecipientService;
}());
export { RecipientService };
if (false) {
    /** @type {?} */
    RecipientService.prototype.recipientsSubject;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype._config_token;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype._rForm_backend_url;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.recipients;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    RecipientService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,