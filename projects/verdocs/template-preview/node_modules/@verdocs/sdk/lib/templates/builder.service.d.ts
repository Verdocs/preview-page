import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { EventTrackerService } from '@verdocs/event-tracker';
import { Observable, ReplaySubject } from 'rxjs';
import { ITemplate } from '../models/template.model';
import { IPage } from '../models/page.model';
import { IRole } from '../models/role.model';
import { IField } from '../models/field.model';
import { FieldRole } from '../models/field-role.model';
export declare class BuilderService {
    private http;
    private injector;
    private eventTracker;
    saveStatusSubject: ReplaySubject<string>;
    private _config_token;
    private _rForm_backend_url;
    constructor(http: HttpClient, injector: Injector, eventTracker: EventTrackerService);
    createTemplate(template_body: ITemplate): Observable<ITemplate>;
    uploadTemplateDocument(file: File, template: ITemplate): Observable<import("@angular/common/http").HttpEvent<unknown>>;
    addTemplatePage(document: any, pageNum: any, templateId: any): Observable<IPage>;
    addTemplatePages(document: any, pageNums: number[], templateId: string): Observable<IPage>;
    addTemplateField(newField: IField, i: any, j: any, template: ITemplate): Observable<ITemplate>;
    deleteTemplateField(template: ITemplate, fieldName: string, i: any, j: any): Observable<ITemplate>;
    updateRoleField(template: ITemplate, updated_field: any, role_index: any, old_name: any): ITemplate;
    updateTemplateField(template: ITemplate, body: IField, oldName: any, i: any, j: any): Observable<ITemplate>;
    updateDropdownField(template: ITemplate, body: any, oldName: any, i: any, j: any): Observable<ITemplate>;
    addFieldRole(templateId: string, fieldId: string, roleId: string, i: any, j: any): Promise<FieldRole>;
    addRole(role: IRole | IRole[], template: ITemplate): Observable<ITemplate>;
    deleteRole(roleName: any, template: ITemplate): Promise<void>;
    deleteRoles(roleNames: Array<string>, template: ITemplate): Observable<ITemplate>;
    updateRoles(roles: any, template: ITemplate): Observable<ITemplate>;
}
