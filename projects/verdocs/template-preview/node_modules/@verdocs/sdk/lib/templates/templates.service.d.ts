import { Injector } from '@angular/core';
import { HttpClient, HttpResponse, HttpEvent, HttpErrorResponse } from '@angular/common/http';
import { Subject, Observable } from 'rxjs';
import { VerdocsTokenObjectService } from '@verdocs/tokens';
import { ITemplate, IStarTemplate } from '../models/template.model';
import { TemplatesGuardService } from './templates.guard';
import { ITemplateSearchParams } from '../models/template_search.model';
export declare class TemplatesService {
    private http;
    private vTokenObjectService;
    private templateGuard;
    private injector;
    private platform;
    templates: Subject<ITemplate[]>;
    template: Subject<ITemplate | {}>;
    loadingStatus: Subject<boolean>;
    private _config_token;
    private rForm_backend_url;
    constructor(http: HttpClient, vTokenObjectService: VerdocsTokenObjectService, templateGuard: TemplatesGuardService, injector: Injector, platform: any);
    errorMessageNotVerified(err: any): boolean;
    getTemplates(filter?: 'creator' | 'organization' | 'starred'): Observable<HttpEvent<any> | ITemplate[] | HttpErrorResponse>;
    getTemplateObservable(id: string, thumbnail?: boolean): Observable<ITemplate>;
    starTemplate(id: any): Observable<IStarTemplate | HttpErrorResponse>;
    unstarTemplate(id: any): Observable<any>;
    getTemplate(id: any): Observable<ITemplate>;
    getCreatorTemplates(): Observable<ITemplate[] | import("@angular/common/http").HttpSentEvent | import("@angular/common/http").HttpHeaderResponse | import("@angular/common/http").HttpProgressEvent | HttpResponse<any> | import("@angular/common/http").HttpUserEvent<any> | HttpErrorResponse>;
    getOrganizationTemplates(): Observable<ITemplate[] | import("@angular/common/http").HttpSentEvent | import("@angular/common/http").HttpHeaderResponse | import("@angular/common/http").HttpProgressEvent | HttpResponse<any> | import("@angular/common/http").HttpUserEvent<any> | HttpErrorResponse>;
    getStarredTemplates(): Observable<ITemplate[] | import("@angular/common/http").HttpSentEvent | import("@angular/common/http").HttpHeaderResponse | import("@angular/common/http").HttpProgressEvent | HttpResponse<any> | import("@angular/common/http").HttpUserEvent<any> | HttpErrorResponse>;
    getPermissions(): any;
    getTemplateOwnerInfo(id: string): Promise<{
        profile_id: string;
        email: string;
        name: string;
    }>;
    getTemplateDocumentPDFObservable(template_id: any, template_document: any): Observable<Blob>;
    getTemplateDocument(templateId: any, templateDocument: any): Promise<Blob>;
    getTemplateThumbnail(templateId: any, templateDocumentId: any): Promise<Blob>;
    getAllTemplateDocumentsObservable(templateId: any): Observable<Object>;
    getAllTemplateDocuments(templateId: any): Promise<Object>;
    downloadTemplateDocument(template: ITemplate): void;
    prepareSave(template: any, template_file: any): void;
    searchTemplates(searchParams: ITemplateSearchParams): Observable<HttpEvent<unknown>>;
    updateTemplateObservable(templateId: string, body: any): Observable<ITemplate>;
    updateTemplate(templateId: string, body: any): Promise<ITemplate>;
    deleteTemplate(templateId: any): Observable<Object>;
    deleteSequence(templateId: any, sequence_number: any): Promise<Object>;
    updateTemplates(templates: any): void;
    canSendEnvelope(template: any): boolean;
}
