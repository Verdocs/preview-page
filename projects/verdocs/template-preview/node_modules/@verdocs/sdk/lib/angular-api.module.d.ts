import { InjectionToken } from '@angular/core';
import { TokensModule } from '@verdocs/tokens';
import { ValidatorService } from './validators/validator.service';
import { AuthGuardService } from './guards/auth-guard.service';
import { DocumentsService } from './documents/document.service';
import { EnvelopRemindersService } from './documents/envelope-reminders.service';
import { RecipientService } from './recipients/recipients.service';
import { BuilderService } from './templates/builder.service';
import { TemplatesRemindersService } from './templates/template-reminders.service';
import { TemplatesGuardService } from './templates/templates.guard';
import { TemplatesService } from './templates/templates.service';
export interface VSDKConfig {
    production: boolean;
    domain: string;
    rForm_backend_url: string;
    rForm_frontend_url: string;
    rSecure_frontend_url: string;
    rSecure_backend_url: string;
    rAccount_frontend_url: string;
    rAccount_backend_url: string;
    rNotification_backend_url: string;
    loginURL: string;
    origin: 'rAccount' | 'rForm';
    plans: {
        'level-1': string;
        'level-2': string;
        'level-3': string;
    };
}
export declare const VSDKConfigToken: InjectionToken<VSDKConfig>;
export declare class AngularApiModule {
    static initSDK(config: VSDKConfig): {
        ngModule: typeof AngularApiModule;
        imports: {
            ngModule: typeof TokensModule;
            providers: {
                provide: InjectionToken<import("@verdocs/tokens").VTokenConfig>;
                useValue: import("@verdocs/tokens").VTokenConfig;
            }[];
        }[];
        providers: (typeof AuthGuardService | typeof DocumentsService | typeof EnvelopRemindersService | typeof RecipientService | typeof BuilderService | typeof TemplatesRemindersService | typeof TemplatesGuardService | typeof TemplatesService | typeof ValidatorService | {
            provide: InjectionToken<VSDKConfig>;
            useValue: VSDKConfig;
        } | {
            provide: InjectionToken<import("@verdocs/tokens").VTokenConfig>;
            useValue: {
                cookieName: string;
                domain: string;
                origin: "rAccount" | "rForm";
                verdocs_name: string;
                account_name: string;
                loginURL: string;
                production: boolean;
            };
        })[];
    };
}
