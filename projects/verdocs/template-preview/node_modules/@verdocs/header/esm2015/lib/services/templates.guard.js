/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { VerdocsTokenObjectService } from '@verdocs/tokens';
import { intersection } from 'lodash';
import { Injectable } from '@angular/core';
import { TemplateActions, TemplatePermissions, TemplateSenderTypes } from '../models/verdocs.model';
export class TemplatesGuardService {
    /**
     * @param {?} vTokenObjectService
     */
    constructor(vTokenObjectService) {
        this.vTokenObjectService = vTokenObjectService;
    }
    /**
     * @param {?} action
     * @param {?} template
     * @return {?}
     */
    canPerformAction(action, template) {
        try {
            /** @type {?} */
            let canPerform = false;
            /** @type {?} */
            let message = null;
            /** @type {?} */
            const neededPermissions = [];
            if (!template && action && !action.includes('create')) {
                throw {
                    error: 'You need to provide template object'
                };
            }
            /** @type {?} */
            const userProfile = this.vTokenObjectService.getProfile();
            /** @type {?} */
            const isCreator = userProfile ? template && template.profile_id === userProfile.id : false;
            /** @type {?} */
            const isSameOrg = userProfile ? template && template.organization_id === userProfile.organization_id : false;
            /** @type {?} */
            const isPersonal = template ? template.is_personal : null;
            /** @type {?} */
            const isPublic = template ? template.is_public : null;
            switch (action) {
                case TemplateActions.CREATE_PERSONAL:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                    break;
                case TemplateActions.CREATE_ORG:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                    break;
                case TemplateActions.CREATE_PUBLIC:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                    break;
                case TemplateActions.READ:
                    if (!isCreator) {
                        if ((!isPersonal && isSameOrg) || !isPublic) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                        }
                    }
                    break;
                case TemplateActions.WRITE:
                    if (!isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_WRITE);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_PERSONAL:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                        // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_ORG:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                        // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_PUBLIC:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.DELETE:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_DELETE);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_DELETE);
                    }
                    break;
                default:
                    throw {
                        error: 'Action is not defined'
                    };
            }
            if (this.hasPermissions(neededPermissions)) {
                canPerform = true;
            }
            else {
                message = `Insufficient access to perform '${action}'. Needed permissions: ${neededPermissions.toString()}`;
            }
            return {
                canPerform,
                message
            };
        }
        catch (err) {
            console.error({
                message: `Failed to check whether action (${action}) can be done, in TemplateGuardService`,
                err: err
            });
        }
    }
    /**
     * @private
     * @param {?} requiredPermissions
     * @return {?}
     */
    hasPermissions(requiredPermissions) {
        /** @type {?} */
        const userPermissions = this.vTokenObjectService.getPermissions();
        /** @type {?} */
        const hasPermissions = intersection(userPermissions, requiredPermissions).length === requiredPermissions.length;
        return hasPermissions;
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canBeSender(template) {
        /** @type {?} */
        const userProfile = this.vTokenObjectService.getProfile();
        if (!userProfile) {
            return false;
        }
        switch (template.sender) {
            case TemplateSenderTypes.CREATOR:
                return userProfile.id === template.profile_id;
            case TemplateSenderTypes.ORGANIZATION_MEMBER:
            case TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR:
                return userProfile.id === template.profile_id || template.organization_id === userProfile.organization_id;
            default:
                return true;
        }
    }
    /**
     * @return {?}
     */
    canUserCreateTemplate() {
        return this.canPerformAction(TemplateActions.CREATE_PERSONAL, null)['canPerform']
            || this.canPerformAction(TemplateActions.CREATE_ORG, null)['canPerform']
            || this.canPerformAction(TemplateActions.CREATE_PUBLIC, null)['canPerform'];
    }
}
TemplatesGuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TemplatesGuardService.ctorParameters = () => [
    { type: VerdocsTokenObjectService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TemplatesGuardService.prototype.vTokenObjectService;
}
//# sourceMappingURL=data:application/json;base64,