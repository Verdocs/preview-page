/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer, isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { ReplaySubject, Subject, BehaviorSubject, EMPTY } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { findIndex, filter } from 'lodash';
import { saveAs } from 'file-saver';
import { ProfileModel, ProfileCollection } from '@verdocs/profiles';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { connectionConfigToken } from '../header.module';
import { TemplatesGuardService } from './templates.guard';
import { TemplateActions } from '../models/verdocs.model';
import { FourOhOneDialog } from '../error-dialogs/four-oh-one.dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/snack-bar";
import * as i4 from "@angular/material/dialog";
import * as i5 from "./templates.guard";
import * as i6 from "@verdocs/tokens";
export class VerdocsHeaderService {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} router
     * @param {?} snackbar
     * @param {?} dialog
     * @param {?} templateGuard
     * @param {?} vTokenStateService
     * @param {?} vTokenObjectService
     * @param {?} platform
     */
    constructor(injector, http, router, snackbar, dialog, templateGuard, vTokenStateService, vTokenObjectService, platform) {
        this.injector = injector;
        this.http = http;
        this.router = router;
        this.snackbar = snackbar;
        this.dialog = dialog;
        this.templateGuard = templateGuard;
        this.vTokenStateService = vTokenStateService;
        this.vTokenObjectService = vTokenObjectService;
        this.platform = platform;
        this.titleSubject = new ReplaySubject();
        this.csvBlobSubject = new ReplaySubject();
        this.templates = new Subject();
        this.saveStatusSubject = new ReplaySubject();
        this.templateDetailToggleSubject = new Subject();
        this.profileLoadingSubject = new ReplaySubject();
        this.templateSubject = new Subject();
        this.allEnvelopes = new BehaviorSubject([]);
        this.sideNavStateSubject = new ReplaySubject();
        this.initiateBuilderAutofocus = new ReplaySubject();
        this.createToggleSubscription = new Subject();
        this._toggleSidenavSource = new BehaviorSubject(false);
        this._title = new BehaviorSubject('');
        this._selected = new BehaviorSubject(false);
        this._pdfUrl = new BehaviorSubject('');
        this._env = new BehaviorSubject({
            id: '',
            template_id: '',
            status: '',
            user_id: '',
            envelope_document_id: ''
        });
        this._envDoc = new BehaviorSubject({
            id: '',
            url: '',
            name: '',
            page_numbers: 0,
            mime: '',
        });
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.isAtOrigin = false;
        this.currentOrganizationId = null;
        this.sidenavOpened = false;
        this.toggleSidenav$ = this._toggleSidenavSource.asObservable();
        this.selectStatus$ = this._selected.asObservable();
        this.env$ = this._env.asObservable();
        this.titleValue$ = this._title.asObservable();
        this.pdfUrl$ = this._pdfUrl.asObservable();
        this.envDoc$ = this._envDoc.asObservable();
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(connectionConfigToken);
        this.envUrl = this.tokenConfig.rForm_backend_url + '/envelopes';
        this.rForm_url = this.tokenConfig.rForm_frontend_url;
        this.rAccount_url = this.tokenConfig.rAccount_frontend_url;
        this.rSecure_url = this.tokenConfig.rSecure_frontend_url;
    }
    /**
     * @param {?} originType
     * @return {?}
     */
    getAtOrigin(originType) {
        this.isAtOrigin = originType && this.tokenConfig.origin && originType === this.tokenConfig.origin;
        return this.isAtOrigin;
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    toggleSidenav(bool) {
        this.updateToggleStatus(bool);
        this._toggleSidenavSource.next(this.sidenavOpened);
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    updateToggleStatus(bool) {
        this.sidenavOpened = bool;
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updateTitle(string) {
        this._title.next(string);
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    updateSelectStatus(bool) {
        this._selected.next(bool);
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updatePdfUrl(string) {
        this._pdfUrl.next(string);
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updateEnv(string) {
        this._env.next(string);
    }
    /**
     * @param {?} IEnvelopeDocument
     * @return {?}
     */
    updateEnvDoc(IEnvelopeDocument) {
        this._envDoc.next(IEnvelopeDocument);
    }
    /**
     * @return {?}
     */
    initNotificationService() { }
    /**
     * @param {?} envelopes
     * @return {?}
     */
    updateEnvelopes(envelopes) {
        this.allEnvelopes.next(envelopes);
    }
    /**
     * @return {?}
     */
    toggleCreate() {
        this.createToggleSubscription.next(true);
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchEnvelopes(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.envUrl + '/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof HttpResponse) {
                this.updateEnvelopes(event.body);
            }
            return event;
        })));
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchTemplates(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.tokenConfig.rForm_backend_url + '/templates/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event;
        })));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    downloadTemplateDocument(template) {
        this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
         * @param {?} template_file
         * @return {?}
         */
        template_file => {
            if (isPlatformBrowser(this.platform)) {
                if (window && window.URL) {
                    /** @type {?} */
                    const fileUrl = URL.createObjectURL(template_file);
                    saveAs(fileUrl, template.template_documents[0].name + '.pdf');
                }
            }
        }));
    }
    /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    getTemplateDocument(templateId, templateDocument) {
        return this.http.get(this.tokenConfig.rForm_backend_url + '/templates/' + templateId + '/documents/' +
            templateDocument.id + '?file=true', { responseType: 'blob' }).toPromise();
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    updateTemplates(templates) {
        this.templates.next(templates);
    }
    /**
     * @return {?}
     */
    toggleBuilderSideNav() {
        this.builderSideNavState = !this.builderSideNavState;
        this.sideNavStateSubject.next(this.builderSideNavState);
        if (this.builderSideNavState === false) {
            this.initiateBuilderAutofocus.next(false);
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserEdit(template) {
        /** @type {?} */
        const response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    }
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    updateTemplate(templateId, body) {
        return this.http
            .put(this.tokenConfig.rForm_backend_url + '/templates/' + templateId, body)
            .toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        template => template));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openTemplate(template) {
        if (this.canUserPreview(template)) {
            location.href = `${this.tokenConfig.rForm_frontend_url}/document/${template.id}`;
        }
        else if (this.canUserEdit(template)) {
            location.href = `${this.tokenConfig.rForm_frontend_url}/builder/${template.id}/fields`;
        }
        else {
            this.snackbar.open(`Template is in build mode, and not ready for use.  Please check back soon.`);
        }
    }
    /**
     * @param {?=} searchKeyword
     * @return {?}
     */
    openTemplates(searchKeyword) {
        if (this.tokenConfig.origin === 'rForm') {
            if (searchKeyword.trim() !== '') {
                this.router.navigate(['documents'], { queryParams: { name: searchKeyword } });
            }
            else {
                this.router.navigate(['documents']);
            }
        }
        else {
            if (searchKeyword.trim() !== '') {
                location.href = `${this.tokenConfig.rForm_frontend_url}/documents?name=${searchKeyword}`;
            }
            else {
                location.href = `${this.tokenConfig.rForm_frontend_url}/documents`;
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplateOwnerInfo(id) {
        return this.http.get(`${this.tokenConfig.rForm_backend_url}/templates/${id}?owner_info=true`)
            .toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return res;
        }));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserPreview(template) {
        /** @type {?} */
        const hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        let canPreview;
        /** @type {?} */
        const roles = template.roles;
        /** @type {?} */
        const signers = filter(roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        for (const signer of signers) {
            canPreview = signer['fields'] && signer['fields'].length > 0;
        }
        return hasPermission && canPreview;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    starTemplate(id) {
        return this.http.post(this.tokenConfig.rForm_backend_url + `/templates/${id}/stars`, {}).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err && err.status === 401) {
                /** @type {?} */
                const errorDialog = this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unstarTemplate(id) {
        return this.http.delete(this.tokenConfig.rForm_backend_url + `/templates/${id}/stars`).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err && err.status === 401) {
                /** @type {?} */
                const errorDialog = this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)));
    }
    //Account Services
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    updateTokens(sendMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.vTokenStateService.updateTokens(this.tokenConfig.rSecure_backend_url).subscribe((/**
                 * @param {?} tokens
                 * @return {?}
                 */
                tokens => {
                    if (tokens && tokens.length > 0) {
                        if (sendMessage) {
                            this.snackbar.dismiss();
                            this.snackbar.open('Status updated');
                        }
                    }
                    this.getAccountData();
                    return resolve();
                }));
            }));
        });
    }
    /**
     * @return {?}
     */
    getAccountData() {
        // might need if header needs to show condition
        /** @type {?} */
        const profile = this.vTokenObjectService.getProfile();
        if (profile) {
            this.getProfiles();
        }
    }
    /**
     * @return {?}
     */
    getProfiles() {
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            p => p.organization.name === 'realster')), 1);
            this.personalAccountSubject.next(personal[0]);
            this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            this.profileData.unshift(personal[0]);
            /** @type {?} */
            const currentIndex = findIndex(this.profileData, { current: true });
            if (this.profileData[currentIndex]['first_name']) {
                this.userFullname = this.profileData[currentIndex]['first_name'] + ' ' + this.profileData[currentIndex]['last_name'];
                this.userInitial = this.profileData[currentIndex]['first_name'].charAt(0) +
                    this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                this.userFullname = '';
            }
            if (this.profileData[currentIndex]['phone']) {
                this.userPhone = this.profileData[currentIndex]['phone'];
            }
            else {
                this.userPhone = '';
            }
            if (this.profileData[currentIndex]['email']) {
                this.userEmail = this.profileData[currentIndex]['email'];
            }
            this.userData = {
                name: this.userFullname,
                initial: this.userInitial,
                email: this.userEmail,
                phone: this.userPhone
            };
            this.userProfileSubject.next(this.profileData);
            /** @type {?} */
            const currentProfile = this.profileData[currentIndex];
            this.currentProfileSubject.next(currentProfile);
            this.currentOrganizationId = currentProfile.organization_id;
            this.userDataSubject.next(this.userData);
            return this.userData;
        }));
    }
    /**
     * @param {?} profiles
     * @return {?}
     */
    getProfileCollection(profiles) {
        /** @type {?} */
        const profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        profile => {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        const profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    }
    /**
     * @param {?} profile_id
     * @return {?}
     */
    switchProfile(profile_id) {
        this.profileLoadingSubject.next(true);
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.vTokenStateService.setTokens(res.tokens);
            this.profileLoadingSubject.next(false);
            return Promise.resolve(res);
        })));
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.http.post(this.tokenConfig.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.snackbar.open('Verification email sent');
        }));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getNameValidity(name) {
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @param {?} body
     * @return {?}
     */
    createOrganization(body) {
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getOptions() {
        if (isPlatformServer(this.platform)) {
            return;
        }
        /** @type {?} */
        const vTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        const authValue = 'Bearer ' + vTokenCookie['accessToken'];
        /** @type {?} */
        const headers = new HttpHeaders({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { headers };
    }
    // End of Account Services
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    getRoleColor(name, index) {
        if (index) {
            return this.getRGBA(index);
        }
        else if (this.template && this.template.roles && this.template.roles.length > 0) {
            index = findIndex(this.template.roles, { name: name });
            if (index >= 0) {
                return this.template.roles[index].rgba ? this.template.roles[index].rgba : this.getRGBA(index);
            }
            else {
                return this.nameToRGBA(name);
            }
        }
        else {
            return this.nameToRGBA(name);
        }
    }
    /**
     * @param {?} rgba
     * @return {?}
     */
    getRGB(rgba) {
        /** @type {?} */
        const rgbNumbers = rgba.replace('rgba(', '').replace(')', '').split(',');
        /** @type {?} */
        const rgbObject = {
            red: rgbNumbers[0],
            green: rgbNumbers[1],
            blue: rgbNumbers[2],
            alpha: rgbNumbers[3]
        };
        /** @type {?} */
        const alpha = 1 - rgbObject.alpha;
        /** @type {?} */
        const red = Math.round((rgbObject.alpha * (rgbObject.red / 255) + alpha) * 255);
        /** @type {?} */
        const green = Math.round((rgbObject.alpha * (rgbObject.green / 255) + alpha) * 255);
        /** @type {?} */
        const blue = Math.round((rgbObject.alpha * (rgbObject.blue / 255) + alpha) * 255);
        return ('#' + this.rgbToHex(red) + this.rgbToHex(green) + this.rgbToHex(blue));
    }
    /**
     * @param {?} rgb
     * @return {?}
     */
    rgbToHex(rgb) {
        /** @type {?} */
        const hex = rgb.toString(16);
        if (hex.length < 2) {
            return '0' + hex;
        }
        return hex;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getRGBA(index) {
        switch (index % 10) {
            case 0:
                return index === 0 ? 'rgba(255, 193, 7, 0.4)' : 'rgba(134, 134, 134, 0.3)'; //#FFE69C
            case 1:
                return 'rgba(156, 39, 176, .4)'; //'#E3C3E9'
            case 2:
                return 'rgba(33, 150, 243, .4)'; //'#C1E1FB'
            case 3:
                return 'rgba(220, 231, 117, 0.3)';
            case 4:
                return 'rgba(121, 134, 203, 0.3)';
            case 5:
                return 'rgba(77, 182, 172, 0.3)';
            case 6:
                return 'rgba(255, 202, 165, 0.3)';
            case 7:
                return 'rgba(2, 247, 190, 0.3)';
            case 8:
                return 'rgba(255, 138, 101, 0.3)';
            case 9:
                return 'rgba(82, 255, 79, 0.3)';
            default:
                return 'rgba(229, 115, 155, 0.3)';
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    nameToRGBA(str) {
        if (!!str) {
            /** @type {?} */
            const validNum = parseInt(str.slice(-1), 10);
            if (!isNaN(validNum)) {
                str += (validNum * 99).toString();
            }
            /** @type {?} */
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            hash = Math.round(hash / 1.3);
            /** @type {?} */
            const c = (hash & 0x00FFFF08)
                .toString(16)
                .toUpperCase();
            /** @type {?} */
            const hex = '#' + '00000'.substring(0, 6 - c.length) + c;
            /** @type {?} */
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            /** @type {?} */
            const color = {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            };
            return `rgba(${color.r}, ${color.g}, ${color.b}, 0.2)`;
        }
    }
}
VerdocsHeaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
VerdocsHeaderService.ctorParameters = () => [
    { type: Injector },
    { type: HttpClient },
    { type: Router },
    { type: MatSnackBar },
    { type: MatDialog },
    { type: TemplatesGuardService },
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ VerdocsHeaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VerdocsHeaderService_Factory() { return new VerdocsHeaderService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.TemplatesGuardService), i0.ɵɵinject(i6.VerdocsStateService), i0.ɵɵinject(i6.VerdocsTokenObjectService), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: VerdocsHeaderService, providedIn: "root" });
if (false) {
    /** @type {?} */
    VerdocsHeaderService.prototype.tokenConfig;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.csvBlobSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templates;
    /** @type {?} */
    VerdocsHeaderService.prototype.saveStatusSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateDetailToggleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profileLoadingSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.template;
    /** @type {?} */
    VerdocsHeaderService.prototype.allEnvelopes;
    /** @type {?} */
    VerdocsHeaderService.prototype.sideNavStateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.initiateBuilderAutofocus;
    /** @type {?} */
    VerdocsHeaderService.prototype.createToggleSubscription;
    /** @type {?} */
    VerdocsHeaderService.prototype.rAccount_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rSecure_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rForm_url;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._toggleSidenavSource;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._title;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._pdfUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._env;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._envDoc;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.builderSideNavState;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.isAtOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrganizationId;
    /** @type {?} */
    VerdocsHeaderService.prototype.sidenavOpened;
    /** @type {?} */
    VerdocsHeaderService.prototype.toggleSidenav$;
    /** @type {?} */
    VerdocsHeaderService.prototype.selectStatus$;
    /** @type {?} */
    VerdocsHeaderService.prototype.env$;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleValue$;
    /** @type {?} */
    VerdocsHeaderService.prototype.pdfUrl$;
    /** @type {?} */
    VerdocsHeaderService.prototype.envDoc$;
    /** @type {?} */
    VerdocsHeaderService.prototype.userDataSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.userProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.currentProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.personalAccountSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,