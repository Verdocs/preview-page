/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { VerdocsTokenObjectService } from '@verdocs/tokens';
import { VerdocsHeaderService } from '../../services/header.service';
import { TemplateSenderTypes } from '../../models/verdocs.model';
export class RecipientEditorComponent {
    /**
     * @param {?} verdocsHeaderService
     * @param {?} vTokenObjectService
     */
    constructor(verdocsHeaderService, vTokenObjectService) {
        this.verdocsHeaderService = verdocsHeaderService;
        this.vTokenObjectService = vTokenObjectService;
        this.roles = [];
        this.sender = 'creator';
        this.sender_name = '';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.prepareSender();
        this.prepareExistingRoles();
    }
    /**
     * @return {?}
     */
    prepareSender() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.sender = this.template.sender || 'creator';
            yield this.updateSenderName();
        });
    }
    /**
     * @return {?}
     */
    updateSenderName() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const profile = this.vTokenObjectService.getProfile();
            /** @type {?} */
            const ownerInfo = yield this.verdocsHeaderService.getTemplateOwnerInfo(this.template.id);
            switch (this.sender) {
                case TemplateSenderTypes.ORGANIZATION_MEMBER:
                    this.sender_name = 'Anyone at ' + (profile ? profile.organization.name : 'organization');
                    break;
                case TemplateSenderTypes.EVERYONE:
                    this.sender_name = 'Anyone';
                    break;
                case TemplateSenderTypes.EVERYONE_AS_CREATOR:
                case TemplateSenderTypes.CREATOR:
                case TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR:
                    if (profile && this.template.profile_id === profile.id) {
                        this.sender_name = profile.first_name + ' ' + profile.last_name + ' (me)';
                    }
                    else {
                        this.sender_name = ownerInfo.name + ' (creator)';
                    }
                    break;
            }
        });
    }
    /**
     * @param {?=} recipients
     * @return {?}
     */
    prepareExistingRoles(recipients) {
        /** @type {?} */
        let roles = [];
        if (recipients && recipients.length > 0) {
            roles = recipients;
        }
        else {
            roles = this.template.roles.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sequence - b.sequence;
            })).slice();
        }
        roles = this.setStyles(roles);
        this.roles = [];
        for (let roleIndex = 0; roleIndex < roles.length; roleIndex++) {
            if (roles[roleIndex]) {
                /** @type {?} */
                const sequenceIndex = roles[roleIndex].sequence - 1;
                if (!roles[roleIndex]['status']) {
                    roles[roleIndex]['status'] = null;
                }
                if (!roles[roleIndex]['old_name']) {
                    roles[roleIndex]['old_name'] = roles[roleIndex].name;
                }
                if (this.roles[sequenceIndex] === undefined) {
                    this.roles[sequenceIndex] = [roles[roleIndex]];
                }
                else {
                    this.roles[sequenceIndex].push(roles[roleIndex]);
                }
            }
        }
        if (this.roles && this.roles.length === 0 && !this.roles[0]) {
            this.roles = [];
            this.roles[0] = [];
        }
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    setStyles(roles) {
        roles.forEach((/**
         * @param {?} role
         * @param {?} index
         * @return {?}
         */
        (role, index) => {
            if (role) {
                if (role.full_name && role.email) {
                    role['style'] = {
                        'border': '1px solid ' + this.verdocsHeaderService.getRGBA(index),
                        'background-color': 'transparent'
                    };
                }
                else {
                    role['style'] = {
                        'background': this.verdocsHeaderService.getRGBA(index),
                        'border': '1px solid getRGBA(index)'
                    };
                }
            }
        }));
        return roles;
    }
}
RecipientEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-recipient-editor',
                template: "<div class=\"template-recipients__container\" *ngIf=\"template\">\n  <div class=\"template-recipients__wrapper\">\n    <div class=\"template-recipients__body\">\n      <div class=\"template-recipients__sender\">\n        <div class=\"template-recipients__icon\">\n          <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Sender\" [matTooltipPosition]=\"'below'\">trip_origin</mat-icon>\n        </div>\n        <div class=\"template-recipients__dots\"></div>\n        <div class=\"template-recipients__chips sender\">\n          <mat-chip class=\"template-recipients__chip-sender\">\n            <span>\n              {{sender_name}}\n            </span>\n          </mat-chip>\n        </div>\n      </div>\n      <div class=\"template-recipients__roles\" *ngIf=\"roles && roles.length > 0\">\n        <div class=\"template-recipients__role\" *ngFor=\"let sequence of roles; let sequenceIndex = index;\">\n          <div class=\"template-recipients__icon\">\n            <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Sequence\" [matTooltipPosition]=\"'below'\">place</mat-icon>\n          </div>\n          <div class=\"template-recipients__dots\"></div>\n          <div class=\"template-recipients__chips\">\n            <div class=\"template-recipients__field\">\n              <mat-chip-list class=\"template-recipients__chip-list\" #roleChipList aria-label=\"roles\">\n                <div class=\"template-recipients__chip-wrapper\">\n                  <mat-chip class=\"template-recipients__chip-recipient\" *ngFor=\"let role of sequence\"\n                    [ngStyle]=\"role.style\" [removable]=\"false\" [ngClass]=\"{hidden: role.status === 'delete'}\">\n                    {{role.full_name && role.email ? role.full_name : role.name}}\n                  </mat-chip>\n                </div>\n              </mat-chip-list>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"template-recipients__sender\">\n        <div class=\"template-recipients__icon\">\n          <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Verdco complete\" [matTooltipPosition]=\"'below'\">done_all</mat-icon>\n        </div>\n        <div class=\"template-recipients__chips sender\">\n          <mat-chip class=\"template-recipients__chip-sender no-border\">\n            <span>\n              Complete\n            </span>\n          </mat-chip>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                styles: [".template-recipients__wrapper{position:relative;margin:0 auto;width:100%;max-width:600px}.template-recipients__body{position:relative}.template-recipients__sender{position:relative;min-height:48px}.template-recipients__sender:after{content:\"\";display:table;clear:both}.template-recipients__sender-text{margin-top:8px;margin-bottom:8px;font-size:12px;line-height:12px;color:rgba(0,0,0,.54)}.template-recipients__sender-radio{display:flex;align-items:center;height:40px}.template-recipients__roles{position:relative;min-height:48px}.template-recipients__roles:after{content:\"\";display:table;clear:both}.template-recipients__role{position:relative;min-height:48px}.template-recipients__role:after{content:\"\";display:table;clear:both}.template-recipients__icon{position:absolute;top:12px;left:16px;display:inline-block;width:24px;height:24px;z-index:10;background-color:#fff;border-radius:100%}.template-recipients__icon-icon{color:rgba(0,0,0,.54)}.template-recipients__dots{position:absolute;top:24px;left:25.7px;height:100%;border-left:4px dotted #9b9b9b;z-index:1}.template-recipients__chips{position:relative;min-height:48px;margin-left:64px;display:flex;align-items:center;border-bottom:1px solid #d1d5da}.template-recipients__chips.sender,.template-recipients__chips.sequence{display:flex;align-items:center}.template-recipients__chip-list{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.template-recipients__chip-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;width:100%;min-height:40px}.template-recipients__chip-recipient.no-border,.template-recipients__chip-sender.no-border{padding-left:0;border:none;pointer-events:none}.template-recipients__chip-recipient.hidden,.template-recipients__chip-sender.hidden{display:none}.template-recipients__chip-recipient.icon-right,.template-recipients__chip-sender.icon-right{padding-right:8px}.template-recipients__chip-recipient:hover,.template-recipients__chip-sender:hover{cursor:pointer}.template-recipients__chip-recipient.cdk-drag-placeholder{background:#ccc;border:3px dotted #999;border-radius:16px;opacity:1;height:32px;transition:transform 250ms cubic-bezier(0,0,.2,1)}.template-recipients__chip-sender{background-color:transparent;border:1px solid rgba(98,113,123,.2)}.template-recipients__chip-add{border:1px dashed #979797;background-color:transparent}.template-recipients__chip-add.icon-left{padding-left:8px}.template-recipients__chip-add:hover{cursor:pointer}.template-recipients__chip-edit{width:18px;height:18px;color:rgba(0,0,0,.87);font-size:18px;margin-left:8px}.template-recipients__chip-icon--left{width:18px;height:18px;color:rgba(0,0,0,.87);font-size:18px;margin-right:8px}"]
            }] }
];
/** @nocollapse */
RecipientEditorComponent.ctorParameters = () => [
    { type: VerdocsHeaderService },
    { type: VerdocsTokenObjectService }
];
RecipientEditorComponent.propDecorators = {
    template: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RecipientEditorComponent.prototype.roles;
    /** @type {?} */
    RecipientEditorComponent.prototype.sender;
    /** @type {?} */
    RecipientEditorComponent.prototype.sender_name;
    /** @type {?} */
    RecipientEditorComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    RecipientEditorComponent.prototype.verdocsHeaderService;
    /**
     * @type {?}
     * @private
     */
    RecipientEditorComponent.prototype.vTokenObjectService;
}
//# sourceMappingURL=data:application/json;base64,