import { OnInit, OnDestroy, AfterViewChecked, ElementRef, Compiler, ChangeDetectorRef, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { VerdocsStateService, VerdocsAuthService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { VerdocsHeaderService } from './services/header.service';
import { TemplatesGuardService } from './services/templates.guard';
import { ITemplate, Envelope } from './models/verdocs.model';
import { connectionConfig } from './header.module';
export declare class HeaderComponent implements OnInit, AfterViewChecked, OnDestroy {
    private verdocsHeaderService;
    private vTokenStateService;
    private vTokenObjectService;
    private vAuthService;
    private templateGuard;
    private router;
    private cdr;
    private compiler;
    private injector;
    private platform;
    pageLoading: boolean;
    connections: connectionConfig;
    title: string;
    isAuthenticated: boolean;
    headerTitle: string;
    mode: string;
    searchActive: boolean;
    templateName: string;
    newTemplateName: any;
    saveStatus: string;
    notifications: Notification[];
    loading: boolean;
    myAccountUrl: string;
    termsUrl: string;
    privacyUrl: string;
    newProfile: any;
    organization_id: string;
    emailVerified: boolean;
    organizationImgSrc: string;
    csvBlob: Blob;
    templateDetailsExpanded: boolean;
    template: ITemplate;
    isSearching: boolean;
    envelopeResult: Envelope[];
    templateResult: ITemplate[];
    currentProfile: any;
    inputFocused: boolean;
    manageLink: string;
    templatesLink: string;
    rSecureFrontEnd: string;
    rFormFrontEnd: string;
    isLiveView: boolean;
    verdocs_url: string;
    image_url: string;
    isAtOriginalOrigin: boolean;
    app_version: string;
    currentAt: string;
    currentOrigin: 'rForm' | 'rAccount' | 'rSecure';
    header: ElementRef;
    searchBar: ElementRef;
    templateTitleInput: ElementRef;
    previewInput: ElementRef;
    generalInput: ElementRef;
    private sidenavOpen;
    private _canStar;
    private _canCreate;
    private _canEdit;
    private _userStarred;
    private metaDataSubscription;
    private titleSubscription;
    private titleInputSubscription;
    private titleKeyDownSubscription;
    private templateNameSubscription;
    private templateSubscription;
    private saveStatusSubscription;
    private profileLoadingSubscription;
    private userDataSubscription;
    private modeSubscription;
    private previewInputSubscription;
    private generalInputSubscription;
    private navigationEventSubscription;
    private csvBlobSubscription;
    private inputTimer;
    private origin;
    constructor(verdocsHeaderService: VerdocsHeaderService, vTokenStateService: VerdocsStateService, vTokenObjectService: VerdocsTokenObjectService, vAuthService: VerdocsAuthService, templateGuard: TemplatesGuardService, router: Router, cdr: ChangeDetectorRef, compiler: Compiler, injector: Injector, platform: any);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    init(): Promise<void>;
    readonly home_url: string;
    previewInputEvent(event: any): void;
    generalInputEvent(event: any): void;
    prepareSearchInput(): void;
    listenForPreviewInput(): void;
    listenForGeneralInput(): void;
    readonly canStar: boolean;
    readonly userStarred: boolean;
    readonly canEdit: boolean;
    readonly canCreate: boolean;
    getProfile(): void;
    selected(event: any): void;
    checkCanStar(): void;
    getSearchResults(search_string: string): void;
    recipientTracking(index: any, item: any): any;
    toggleMenu(): void;
    setInputFocused(value: boolean): void;
    hasProp(obj: any, key: string): any;
    roleColor(name: any): string;
    toggleSidenav(): void;
    toggleTemplateDetails(): void;
    reset(): void;
    getRoleNames(roles: any): string;
    getTemplateStats(template: ITemplate): string;
    getTemplatePages(template: ITemplate): string;
    getTemplateSequence(template: ITemplate): string;
    getTemplateRecipients(template: ITemplate): string;
    goToEnvelope(envelope_id: string): void;
    goToTemplate(template: ITemplate): void;
    goToTemplates(keyword: any): void;
    searchEnvelopes(): void;
    searchRecipients(): void;
    searchTemplates(): void;
    getSearchKeyword(): any;
    clearSearchInputs(): void;
    updateStar(): boolean;
    starTemplate(): void;
    unstarTemplate(): void;
    editTemplate(): void;
    createTemplate(): void;
}
