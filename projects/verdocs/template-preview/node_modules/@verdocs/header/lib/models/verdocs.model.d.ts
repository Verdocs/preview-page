export interface ITemplate {
    template_documents?: ITemplateDocument[];
    pages?: IPage[];
    roles?: IRole[];
    counter?: number;
    name: string;
    id?: string;
    profile_id?: string;
    created_at?: Date;
    updated_at?: Date;
    token?: string;
    tags?: any[];
    description?: string;
    reminder_id?: string;
    reminder?: object;
    template_stars?: any[];
    organization_id?: string;
    is_personal?: boolean;
    is_public?: boolean;
    sender?: TemplateSenderTypes;
    last_used?: {
        at: string;
    }[];
}
export interface Envelope {
    id?: string;
    template_id: string;
    status?: string;
    user_id: string;
    envelope_document_id: string;
    created_at?: Date;
    updated_at?: Date;
    canceled_at?: Date;
    recipients?: Recipient[];
    document?: IEnvelopeDocument;
    component?: EnvelopeComponent;
    histories?: IEnvelopeHistory[];
}
export declare enum TemplateSenderTypes {
    CREATOR = "creator",
    ORGANIZATION_MEMBER = "organization_member",
    ORGANIZATION_MEMBER_AS_CREATOR = "organization_member_as_creator",
    EVERYONE = "everyone",
    EVERYONE_AS_CREATOR = "everyone_as_creator"
}
export declare enum TemplatePermissions {
    TEMPLATE_CREATOR_CREATE_PUBLIC = "template:creator:create:public",
    TEMPLATE_CREATOR_CREATE_ORG = "template:creator:create:org",
    TEMPLATE_CREATOR_CREATE_PERSONAL = "template:creator:create:personal",
    TEMPLATE_CREATOR_DELETE = "template:creator:delete",
    TEMPLATE_CREATOR_VISIBILITY = "template:creator:visibility",
    TEMPLATE_MEMBER_READ = "template:member:read",
    TEMPLATE_MEMBER_WRITE = "template:member:write",
    TEMPLATE_MEMBER_DELETE = "template:member:delete",
    TEMPLATE_MEMBER_VISIBILITY = "template:member:visibility"
}
export declare enum TemplateActions {
    CREATE_PERSONAL = "create_personal",
    CREATE_ORG = "create_org",
    CREATE_PUBLIC = "create_public",
    READ = "read",
    WRITE = "write",
    DELETE = "delete",
    CHANGE_VISIBILITY_PERSONAL = "change_visibility_personal",
    CHANGE_VISIBILITY_ORG = "change_visibility_org",
    CHANGE_VISIBILITY_PUBLIC = "change_visibility_public"
}
export interface IRole {
    id?: string;
    template_id: string;
    name: string;
    full_name?: string;
    old_name?: string;
    email?: string;
    type: string;
    sequence: number;
    fields?: IField[];
    message?: string;
    rgba?: string;
    delegator: boolean;
}
export interface IPage {
    template_id: string;
    document_id: string;
    document?: ITemplateDocument;
    sequence: number;
    page_number: number;
    thumbnail_url?: string;
    thumbnail_safe?: any;
    fields?: IField[];
}
export interface IField {
    label: string;
    name: string;
    role_name: string;
    template_id: string;
    type: string;
    required: boolean;
    setting: Object;
    page_sequence: number;
    validator?: string;
}
export interface ITemplateDocument {
    url: string;
    name: string;
    page_numbers: number;
    id?: string;
    updated_at?: Date;
    created_at?: Date;
    template_id: string;
    thumbnail_url: string;
    thumbnail_safe?: any;
    mime: string;
}
export interface IEnvelopeDocument {
    id?: string;
    url: string;
    name: string;
    created_at?: Date;
    updated_at?: Date;
    page_numbers: number;
    mime: string;
}
export interface IEnvelopeHistory {
    id?: string;
    envelope_id?: string;
    role_name?: string;
    event: string;
    event_detail?: string;
    created_at: Date;
}
export interface IActivity {
    date: string;
    log: string;
    icon: string;
}
export interface Recipient {
    role_name: string;
    envelope_id: string;
    status: string;
    email: string;
    full_name: string;
    sequence: number;
    type: string;
    user_id: string;
    created_at: Date;
    updated_at: Date;
    token: string;
    message: string;
    signatureUrl?: any;
    signatures: IEnvelopeSignature[];
    rgba?: string;
}
export interface IEnvelopeSignature {
    envelope_id: string;
    signature_id: string;
    role_name: string;
    signed_at?: Date;
    ip_address?: string;
    hash?: string;
}
export interface EnvelopeComponent {
    progress?: number;
    status_color?: string;
    selected_format_time?: string;
    format_time?: string;
    selected?: boolean;
    envelope__list__class?: string;
}
export interface IEnvelopeSearchParams {
    envelope_status?: string[];
    recipient_status?: string[];
    envelope_name?: string;
    recipient_name?: string;
    recipient_email?: string;
    updated_at?: ITimePeriod;
    canceled_at?: ITimePeriod;
    created_at?: ITimePeriod;
    text_field_value?: string;
    is_owner?: boolean;
    is_recipient?: boolean;
    sort_by?: SortOptions;
    ascending?: boolean;
    row?: number;
    page?: number;
    template_id?: string;
    recipient_claimed?: boolean;
}
export interface ITimePeriod {
    start_time: string;
    end_time: string;
}
export declare enum SortOptions {
    created_at = "created_at",
    updated_at = "updated_at",
    envelope_name = "envelope_name",
    canceled_at = "canceled_at",
    envelope_status = "envelope_status"
}
export interface ITemplateSearchParams {
    name?: string;
    sender?: string;
    description?: string;
    profile_id?: string;
    organization_id?: string;
    updated_at?: ITimePeriod;
    created_at?: ITimePeriod;
    last_used_at?: ITimePeriod;
    is_personal?: boolean;
    is_public?: boolean;
    tags?: string[];
    document_name?: string;
    sort_by?: TemplateSortOptions;
    ascending?: boolean;
    row?: number;
    page?: number;
}
export declare enum TemplateSortOptions {
    CREATED_AT = "created_at",
    UPDATED_AT = "updated_at",
    NAME = "name",
    LAST_USED_AT = "last_used_at",
    COUNTER = "counter",
    STAR_COUNTER = "star_counter"
}
