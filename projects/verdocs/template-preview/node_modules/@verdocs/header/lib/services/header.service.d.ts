import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { ReplaySubject, Subject, BehaviorSubject, Observable } from 'rxjs';
import { ProfileCollection } from '@verdocs/profiles';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { connectionConfig } from '../header.module';
import { TemplatesGuardService } from './templates.guard';
import { ITemplate, Envelope, IEnvelopeSearchParams, ITemplateSearchParams, IEnvelopeDocument } from '../models/verdocs.model';
export declare class VerdocsHeaderService {
    private injector;
    private http;
    private router;
    private snackbar;
    private dialog;
    private templateGuard;
    private vTokenStateService;
    private vTokenObjectService;
    private platform;
    tokenConfig: connectionConfig;
    titleSubject: ReplaySubject<string>;
    csvBlobSubject: ReplaySubject<Blob>;
    templates: Subject<ITemplate[]>;
    saveStatusSubject: ReplaySubject<string>;
    templateDetailToggleSubject: Subject<boolean>;
    profileLoadingSubject: ReplaySubject<boolean>;
    templateSubject: Subject<ITemplate>;
    template: ITemplate;
    allEnvelopes: BehaviorSubject<Envelope[]>;
    sideNavStateSubject: ReplaySubject<boolean>;
    initiateBuilderAutofocus: ReplaySubject<boolean>;
    createToggleSubscription: Subject<boolean>;
    rAccount_url: string;
    rSecure_url: string;
    rForm_url: string;
    private envUrl;
    private _toggleSidenavSource;
    private _title;
    private _selected;
    private _pdfUrl;
    private _env;
    private _envDoc;
    private builderSideNavState;
    private userFullname;
    private userInitial;
    private userEmail;
    private userPhone;
    private userData;
    private profileData;
    private isAtOrigin;
    private currentOrigin;
    private currentOrganizationId;
    sidenavOpened: boolean;
    toggleSidenav$: Observable<boolean>;
    selectStatus$: Observable<boolean>;
    env$: Observable<Envelope>;
    titleValue$: Observable<string>;
    pdfUrl$: Observable<string>;
    envDoc$: Observable<IEnvelopeDocument>;
    userDataSubject: ReplaySubject<any>;
    userProfileSubject: ReplaySubject<any>;
    currentProfileSubject: ReplaySubject<any>;
    personalAccountSubject: ReplaySubject<any>;
    profilesSubject: ReplaySubject<any>;
    constructor(injector: Injector, http: HttpClient, router: Router, snackbar: MatSnackBar, dialog: MatDialog, templateGuard: TemplatesGuardService, vTokenStateService: VerdocsStateService, vTokenObjectService: VerdocsTokenObjectService, platform: any);
    getAtOrigin(originType: any): boolean;
    toggleSidenav(bool: any): void;
    updateToggleStatus(bool: any): void;
    updateTitle(string: any): void;
    updateSelectStatus(bool: any): void;
    updatePdfUrl(string: any): void;
    updateEnv(string: any): void;
    updateEnvDoc(IEnvelopeDocument: any): void;
    initNotificationService(): void;
    updateEnvelopes(envelopes: any): void;
    toggleCreate(): void;
    searchEnvelopes(searchParams: IEnvelopeSearchParams): Observable<import("@angular/common/http").HttpEvent<unknown>>;
    searchTemplates(searchParams: ITemplateSearchParams): Observable<import("@angular/common/http").HttpEvent<unknown>>;
    downloadTemplateDocument(template: ITemplate): void;
    getTemplateDocument(templateId: any, templateDocument: any): Promise<Blob>;
    updateTemplates(templates: any): void;
    toggleBuilderSideNav(): void;
    canUserEdit(template: ITemplate): boolean;
    updateTemplate(templateId: string, body: any): Promise<ITemplate>;
    openTemplate(template: ITemplate): void;
    openTemplates(searchKeyword?: string): void;
    getTemplateOwnerInfo(id: string): Promise<{
        profile_id: string;
        email: string;
        name: string;
    }>;
    canUserPreview(template: ITemplate): any;
    starTemplate(id: any): Observable<any>;
    unstarTemplate(id: any): Observable<any>;
    updateTokens(sendMessage?: boolean): Promise<unknown>;
    getAccountData(): void;
    getProfiles(): Promise<{
        name: string;
        initial: any;
        email: string;
        phone: string;
    }>;
    getProfileCollection(profiles: any): ProfileCollection;
    switchProfile(profile_id: any): Promise<any>;
    resendEmailVerification(): void;
    getNameValidity(name: any): Promise<ArrayBuffer>;
    createOrganization(body: any): Promise<ArrayBuffer>;
    private getOptions;
    getRoleColor(name: any, index?: any): string;
    getRGB(rgba: any): string;
    rgbToHex(rgb: number): string;
    getRGBA(index: any): "rgba(255, 193, 7, 0.4)" | "rgba(134, 134, 134, 0.3)" | "rgba(156, 39, 176, .4)" | "rgba(33, 150, 243, .4)" | "rgba(220, 231, 117, 0.3)" | "rgba(121, 134, 203, 0.3)" | "rgba(77, 182, 172, 0.3)" | "rgba(255, 202, 165, 0.3)" | "rgba(2, 247, 190, 0.3)" | "rgba(255, 138, 101, 0.3)" | "rgba(82, 255, 79, 0.3)" | "rgba(229, 115, 155, 0.3)";
    nameToRGBA(str: any): string;
}
