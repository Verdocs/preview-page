import { OnInit, OnDestroy, Injector, AfterContentChecked } from '@angular/core';
import { Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { NotificationService, Notification } from '@verdocs/notifications';
import { ProfileCollection, OrganizationDialogService, Override as ProfileOverride } from '@verdocs/profiles';
import { VerdocsStateService, VerdocsAuthGuardService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { connectionConfig } from '../header.module';
import { VerdocsHeaderService } from '../services/header.service';
export declare class HeaderToolsComponent implements OnInit, AfterContentChecked, OnDestroy {
    private verdocsStateService;
    private verdocsObjectService;
    private verdocsAuthGuardService;
    private organizationDialogService;
    private notificationsService;
    private verdocsHeaderService;
    private snackbar;
    private injector;
    private router;
    private platform;
    tokenConfig: connectionConfig;
    apps: any[];
    emailVerified: boolean;
    notifications: Notification[];
    profiles: ProfileCollection;
    newProfile: any;
    organization_id: string;
    myAccountUrl: string;
    rSecureUrl: string;
    rFormUrl: string;
    termsUrl: string;
    privacyUrl: string;
    loginUrl: string;
    signupUrl: string;
    organizationImgSrc: string;
    profileLoading: boolean;
    hasProfile: boolean;
    origin: 'rForm' | 'rSecure' | 'rAccount' | null;
    isAtOriginalOrigin: boolean;
    verdocs_logo_url: string;
    profileOverride: ProfileOverride;
    sidenav: boolean;
    type: string;
    mode: string;
    private notificationsSubscription;
    private profileLoadingSubscription;
    constructor(verdocsStateService: VerdocsStateService, verdocsObjectService: VerdocsTokenObjectService, verdocsAuthGuardService: VerdocsAuthGuardService, organizationDialogService: OrganizationDialogService, notificationsService: NotificationService, verdocsHeaderService: VerdocsHeaderService, snackbar: MatSnackBar, injector: Injector, router: Router, platform: any);
    ngOnInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    private checkEmailVerification;
    readonly admin_url: string;
    removeNotification(notification: Notification): void;
    signOut(): void;
    signIn(): void;
    signUp(): void;
    switch(profile_id: string): void;
    switchAndGoToAdmin(): void;
    updateTokenStatus(sendMessage?: boolean): void;
    resendEmailVerification(): void;
    checkNameValidity(name: string): Promise<void>;
    createOrganization(organizationGroup: any): void;
    switchProfile(): void;
    checkAccess(clientName: any): boolean;
    jumpTo(clientName: any): void;
    private hasAccessToAdmin;
    createSnackbar(message: string, buttonTitle?: string): void;
    lunchElevio(): void;
    lunchIntercom(): void;
}
