/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer, isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpResponse, HttpRequest, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog } from '@angular/material/dialog';
import { ReplaySubject, Subject, BehaviorSubject, EMPTY } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { findIndex, filter } from 'lodash';
import { saveAs } from 'file-saver';
import { ProfileModel, ProfileCollection } from '@verdocs/profiles';
import { VerdocsStateService, VerdocsTokenObjectService } from '@verdocs/tokens';
import { connectionConfigToken } from '../header.module';
import { TemplatesGuardService } from './templates.guard';
import { TemplateActions } from '../models/verdocs.model';
import { FourOhOneDialog } from '../error-dialogs/four-oh-one.dialog';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/snack-bar";
import * as i4 from "@angular/material/dialog";
import * as i5 from "./templates.guard";
import * as i6 from "@verdocs/tokens";
var VerdocsHeaderService = /** @class */ (function () {
    function VerdocsHeaderService(injector, http, router, snackbar, dialog, templateGuard, vTokenStateService, vTokenObjectService, platform) {
        this.injector = injector;
        this.http = http;
        this.router = router;
        this.snackbar = snackbar;
        this.dialog = dialog;
        this.templateGuard = templateGuard;
        this.vTokenStateService = vTokenStateService;
        this.vTokenObjectService = vTokenObjectService;
        this.platform = platform;
        this.titleSubject = new ReplaySubject();
        this.csvBlobSubject = new ReplaySubject();
        this.templates = new Subject();
        this.saveStatusSubject = new ReplaySubject();
        this.templateDetailToggleSubject = new Subject();
        this.profileLoadingSubject = new ReplaySubject();
        this.templateSubject = new Subject();
        this.allEnvelopes = new BehaviorSubject([]);
        this.sideNavStateSubject = new ReplaySubject();
        this.initiateBuilderAutofocus = new ReplaySubject();
        this.createToggleSubscription = new Subject();
        this._toggleSidenavSource = new BehaviorSubject(false);
        this._title = new BehaviorSubject('');
        this._selected = new BehaviorSubject(false);
        this._pdfUrl = new BehaviorSubject('');
        this._env = new BehaviorSubject({
            id: '',
            template_id: '',
            status: '',
            user_id: '',
            envelope_document_id: ''
        });
        this._envDoc = new BehaviorSubject({
            id: '',
            url: '',
            name: '',
            page_numbers: 0,
            mime: '',
        });
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.isAtOrigin = false;
        this.currentOrganizationId = null;
        this.sidenavOpened = false;
        this.toggleSidenav$ = this._toggleSidenavSource.asObservable();
        this.selectStatus$ = this._selected.asObservable();
        this.env$ = this._env.asObservable();
        this.titleValue$ = this._title.asObservable();
        this.pdfUrl$ = this._pdfUrl.asObservable();
        this.envDoc$ = this._envDoc.asObservable();
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(connectionConfigToken);
        this.envUrl = this.tokenConfig.rForm_backend_url + '/envelopes';
        this.rForm_url = this.tokenConfig.rForm_frontend_url;
        this.rAccount_url = this.tokenConfig.rAccount_frontend_url;
        this.rSecure_url = this.tokenConfig.rSecure_frontend_url;
    }
    /**
     * @param {?} originType
     * @return {?}
     */
    VerdocsHeaderService.prototype.getAtOrigin = /**
     * @param {?} originType
     * @return {?}
     */
    function (originType) {
        this.isAtOrigin = originType && this.tokenConfig.origin && originType === this.tokenConfig.origin;
        return this.isAtOrigin;
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    VerdocsHeaderService.prototype.toggleSidenav = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        this.updateToggleStatus(bool);
        this._toggleSidenavSource.next(this.sidenavOpened);
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateToggleStatus = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        this.sidenavOpened = bool;
    };
    /**
     * @param {?} string
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateTitle = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        this._title.next(string);
    };
    /**
     * @param {?} bool
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateSelectStatus = /**
     * @param {?} bool
     * @return {?}
     */
    function (bool) {
        this._selected.next(bool);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    VerdocsHeaderService.prototype.updatePdfUrl = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        this._pdfUrl.next(string);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateEnv = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        this._env.next(string);
    };
    /**
     * @param {?} IEnvelopeDocument
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateEnvDoc = /**
     * @param {?} IEnvelopeDocument
     * @return {?}
     */
    function (IEnvelopeDocument) {
        this._envDoc.next(IEnvelopeDocument);
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.initNotificationService = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} envelopes
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateEnvelopes = /**
     * @param {?} envelopes
     * @return {?}
     */
    function (envelopes) {
        this.allEnvelopes.next(envelopes);
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.toggleCreate = /**
     * @return {?}
     */
    function () {
        this.createToggleSubscription.next(true);
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    VerdocsHeaderService.prototype.searchEnvelopes = /**
     * @param {?} searchParams
     * @return {?}
     */
    function (searchParams) {
        var _this = this;
        for (var key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.envUrl + '/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse) {
                _this.updateEnvelopes(event.body);
            }
            return event;
        })));
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    VerdocsHeaderService.prototype.searchTemplates = /**
     * @param {?} searchParams
     * @return {?}
     */
    function (searchParams) {
        for (var key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.tokenConfig.rForm_backend_url + '/templates/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event;
        })));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    VerdocsHeaderService.prototype.downloadTemplateDocument = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var _this = this;
        this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
         * @param {?} template_file
         * @return {?}
         */
        function (template_file) {
            if (isPlatformBrowser(_this.platform)) {
                if (window && window.URL) {
                    /** @type {?} */
                    var fileUrl = URL.createObjectURL(template_file);
                    saveAs(fileUrl, template.template_documents[0].name + '.pdf');
                }
            }
        }));
    };
    /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    VerdocsHeaderService.prototype.getTemplateDocument = /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    function (templateId, templateDocument) {
        return this.http.get(this.tokenConfig.rForm_backend_url + '/templates/' + templateId + '/documents/' +
            templateDocument.id + '?file=true', { responseType: 'blob' }).toPromise();
    };
    /**
     * @param {?} templates
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateTemplates = /**
     * @param {?} templates
     * @return {?}
     */
    function (templates) {
        this.templates.next(templates);
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.toggleBuilderSideNav = /**
     * @return {?}
     */
    function () {
        this.builderSideNavState = !this.builderSideNavState;
        this.sideNavStateSubject.next(this.builderSideNavState);
        if (this.builderSideNavState === false) {
            this.initiateBuilderAutofocus.next(false);
        }
    };
    /**
     * @param {?} template
     * @return {?}
     */
    VerdocsHeaderService.prototype.canUserEdit = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        /** @type {?} */
        var response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    };
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateTemplate = /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    function (templateId, body) {
        return this.http
            .put(this.tokenConfig.rForm_backend_url + '/templates/' + templateId, body)
            .toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        function (template) { return template; }));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    VerdocsHeaderService.prototype.openTemplate = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        if (this.canUserPreview(template)) {
            location.href = this.tokenConfig.rForm_frontend_url + "/document/" + template.id;
        }
        else if (this.canUserEdit(template)) {
            location.href = this.tokenConfig.rForm_frontend_url + "/builder/" + template.id + "/fields";
        }
        else {
            this.snackbar.open("Template is in build mode, and not ready for use.  Please check back soon.");
        }
    };
    /**
     * @param {?=} searchKeyword
     * @return {?}
     */
    VerdocsHeaderService.prototype.openTemplates = /**
     * @param {?=} searchKeyword
     * @return {?}
     */
    function (searchKeyword) {
        if (this.tokenConfig.origin === 'rForm') {
            if (searchKeyword.trim() !== '') {
                this.router.navigate(['documents'], { queryParams: { name: searchKeyword } });
            }
            else {
                this.router.navigate(['documents']);
            }
        }
        else {
            if (searchKeyword.trim() !== '') {
                location.href = this.tokenConfig.rForm_frontend_url + "/documents?name=" + searchKeyword;
            }
            else {
                location.href = this.tokenConfig.rForm_frontend_url + "/documents";
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    VerdocsHeaderService.prototype.getTemplateOwnerInfo = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.tokenConfig.rForm_backend_url + "/templates/" + id + "?owner_info=true")
            .toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        }));
    };
    /**
     * @param {?} template
     * @return {?}
     */
    VerdocsHeaderService.prototype.canUserPreview = /**
     * @param {?} template
     * @return {?}
     */
    function (template) {
        var e_1, _a;
        /** @type {?} */
        var hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        var canPreview;
        /** @type {?} */
        var roles = template.roles;
        /** @type {?} */
        var signers = filter(roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        try {
            for (var signers_1 = tslib_1.__values(signers), signers_1_1 = signers_1.next(); !signers_1_1.done; signers_1_1 = signers_1.next()) {
                var signer = signers_1_1.value;
                canPreview = signer['fields'] && signer['fields'].length > 0;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (signers_1_1 && !signers_1_1.done && (_a = signers_1.return)) _a.call(signers_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return hasPermission && canPreview;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    VerdocsHeaderService.prototype.starTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.post(this.tokenConfig.rForm_backend_url + ("/templates/" + id + "/stars"), {}).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err && err.status === 401) {
                /** @type {?} */
                var errorDialog = _this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    VerdocsHeaderService.prototype.unstarTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.delete(this.tokenConfig.rForm_backend_url + ("/templates/" + id + "/stars")).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err && err.status === 401) {
                /** @type {?} */
                var errorDialog = _this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })));
    };
    //Account Services
    //Account Services
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    VerdocsHeaderService.prototype.updateTokens = 
    //Account Services
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    function (sendMessage) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        _this.vTokenStateService.updateTokens(_this.tokenConfig.rSecure_backend_url).subscribe((/**
                         * @param {?} tokens
                         * @return {?}
                         */
                        function (tokens) {
                            if (tokens && tokens.length > 0) {
                                if (sendMessage) {
                                    _this.snackbar.dismiss();
                                    _this.snackbar.open('Status updated');
                                }
                            }
                            _this.getAccountData();
                            return resolve();
                        }));
                    }))];
            });
        });
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.getAccountData = /**
     * @return {?}
     */
    function () {
        // might need if header needs to show condition
        /** @type {?} */
        var profile = this.vTokenObjectService.getProfile();
        if (profile) {
            this.getProfiles();
        }
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.getProfiles = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return p.organization.name === 'realster'; })), 1);
            _this.personalAccountSubject.next(personal[0]);
            _this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            _this.profileData.unshift(personal[0]);
            /** @type {?} */
            var currentIndex = findIndex(_this.profileData, { current: true });
            if (_this.profileData[currentIndex]['first_name']) {
                _this.userFullname = _this.profileData[currentIndex]['first_name'] + ' ' + _this.profileData[currentIndex]['last_name'];
                _this.userInitial = _this.profileData[currentIndex]['first_name'].charAt(0) +
                    _this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                _this.userFullname = '';
            }
            if (_this.profileData[currentIndex]['phone']) {
                _this.userPhone = _this.profileData[currentIndex]['phone'];
            }
            else {
                _this.userPhone = '';
            }
            if (_this.profileData[currentIndex]['email']) {
                _this.userEmail = _this.profileData[currentIndex]['email'];
            }
            _this.userData = {
                name: _this.userFullname,
                initial: _this.userInitial,
                email: _this.userEmail,
                phone: _this.userPhone
            };
            _this.userProfileSubject.next(_this.profileData);
            /** @type {?} */
            var currentProfile = _this.profileData[currentIndex];
            _this.currentProfileSubject.next(currentProfile);
            _this.currentOrganizationId = currentProfile.organization_id;
            _this.userDataSubject.next(_this.userData);
            return _this.userData;
        }));
    };
    /**
     * @param {?} profiles
     * @return {?}
     */
    VerdocsHeaderService.prototype.getProfileCollection = /**
     * @param {?} profiles
     * @return {?}
     */
    function (profiles) {
        /** @type {?} */
        var profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        function (profile) {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        var profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    };
    /**
     * @param {?} profile_id
     * @return {?}
     */
    VerdocsHeaderService.prototype.switchProfile = /**
     * @param {?} profile_id
     * @return {?}
     */
    function (profile_id) {
        var _this = this;
        this.profileLoadingSubject.next(true);
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.vTokenStateService.setTokens(res.tokens);
                this.profileLoadingSubject.next(false);
                return [2 /*return*/, Promise.resolve(res)];
            });
        }); }));
    };
    /**
     * @return {?}
     */
    VerdocsHeaderService.prototype.resendEmailVerification = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.http.post(this.tokenConfig.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        function () {
            _this.snackbar.open('Verification email sent');
        }));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    VerdocsHeaderService.prototype.getNameValidity = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return Promise.resolve(res);
        }));
    };
    /**
     * @param {?} body
     * @return {?}
     */
    VerdocsHeaderService.prototype.createOrganization = /**
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return Promise.resolve(res);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsHeaderService.prototype.getOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (isPlatformServer(this.platform)) {
            return;
        }
        /** @type {?} */
        var vTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        var authValue = 'Bearer ' + vTokenCookie['accessToken'];
        /** @type {?} */
        var headers = new HttpHeaders({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { headers: headers };
    };
    // End of Account Services
    // End of Account Services
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    VerdocsHeaderService.prototype.getRoleColor = 
    // End of Account Services
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    function (name, index) {
        if (index) {
            return this.getRGBA(index);
        }
        else if (this.template && this.template.roles && this.template.roles.length > 0) {
            index = findIndex(this.template.roles, { name: name });
            if (index >= 0) {
                return this.template.roles[index].rgba ? this.template.roles[index].rgba : this.getRGBA(index);
            }
            else {
                return this.nameToRGBA(name);
            }
        }
        else {
            return this.nameToRGBA(name);
        }
    };
    /**
     * @param {?} rgba
     * @return {?}
     */
    VerdocsHeaderService.prototype.getRGB = /**
     * @param {?} rgba
     * @return {?}
     */
    function (rgba) {
        /** @type {?} */
        var rgbNumbers = rgba.replace('rgba(', '').replace(')', '').split(',');
        /** @type {?} */
        var rgbObject = {
            red: rgbNumbers[0],
            green: rgbNumbers[1],
            blue: rgbNumbers[2],
            alpha: rgbNumbers[3]
        };
        /** @type {?} */
        var alpha = 1 - rgbObject.alpha;
        /** @type {?} */
        var red = Math.round((rgbObject.alpha * (rgbObject.red / 255) + alpha) * 255);
        /** @type {?} */
        var green = Math.round((rgbObject.alpha * (rgbObject.green / 255) + alpha) * 255);
        /** @type {?} */
        var blue = Math.round((rgbObject.alpha * (rgbObject.blue / 255) + alpha) * 255);
        return ('#' + this.rgbToHex(red) + this.rgbToHex(green) + this.rgbToHex(blue));
    };
    /**
     * @param {?} rgb
     * @return {?}
     */
    VerdocsHeaderService.prototype.rgbToHex = /**
     * @param {?} rgb
     * @return {?}
     */
    function (rgb) {
        /** @type {?} */
        var hex = rgb.toString(16);
        if (hex.length < 2) {
            return '0' + hex;
        }
        return hex;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    VerdocsHeaderService.prototype.getRGBA = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        switch (index % 10) {
            case 0:
                return index === 0 ? 'rgba(255, 193, 7, 0.4)' : 'rgba(134, 134, 134, 0.3)'; //#FFE69C
            case 1:
                return 'rgba(156, 39, 176, .4)'; //'#E3C3E9'
            case 2:
                return 'rgba(33, 150, 243, .4)'; //'#C1E1FB'
            case 3:
                return 'rgba(220, 231, 117, 0.3)';
            case 4:
                return 'rgba(121, 134, 203, 0.3)';
            case 5:
                return 'rgba(77, 182, 172, 0.3)';
            case 6:
                return 'rgba(255, 202, 165, 0.3)';
            case 7:
                return 'rgba(2, 247, 190, 0.3)';
            case 8:
                return 'rgba(255, 138, 101, 0.3)';
            case 9:
                return 'rgba(82, 255, 79, 0.3)';
            default:
                return 'rgba(229, 115, 155, 0.3)';
        }
    };
    /**
     * @param {?} str
     * @return {?}
     */
    VerdocsHeaderService.prototype.nameToRGBA = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (!!str) {
            /** @type {?} */
            var validNum = parseInt(str.slice(-1), 10);
            if (!isNaN(validNum)) {
                str += (validNum * 99).toString();
            }
            /** @type {?} */
            var hash = 0;
            for (var i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            hash = Math.round(hash / 1.3);
            /** @type {?} */
            var c = (hash & 0x00FFFF08)
                .toString(16)
                .toUpperCase();
            /** @type {?} */
            var hex = '#' + '00000'.substring(0, 6 - c.length) + c;
            /** @type {?} */
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            /** @type {?} */
            var color = {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            };
            return "rgba(" + color.r + ", " + color.g + ", " + color.b + ", 0.2)";
        }
    };
    VerdocsHeaderService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    VerdocsHeaderService.ctorParameters = function () { return [
        { type: Injector },
        { type: HttpClient },
        { type: Router },
        { type: MatSnackBar },
        { type: MatDialog },
        { type: TemplatesGuardService },
        { type: VerdocsStateService },
        { type: VerdocsTokenObjectService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ VerdocsHeaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VerdocsHeaderService_Factory() { return new VerdocsHeaderService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar), i0.ɵɵinject(i4.MatDialog), i0.ɵɵinject(i5.TemplatesGuardService), i0.ɵɵinject(i6.VerdocsStateService), i0.ɵɵinject(i6.VerdocsTokenObjectService), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: VerdocsHeaderService, providedIn: "root" });
    return VerdocsHeaderService;
}());
export { VerdocsHeaderService };
if (false) {
    /** @type {?} */
    VerdocsHeaderService.prototype.tokenConfig;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.csvBlobSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templates;
    /** @type {?} */
    VerdocsHeaderService.prototype.saveStatusSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateDetailToggleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profileLoadingSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.template;
    /** @type {?} */
    VerdocsHeaderService.prototype.allEnvelopes;
    /** @type {?} */
    VerdocsHeaderService.prototype.sideNavStateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.initiateBuilderAutofocus;
    /** @type {?} */
    VerdocsHeaderService.prototype.createToggleSubscription;
    /** @type {?} */
    VerdocsHeaderService.prototype.rAccount_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rSecure_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rForm_url;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._toggleSidenavSource;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._title;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._pdfUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._env;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._envDoc;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.builderSideNavState;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.isAtOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrganizationId;
    /** @type {?} */
    VerdocsHeaderService.prototype.sidenavOpened;
    /** @type {?} */
    VerdocsHeaderService.prototype.toggleSidenav$;
    /** @type {?} */
    VerdocsHeaderService.prototype.selectStatus$;
    /** @type {?} */
    VerdocsHeaderService.prototype.env$;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleValue$;
    /** @type {?} */
    VerdocsHeaderService.prototype.pdfUrl$;
    /** @type {?} */
    VerdocsHeaderService.prototype.envDoc$;
    /** @type {?} */
    VerdocsHeaderService.prototype.userDataSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.userProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.currentProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.personalAccountSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,