import { Injectable, Component, Injector, Inject, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Input, ChangeDetectorRef, Compiler, ViewChild, InjectionToken, NgModule } from '@angular/core';
import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';
import { HttpRequest, HttpResponse, HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Router, NavigationEnd, NavigationStart, RouterModule } from '@angular/router';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatButtonModule } from '@angular/material/button';
import { MatChipsModule } from '@angular/material/chips';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { MatRadioModule } from '@angular/material/radio';
import { MatSelectModule } from '@angular/material/select';
import { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatTooltipModule } from '@angular/material/tooltip';
import { NotificationService, NotificationsModule } from '@verdocs/notifications';
import { VerdocsTokenObjectService, VerdocsStateService, VerdocsAuthService, VerdocsAuthGuardService, TokensModule } from '@verdocs/tokens';
import { ProfileModel, ProfileCollection, OrganizationDialogService, ProfilesModule } from '@verdocs/profiles';
import { __awaiter } from 'tslib';
import { ReplaySubject, Subject, BehaviorSubject, EMPTY, Subscription, fromEvent } from 'rxjs';
import { map, catchError, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { intersection, filter, findIndex, includes } from 'lodash';
import { saveAs } from 'file-saver';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Notification() { }
if (false) {
    /** @type {?|undefined} */
    Notification.prototype.id;
    /** @type {?} */
    Notification.prototype.profile_id;
    /** @type {?} */
    Notification.prototype.data;
    /** @type {?} */
    Notification.prototype.read;
    /** @type {?} */
    Notification.prototype.deleted;
    /** @type {?} */
    Notification.prototype.client_id;
    /** @type {?} */
    Notification.prototype.message;
    /** @type {?} */
    Notification.prototype.time;
    /** @type {?} */
    Notification.prototype.event_id;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ITemplate() { }
if (false) {
    /** @type {?|undefined} */
    ITemplate.prototype.template_documents;
    /** @type {?|undefined} */
    ITemplate.prototype.pages;
    /** @type {?|undefined} */
    ITemplate.prototype.roles;
    /** @type {?|undefined} */
    ITemplate.prototype.counter;
    /** @type {?} */
    ITemplate.prototype.name;
    /** @type {?|undefined} */
    ITemplate.prototype.id;
    /** @type {?|undefined} */
    ITemplate.prototype.profile_id;
    /** @type {?|undefined} */
    ITemplate.prototype.created_at;
    /** @type {?|undefined} */
    ITemplate.prototype.updated_at;
    /** @type {?|undefined} */
    ITemplate.prototype.token;
    /** @type {?|undefined} */
    ITemplate.prototype.tags;
    /** @type {?|undefined} */
    ITemplate.prototype.description;
    /** @type {?|undefined} */
    ITemplate.prototype.reminder_id;
    /** @type {?|undefined} */
    ITemplate.prototype.reminder;
    /** @type {?|undefined} */
    ITemplate.prototype.template_stars;
    /** @type {?|undefined} */
    ITemplate.prototype.organization_id;
    /** @type {?|undefined} */
    ITemplate.prototype.is_personal;
    /** @type {?|undefined} */
    ITemplate.prototype.is_public;
    /** @type {?|undefined} */
    ITemplate.prototype.sender;
    /** @type {?|undefined} */
    ITemplate.prototype.last_used;
}
/**
 * @record
 */
function Envelope() { }
if (false) {
    /** @type {?|undefined} */
    Envelope.prototype.id;
    /** @type {?} */
    Envelope.prototype.template_id;
    /** @type {?|undefined} */
    Envelope.prototype.status;
    /** @type {?} */
    Envelope.prototype.user_id;
    /** @type {?} */
    Envelope.prototype.envelope_document_id;
    /** @type {?|undefined} */
    Envelope.prototype.created_at;
    /** @type {?|undefined} */
    Envelope.prototype.updated_at;
    /** @type {?|undefined} */
    Envelope.prototype.canceled_at;
    /** @type {?|undefined} */
    Envelope.prototype.recipients;
    /** @type {?|undefined} */
    Envelope.prototype.document;
    /** @type {?|undefined} */
    Envelope.prototype.component;
    /** @type {?|undefined} */
    Envelope.prototype.histories;
}
/** @enum {string} */
const TemplateSenderTypes = {
    CREATOR: 'creator',
    ORGANIZATION_MEMBER: 'organization_member',
    ORGANIZATION_MEMBER_AS_CREATOR: 'organization_member_as_creator',
    EVERYONE: 'everyone',
    EVERYONE_AS_CREATOR: 'everyone_as_creator' // Creator would be sender of envelope no matter who creates the envelope
    ,
};
/** @enum {string} */
const TemplatePermissions = {
    TEMPLATE_CREATOR_CREATE_PUBLIC: 'template:creator:create:public',
    TEMPLATE_CREATOR_CREATE_ORG: 'template:creator:create:org',
    TEMPLATE_CREATOR_CREATE_PERSONAL: 'template:creator:create:personal',
    TEMPLATE_CREATOR_DELETE: 'template:creator:delete',
    TEMPLATE_CREATOR_VISIBILITY: 'template:creator:visibility',
    TEMPLATE_MEMBER_READ: 'template:member:read',
    TEMPLATE_MEMBER_WRITE: 'template:member:write',
    TEMPLATE_MEMBER_DELETE: 'template:member:delete',
    TEMPLATE_MEMBER_VISIBILITY: 'template:member:visibility',
};
;
/** @enum {string} */
const TemplateActions = {
    CREATE_PERSONAL: 'create_personal',
    CREATE_ORG: 'create_org',
    CREATE_PUBLIC: 'create_public',
    READ: 'read',
    WRITE: 'write',
    DELETE: 'delete',
    CHANGE_VISIBILITY_PERSONAL: 'change_visibility_personal',
    CHANGE_VISIBILITY_ORG: 'change_visibility_org',
    CHANGE_VISIBILITY_PUBLIC: 'change_visibility_public',
};
/**
 * @record
 */
function IRole() { }
if (false) {
    /** @type {?|undefined} */
    IRole.prototype.id;
    /** @type {?} */
    IRole.prototype.template_id;
    /** @type {?} */
    IRole.prototype.name;
    /** @type {?|undefined} */
    IRole.prototype.full_name;
    /** @type {?|undefined} */
    IRole.prototype.old_name;
    /** @type {?|undefined} */
    IRole.prototype.email;
    /** @type {?} */
    IRole.prototype.type;
    /** @type {?} */
    IRole.prototype.sequence;
    /** @type {?|undefined} */
    IRole.prototype.fields;
    /** @type {?|undefined} */
    IRole.prototype.message;
    /** @type {?|undefined} */
    IRole.prototype.rgba;
    /** @type {?} */
    IRole.prototype.delegator;
}
/**
 * @record
 */
function IPage() { }
if (false) {
    /** @type {?} */
    IPage.prototype.template_id;
    /** @type {?} */
    IPage.prototype.document_id;
    /** @type {?|undefined} */
    IPage.prototype.document;
    /** @type {?} */
    IPage.prototype.sequence;
    /** @type {?} */
    IPage.prototype.page_number;
    /** @type {?|undefined} */
    IPage.prototype.thumbnail_url;
    /** @type {?|undefined} */
    IPage.prototype.thumbnail_safe;
    /** @type {?|undefined} */
    IPage.prototype.fields;
}
/**
 * @record
 */
function IField() { }
if (false) {
    /** @type {?} */
    IField.prototype.label;
    /** @type {?} */
    IField.prototype.name;
    /** @type {?} */
    IField.prototype.role_name;
    /** @type {?} */
    IField.prototype.template_id;
    /** @type {?} */
    IField.prototype.type;
    /** @type {?} */
    IField.prototype.required;
    /** @type {?} */
    IField.prototype.setting;
    /** @type {?} */
    IField.prototype.page_sequence;
    /** @type {?|undefined} */
    IField.prototype.validator;
}
/**
 * @record
 */
function ITemplateDocument() { }
if (false) {
    /** @type {?} */
    ITemplateDocument.prototype.url;
    /** @type {?} */
    ITemplateDocument.prototype.name;
    /** @type {?} */
    ITemplateDocument.prototype.page_numbers;
    /** @type {?|undefined} */
    ITemplateDocument.prototype.id;
    /** @type {?|undefined} */
    ITemplateDocument.prototype.updated_at;
    /** @type {?|undefined} */
    ITemplateDocument.prototype.created_at;
    /** @type {?} */
    ITemplateDocument.prototype.template_id;
    /** @type {?} */
    ITemplateDocument.prototype.thumbnail_url;
    /** @type {?|undefined} */
    ITemplateDocument.prototype.thumbnail_safe;
    /** @type {?} */
    ITemplateDocument.prototype.mime;
}
/**
 * @record
 */
function IEnvelopeDocument() { }
if (false) {
    /** @type {?|undefined} */
    IEnvelopeDocument.prototype.id;
    /** @type {?} */
    IEnvelopeDocument.prototype.url;
    /** @type {?} */
    IEnvelopeDocument.prototype.name;
    /** @type {?|undefined} */
    IEnvelopeDocument.prototype.created_at;
    /** @type {?|undefined} */
    IEnvelopeDocument.prototype.updated_at;
    /** @type {?} */
    IEnvelopeDocument.prototype.page_numbers;
    /** @type {?} */
    IEnvelopeDocument.prototype.mime;
}
/**
 * @record
 */
function IEnvelopeHistory() { }
if (false) {
    /** @type {?|undefined} */
    IEnvelopeHistory.prototype.id;
    /** @type {?|undefined} */
    IEnvelopeHistory.prototype.envelope_id;
    /** @type {?|undefined} */
    IEnvelopeHistory.prototype.role_name;
    /** @type {?} */
    IEnvelopeHistory.prototype.event;
    /** @type {?|undefined} */
    IEnvelopeHistory.prototype.event_detail;
    /** @type {?} */
    IEnvelopeHistory.prototype.created_at;
}
/**
 * @record
 */
function IActivity() { }
if (false) {
    /** @type {?} */
    IActivity.prototype.date;
    /** @type {?} */
    IActivity.prototype.log;
    /** @type {?} */
    IActivity.prototype.icon;
}
/**
 * @record
 */
function Recipient() { }
if (false) {
    /** @type {?} */
    Recipient.prototype.role_name;
    /** @type {?} */
    Recipient.prototype.envelope_id;
    /** @type {?} */
    Recipient.prototype.status;
    /** @type {?} */
    Recipient.prototype.email;
    /** @type {?} */
    Recipient.prototype.full_name;
    /** @type {?} */
    Recipient.prototype.sequence;
    /** @type {?} */
    Recipient.prototype.type;
    /** @type {?} */
    Recipient.prototype.user_id;
    /** @type {?} */
    Recipient.prototype.created_at;
    /** @type {?} */
    Recipient.prototype.updated_at;
    /** @type {?} */
    Recipient.prototype.token;
    /** @type {?} */
    Recipient.prototype.message;
    /** @type {?|undefined} */
    Recipient.prototype.signatureUrl;
    /** @type {?} */
    Recipient.prototype.signatures;
    /** @type {?|undefined} */
    Recipient.prototype.rgba;
}
/**
 * @record
 */
function IEnvelopeSignature() { }
if (false) {
    /** @type {?} */
    IEnvelopeSignature.prototype.envelope_id;
    /** @type {?} */
    IEnvelopeSignature.prototype.signature_id;
    /** @type {?} */
    IEnvelopeSignature.prototype.role_name;
    /** @type {?|undefined} */
    IEnvelopeSignature.prototype.signed_at;
    /** @type {?|undefined} */
    IEnvelopeSignature.prototype.ip_address;
    /** @type {?|undefined} */
    IEnvelopeSignature.prototype.hash;
}
/**
 * @record
 */
function EnvelopeComponent() { }
if (false) {
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.progress;
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.status_color;
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.selected_format_time;
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.format_time;
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.selected;
    /** @type {?|undefined} */
    EnvelopeComponent.prototype.envelope__list__class;
}
/**
 * @record
 */
function IEnvelopeSearchParams() { }
if (false) {
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.envelope_status;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.recipient_status;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.envelope_name;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.recipient_name;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.recipient_email;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.updated_at;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.canceled_at;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.created_at;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.text_field_value;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.is_owner;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.is_recipient;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.sort_by;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.ascending;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.row;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.page;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.template_id;
    /** @type {?|undefined} */
    IEnvelopeSearchParams.prototype.recipient_claimed;
}
/**
 * @record
 */
function ITimePeriod() { }
if (false) {
    /** @type {?} */
    ITimePeriod.prototype.start_time;
    /** @type {?} */
    ITimePeriod.prototype.end_time;
}
/** @enum {string} */
const SortOptions = {
    created_at: 'created_at',
    updated_at: 'updated_at',
    envelope_name: 'envelope_name',
    canceled_at: 'canceled_at',
    envelope_status: 'envelope_status',
};
/**
 * @record
 */
function ITemplateSearchParams() { }
if (false) {
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.name;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.sender;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.description;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.profile_id;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.organization_id;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.updated_at;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.created_at;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.last_used_at;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.is_personal;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.is_public;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.tags;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.document_name;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.sort_by;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.ascending;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.row;
    /** @type {?|undefined} */
    ITemplateSearchParams.prototype.page;
}
/** @enum {string} */
const TemplateSortOptions = {
    CREATED_AT: 'created_at',
    UPDATED_AT: 'updated_at',
    NAME: 'name',
    LAST_USED_AT: 'last_used_at',
    COUNTER: 'counter',
    STAR_COUNTER: 'star_counter',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplatesGuardService {
    /**
     * @param {?} vTokenObjectService
     */
    constructor(vTokenObjectService) {
        this.vTokenObjectService = vTokenObjectService;
    }
    /**
     * @param {?} action
     * @param {?} template
     * @return {?}
     */
    canPerformAction(action, template) {
        try {
            /** @type {?} */
            let canPerform = false;
            /** @type {?} */
            let message = null;
            /** @type {?} */
            const neededPermissions = [];
            if (!template && action && !action.includes('create')) {
                throw {
                    error: 'You need to provide template object'
                };
            }
            /** @type {?} */
            const userProfile = this.vTokenObjectService.getProfile();
            /** @type {?} */
            const isCreator = userProfile ? template && template.profile_id === userProfile.id : false;
            /** @type {?} */
            const isSameOrg = userProfile ? template && template.organization_id === userProfile.organization_id : false;
            /** @type {?} */
            const isPersonal = template ? template.is_personal : null;
            /** @type {?} */
            const isPublic = template ? template.is_public : null;
            switch (action) {
                case TemplateActions.CREATE_PERSONAL:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                    break;
                case TemplateActions.CREATE_ORG:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                    break;
                case TemplateActions.CREATE_PUBLIC:
                    neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                    break;
                case TemplateActions.READ:
                    if (!isCreator) {
                        if ((!isPersonal && isSameOrg) || !isPublic) {
                            neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                        }
                    }
                    break;
                case TemplateActions.WRITE:
                    if (!isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_READ);
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_WRITE);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_PERSONAL:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PERSONAL);
                        // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_ORG:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_ORG);
                        // neededPermission.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.CHANGE_VISIBILITY_PUBLIC:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_CREATE_PUBLIC);
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_VISIBILITY);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_VISIBILITY);
                    }
                    break;
                case TemplateActions.DELETE:
                    if (isCreator) {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_CREATOR_DELETE);
                    }
                    else {
                        neededPermissions.push(TemplatePermissions.TEMPLATE_MEMBER_DELETE);
                    }
                    break;
                default:
                    throw {
                        error: 'Action is not defined'
                    };
            }
            if (this.hasPermissions(neededPermissions)) {
                canPerform = true;
            }
            else {
                message = `Insufficient access to perform '${action}'. Needed permissions: ${neededPermissions.toString()}`;
            }
            return {
                canPerform,
                message
            };
        }
        catch (err) {
            console.error({
                message: `Failed to check whether action (${action}) can be done, in TemplateGuardService`,
                err: err
            });
        }
    }
    /**
     * @private
     * @param {?} requiredPermissions
     * @return {?}
     */
    hasPermissions(requiredPermissions) {
        /** @type {?} */
        const userPermissions = this.vTokenObjectService.getPermissions();
        /** @type {?} */
        const hasPermissions = intersection(userPermissions, requiredPermissions).length === requiredPermissions.length;
        return hasPermissions;
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canBeSender(template) {
        /** @type {?} */
        const userProfile = this.vTokenObjectService.getProfile();
        if (!userProfile) {
            return false;
        }
        switch (template.sender) {
            case TemplateSenderTypes.CREATOR:
                return userProfile.id === template.profile_id;
            case TemplateSenderTypes.ORGANIZATION_MEMBER:
            case TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR:
                return userProfile.id === template.profile_id || template.organization_id === userProfile.organization_id;
            default:
                return true;
        }
    }
    /**
     * @return {?}
     */
    canUserCreateTemplate() {
        return this.canPerformAction(TemplateActions.CREATE_PERSONAL, null)['canPerform']
            || this.canPerformAction(TemplateActions.CREATE_ORG, null)['canPerform']
            || this.canPerformAction(TemplateActions.CREATE_PUBLIC, null)['canPerform'];
    }
}
TemplatesGuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TemplatesGuardService.ctorParameters = () => [
    { type: VerdocsTokenObjectService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TemplatesGuardService.prototype.vTokenObjectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FourOhOneDialog {
    /**
     * @param {?} router
     * @param {?} verdocsTokenObjectService
     * @param {?} injector
     */
    constructor(router, verdocsTokenObjectService, injector) {
        this.router = router;
        this.verdocsTokenObjectService = verdocsTokenObjectService;
        this.injector = injector;
        this.error = null;
        this.currentProfile = null;
        this.error_code = null;
        this.error_title = null;
        this.error_message = null;
        this.tokenConfig = this.injector.get(connectionConfigToken);
        this.rSecureUrl = this.tokenConfig.rSecure_frontend_url;
        this.rFormUrl = this.tokenConfig.rForm_frontend_url;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currentProfile = this.verdocsTokenObjectService.getProfile();
        if (this.error && this.error.hasOwnProperty('error')) {
            this.error_code = this.error.error.code || null;
            if (this.error_code) {
                this.prepareErroContent();
            }
        }
    }
    /**
     * @return {?}
     */
    prepareErroContent() {
        switch (this.error_code) {
            case 'AUTH0002':
            case 'T000001':
                this.error_title = 'This document is not accessible';
                this.error_message = (this.currentProfile ? 'Try using a different organization/account, ' : 'Try signing in, signing up, ') + 'or requesting access from the owner of this document.';
                break;
            case 'AUTH0003':
                this.error_title = 'Cannot complete your request';
                this.error_message = 'Try after ' + (this.currentProfile ? 'signing in again.' : 'signing in or signing up.');
                break;
            default:
                this.error_title = 'Your request has been denied.';
                this.error_message = null;
                break;
        }
    }
    /**
     * @return {?}
     */
    goToDashboard() {
        this.router.navigate(['/dashboard']);
    }
    /**
     * @return {?}
     */
    signIn() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/login?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
    /**
     * @return {?}
     */
    signUp() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/signup?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
}
FourOhOneDialog.decorators = [
    { type: Component, args: [{
                selector: 'four-oh-one-dialog',
                template: "<div class=\"error__container\">\n  <div class=\"error__title\">\n    {{error_title}}\n  </div>\n  <div class=\"error__body\" *ngIf=\"error_message\">\n    {{error_message}}\n  </div>\n  <div class=\"error__action\">\n    <button class=\"error__action-button left\" mat-button *ngIf=\"currentProfile\" (click)=\"goToDashboard()\">go to dashboard</button>\n    <button class=\"error__action-button left\" mat-button *ngIf=\"!currentProfile\" (click)=\"signUp()\">sign up</button>\n    <button class=\"error__action-button\" mat-button (click)=\"signIn()\">sign in</button>\n  </div>\n</div>",
                styles: [".error__container{padding-top:8px;padding-left:8px;padding-right:8px;max-width:640px}.error__title{padding:16px 16px 8px;font-size:20px;line-height:24px;font-weight:500;color:rgba(0,0,0,.87)}.error__body{padding:16px 16px 8px;font-size:16px;line-height:24px;color:rgba(0,0,0,.54)}.error__action{padding:8px;text-align:right}.error__action-button{color:#37474f;text-transform:uppercase}.error__action-button.left{margin-right:8px}"]
            }] }
];
/** @nocollapse */
FourOhOneDialog.ctorParameters = () => [
    { type: Router },
    { type: VerdocsTokenObjectService },
    { type: Injector }
];
if (false) {
    /** @type {?} */
    FourOhOneDialog.prototype.error;
    /** @type {?} */
    FourOhOneDialog.prototype.tokenConfig;
    /** @type {?} */
    FourOhOneDialog.prototype.currentProfile;
    /** @type {?} */
    FourOhOneDialog.prototype.error_code;
    /** @type {?} */
    FourOhOneDialog.prototype.error_title;
    /** @type {?} */
    FourOhOneDialog.prototype.error_message;
    /** @type {?} */
    FourOhOneDialog.prototype.rSecureUrl;
    /** @type {?} */
    FourOhOneDialog.prototype.rFormUrl;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.router;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.verdocsTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    FourOhOneDialog.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsHeaderService {
    /**
     * @param {?} injector
     * @param {?} http
     * @param {?} router
     * @param {?} snackbar
     * @param {?} dialog
     * @param {?} templateGuard
     * @param {?} vTokenStateService
     * @param {?} vTokenObjectService
     * @param {?} platform
     */
    constructor(injector, http, router, snackbar, dialog, templateGuard, vTokenStateService, vTokenObjectService, platform) {
        this.injector = injector;
        this.http = http;
        this.router = router;
        this.snackbar = snackbar;
        this.dialog = dialog;
        this.templateGuard = templateGuard;
        this.vTokenStateService = vTokenStateService;
        this.vTokenObjectService = vTokenObjectService;
        this.platform = platform;
        this.titleSubject = new ReplaySubject();
        this.csvBlobSubject = new ReplaySubject();
        this.templates = new Subject();
        this.saveStatusSubject = new ReplaySubject();
        this.templateDetailToggleSubject = new Subject();
        this.profileLoadingSubject = new ReplaySubject();
        this.templateSubject = new Subject();
        this.allEnvelopes = new BehaviorSubject([]);
        this.sideNavStateSubject = new ReplaySubject();
        this.initiateBuilderAutofocus = new ReplaySubject();
        this.createToggleSubscription = new Subject();
        this._toggleSidenavSource = new BehaviorSubject(false);
        this._title = new BehaviorSubject('');
        this._selected = new BehaviorSubject(false);
        this._pdfUrl = new BehaviorSubject('');
        this._env = new BehaviorSubject({
            id: '',
            template_id: '',
            status: '',
            user_id: '',
            envelope_document_id: ''
        });
        this._envDoc = new BehaviorSubject({
            id: '',
            url: '',
            name: '',
            page_numbers: 0,
            mime: '',
        });
        this.userFullname = '';
        this.userInitial = '';
        this.userEmail = '';
        this.userPhone = '';
        this.userData = {
            name: this.userFullname,
            initial: null,
            email: this.userEmail,
            phone: this.userPhone
        };
        this.isAtOrigin = false;
        this.currentOrganizationId = null;
        this.sidenavOpened = false;
        this.toggleSidenav$ = this._toggleSidenavSource.asObservable();
        this.selectStatus$ = this._selected.asObservable();
        this.env$ = this._env.asObservable();
        this.titleValue$ = this._title.asObservable();
        this.pdfUrl$ = this._pdfUrl.asObservable();
        this.envDoc$ = this._envDoc.asObservable();
        this.userDataSubject = new ReplaySubject();
        this.userProfileSubject = new ReplaySubject();
        this.currentProfileSubject = new ReplaySubject();
        this.personalAccountSubject = new ReplaySubject();
        this.profilesSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(connectionConfigToken);
        this.envUrl = this.tokenConfig.rForm_backend_url + '/envelopes';
        this.rForm_url = this.tokenConfig.rForm_frontend_url;
        this.rAccount_url = this.tokenConfig.rAccount_frontend_url;
        this.rSecure_url = this.tokenConfig.rSecure_frontend_url;
    }
    /**
     * @param {?} originType
     * @return {?}
     */
    getAtOrigin(originType) {
        this.isAtOrigin = originType && this.tokenConfig.origin && originType === this.tokenConfig.origin;
        return this.isAtOrigin;
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    toggleSidenav(bool) {
        this.updateToggleStatus(bool);
        this._toggleSidenavSource.next(this.sidenavOpened);
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    updateToggleStatus(bool) {
        this.sidenavOpened = bool;
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updateTitle(string) {
        this._title.next(string);
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    updateSelectStatus(bool) {
        this._selected.next(bool);
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updatePdfUrl(string) {
        this._pdfUrl.next(string);
    }
    /**
     * @param {?} string
     * @return {?}
     */
    updateEnv(string) {
        this._env.next(string);
    }
    /**
     * @param {?} IEnvelopeDocument
     * @return {?}
     */
    updateEnvDoc(IEnvelopeDocument) {
        this._envDoc.next(IEnvelopeDocument);
    }
    /**
     * @return {?}
     */
    initNotificationService() { }
    /**
     * @param {?} envelopes
     * @return {?}
     */
    updateEnvelopes(envelopes) {
        this.allEnvelopes.next(envelopes);
    }
    /**
     * @return {?}
     */
    toggleCreate() {
        this.createToggleSubscription.next(true);
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchEnvelopes(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.envUrl + '/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof HttpResponse) {
                this.updateEnvelopes(event.body);
            }
            return event;
        })));
    }
    /**
     * @param {?} searchParams
     * @return {?}
     */
    searchTemplates(searchParams) {
        for (const key in searchParams) {
            if (searchParams.hasOwnProperty(key)) {
                if (searchParams[key] === null) {
                    delete searchParams[key];
                }
            }
        }
        return this.http.request(new HttpRequest('POST', this.tokenConfig.rForm_backend_url + '/templates/search', searchParams, {
            reportProgress: true,
            responseType: 'json'
        })).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event;
        })));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    downloadTemplateDocument(template) {
        this.getTemplateDocument(template.id, template.template_documents[0]).then((/**
         * @param {?} template_file
         * @return {?}
         */
        template_file => {
            if (isPlatformBrowser(this.platform)) {
                if (window && window.URL) {
                    /** @type {?} */
                    const fileUrl = URL.createObjectURL(template_file);
                    saveAs(fileUrl, template.template_documents[0].name + '.pdf');
                }
            }
        }));
    }
    /**
     * @param {?} templateId
     * @param {?} templateDocument
     * @return {?}
     */
    getTemplateDocument(templateId, templateDocument) {
        return this.http.get(this.tokenConfig.rForm_backend_url + '/templates/' + templateId + '/documents/' +
            templateDocument.id + '?file=true', { responseType: 'blob' }).toPromise();
    }
    /**
     * @param {?} templates
     * @return {?}
     */
    updateTemplates(templates) {
        this.templates.next(templates);
    }
    /**
     * @return {?}
     */
    toggleBuilderSideNav() {
        this.builderSideNavState = !this.builderSideNavState;
        this.sideNavStateSubject.next(this.builderSideNavState);
        if (this.builderSideNavState === false) {
            this.initiateBuilderAutofocus.next(false);
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserEdit(template) {
        /** @type {?} */
        const response = this.templateGuard.canPerformAction(TemplateActions.WRITE, template);
        return response['canPerform'];
    }
    /**
     * @param {?} templateId
     * @param {?} body
     * @return {?}
     */
    updateTemplate(templateId, body) {
        return this.http
            .put(this.tokenConfig.rForm_backend_url + '/templates/' + templateId, body)
            .toPromise().then((/**
         * @param {?} template
         * @return {?}
         */
        template => template));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    openTemplate(template) {
        if (this.canUserPreview(template)) {
            location.href = `${this.tokenConfig.rForm_frontend_url}/document/${template.id}`;
        }
        else if (this.canUserEdit(template)) {
            location.href = `${this.tokenConfig.rForm_frontend_url}/builder/${template.id}/fields`;
        }
        else {
            this.snackbar.open(`Template is in build mode, and not ready for use.  Please check back soon.`);
        }
    }
    /**
     * @param {?=} searchKeyword
     * @return {?}
     */
    openTemplates(searchKeyword) {
        if (this.tokenConfig.origin === 'rForm') {
            if (searchKeyword.trim() !== '') {
                this.router.navigate(['documents'], { queryParams: { name: searchKeyword } });
            }
            else {
                this.router.navigate(['documents']);
            }
        }
        else {
            if (searchKeyword.trim() !== '') {
                location.href = `${this.tokenConfig.rForm_frontend_url}/documents?name=${searchKeyword}`;
            }
            else {
                location.href = `${this.tokenConfig.rForm_frontend_url}/documents`;
            }
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getTemplateOwnerInfo(id) {
        return this.http.get(`${this.tokenConfig.rForm_backend_url}/templates/${id}?owner_info=true`)
            .toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return res;
        }));
    }
    /**
     * @param {?} template
     * @return {?}
     */
    canUserPreview(template) {
        /** @type {?} */
        const hasPermission = (this.templateGuard.canPerformAction(TemplateActions.READ, template)).canPerform;
        /** @type {?} */
        let canPreview;
        /** @type {?} */
        const roles = template.roles;
        /** @type {?} */
        const signers = filter(roles, { type: 'signer' });
        canPreview = signers && signers.length > 0;
        for (const signer of signers) {
            canPreview = signer['fields'] && signer['fields'].length > 0;
        }
        return hasPermission && canPreview;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    starTemplate(id) {
        return this.http.post(this.tokenConfig.rForm_backend_url + `/templates/${id}/stars`, {}).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err && err.status === 401) {
                /** @type {?} */
                const errorDialog = this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unstarTemplate(id) {
        return this.http.delete(this.tokenConfig.rForm_backend_url + `/templates/${id}/stars`).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err && err.status === 401) {
                /** @type {?} */
                const errorDialog = this.dialog.open(FourOhOneDialog, {
                    panelClass: 'error__dialog',
                    disableClose: true
                });
                errorDialog.componentInstance.error = err;
            }
            return EMPTY;
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res)));
    }
    //Account Services
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    updateTokens(sendMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((/**
             * @param {?} resolve
             * @param {?} reject
             * @return {?}
             */
            (resolve, reject) => {
                this.vTokenStateService.updateTokens(this.tokenConfig.rSecure_backend_url).subscribe((/**
                 * @param {?} tokens
                 * @return {?}
                 */
                tokens => {
                    if (tokens && tokens.length > 0) {
                        if (sendMessage) {
                            this.snackbar.dismiss();
                            this.snackbar.open('Status updated');
                        }
                    }
                    this.getAccountData();
                    return resolve();
                }));
            }));
        });
    }
    /**
     * @return {?}
     */
    getAccountData() {
        // might need if header needs to show condition
        /** @type {?} */
        const profile = this.vTokenObjectService.getProfile();
        if (profile) {
            this.getProfiles();
        }
    }
    /**
     * @return {?}
     */
    getProfiles() {
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/profiles').toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const personal = res.splice(findIndex(res, (/**
             * @param {?} p
             * @return {?}
             */
            p => p.organization.name === 'realster')), 1);
            this.personalAccountSubject.next(personal[0]);
            this.profileData = res.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                if (a.organization.name < b.organization.name) {
                    return -1;
                }
                if (a.organization.name > b.organization.name) {
                    return 1;
                }
                return 0;
            }));
            this.profileData.unshift(personal[0]);
            /** @type {?} */
            const currentIndex = findIndex(this.profileData, { current: true });
            if (this.profileData[currentIndex]['first_name']) {
                this.userFullname = this.profileData[currentIndex]['first_name'] + ' ' + this.profileData[currentIndex]['last_name'];
                this.userInitial = this.profileData[currentIndex]['first_name'].charAt(0) +
                    this.profileData[currentIndex]['last_name'].charAt(0);
            }
            else {
                this.userFullname = '';
            }
            if (this.profileData[currentIndex]['phone']) {
                this.userPhone = this.profileData[currentIndex]['phone'];
            }
            else {
                this.userPhone = '';
            }
            if (this.profileData[currentIndex]['email']) {
                this.userEmail = this.profileData[currentIndex]['email'];
            }
            this.userData = {
                name: this.userFullname,
                initial: this.userInitial,
                email: this.userEmail,
                phone: this.userPhone
            };
            this.userProfileSubject.next(this.profileData);
            /** @type {?} */
            const currentProfile = this.profileData[currentIndex];
            this.currentProfileSubject.next(currentProfile);
            this.currentOrganizationId = currentProfile.organization_id;
            this.userDataSubject.next(this.userData);
            return this.userData;
        }));
    }
    /**
     * @param {?} profiles
     * @return {?}
     */
    getProfileCollection(profiles) {
        /** @type {?} */
        const profileModels = [];
        profiles.forEach((/**
         * @param {?} profile
         * @return {?}
         */
        profile => {
            profileModels.push(new ProfileModel(profile));
        }));
        /** @type {?} */
        const profileCollection = new ProfileCollection(profileModels);
        return profileCollection;
    }
    /**
     * @param {?} profile_id
     * @return {?}
     */
    switchProfile(profile_id) {
        this.profileLoadingSubject.next(true);
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/profiles/' + profile_id + '/switch', null).toPromise().then((/**
         * @param {?} res
         * @return {?}
         */
        (res) => __awaiter(this, void 0, void 0, function* () {
            this.vTokenStateService.setTokens(res.tokens);
            this.profileLoadingSubject.next(false);
            return Promise.resolve(res);
        })));
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.http.post(this.tokenConfig.rSecure_backend_url + '/user/email_verification', null).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.snackbar.open('Verification email sent');
        }));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getNameValidity(name) {
        return this.http.get(this.tokenConfig.rAccount_backend_url + '/organizations/is_valid?name=' + name, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @param {?} body
     * @return {?}
     */
    createOrganization(body) {
        return this.http.post(this.tokenConfig.rAccount_backend_url + '/organizations', body, this.getOptions())
            .toPromise()
            .then((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            return Promise.resolve(res);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getOptions() {
        if (isPlatformServer(this.platform)) {
            return;
        }
        /** @type {?} */
        const vTokenCookie = this.vTokenStateService.getOtherCookieObject('rAccount_Verdocs');
        /** @type {?} */
        const authValue = 'Bearer ' + vTokenCookie['accessToken'];
        /** @type {?} */
        const headers = new HttpHeaders({
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache',
            'Expires': 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0',
            'Content-Type': 'application/json',
            'Authorization': authValue,
            'Accept': 'application/json'
        });
        return { headers };
    }
    // End of Account Services
    /**
     * @param {?} name
     * @param {?=} index
     * @return {?}
     */
    getRoleColor(name, index) {
        if (index) {
            return this.getRGBA(index);
        }
        else if (this.template && this.template.roles && this.template.roles.length > 0) {
            index = findIndex(this.template.roles, { name: name });
            if (index >= 0) {
                return this.template.roles[index].rgba ? this.template.roles[index].rgba : this.getRGBA(index);
            }
            else {
                return this.nameToRGBA(name);
            }
        }
        else {
            return this.nameToRGBA(name);
        }
    }
    /**
     * @param {?} rgba
     * @return {?}
     */
    getRGB(rgba) {
        /** @type {?} */
        const rgbNumbers = rgba.replace('rgba(', '').replace(')', '').split(',');
        /** @type {?} */
        const rgbObject = {
            red: rgbNumbers[0],
            green: rgbNumbers[1],
            blue: rgbNumbers[2],
            alpha: rgbNumbers[3]
        };
        /** @type {?} */
        const alpha = 1 - rgbObject.alpha;
        /** @type {?} */
        const red = Math.round((rgbObject.alpha * (rgbObject.red / 255) + alpha) * 255);
        /** @type {?} */
        const green = Math.round((rgbObject.alpha * (rgbObject.green / 255) + alpha) * 255);
        /** @type {?} */
        const blue = Math.round((rgbObject.alpha * (rgbObject.blue / 255) + alpha) * 255);
        return ('#' + this.rgbToHex(red) + this.rgbToHex(green) + this.rgbToHex(blue));
    }
    /**
     * @param {?} rgb
     * @return {?}
     */
    rgbToHex(rgb) {
        /** @type {?} */
        const hex = rgb.toString(16);
        if (hex.length < 2) {
            return '0' + hex;
        }
        return hex;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getRGBA(index) {
        switch (index % 10) {
            case 0:
                return index === 0 ? 'rgba(255, 193, 7, 0.4)' : 'rgba(134, 134, 134, 0.3)'; //#FFE69C
            case 1:
                return 'rgba(156, 39, 176, .4)'; //'#E3C3E9'
            case 2:
                return 'rgba(33, 150, 243, .4)'; //'#C1E1FB'
            case 3:
                return 'rgba(220, 231, 117, 0.3)';
            case 4:
                return 'rgba(121, 134, 203, 0.3)';
            case 5:
                return 'rgba(77, 182, 172, 0.3)';
            case 6:
                return 'rgba(255, 202, 165, 0.3)';
            case 7:
                return 'rgba(2, 247, 190, 0.3)';
            case 8:
                return 'rgba(255, 138, 101, 0.3)';
            case 9:
                return 'rgba(82, 255, 79, 0.3)';
            default:
                return 'rgba(229, 115, 155, 0.3)';
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    nameToRGBA(str) {
        if (!!str) {
            /** @type {?} */
            const validNum = parseInt(str.slice(-1), 10);
            if (!isNaN(validNum)) {
                str += (validNum * 99).toString();
            }
            /** @type {?} */
            let hash = 0;
            for (let i = 0; i < str.length; i++) {
                hash = str.charCodeAt(i) + ((hash << 5) - hash);
            }
            hash = Math.round(hash / 1.3);
            /** @type {?} */
            const c = (hash & 0x00FFFF08)
                .toString(16)
                .toUpperCase();
            /** @type {?} */
            const hex = '#' + '00000'.substring(0, 6 - c.length) + c;
            /** @type {?} */
            const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            /** @type {?} */
            const color = {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            };
            return `rgba(${color.r}, ${color.g}, ${color.b}, 0.2)`;
        }
    }
}
VerdocsHeaderService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
VerdocsHeaderService.ctorParameters = () => [
    { type: Injector },
    { type: HttpClient },
    { type: Router },
    { type: MatSnackBar },
    { type: MatDialog },
    { type: TemplatesGuardService },
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ VerdocsHeaderService.ngInjectableDef = ɵɵdefineInjectable({ factory: function VerdocsHeaderService_Factory() { return new VerdocsHeaderService(ɵɵinject(INJECTOR), ɵɵinject(HttpClient), ɵɵinject(Router), ɵɵinject(MatSnackBar), ɵɵinject(MatDialog), ɵɵinject(TemplatesGuardService), ɵɵinject(VerdocsStateService), ɵɵinject(VerdocsTokenObjectService), ɵɵinject(PLATFORM_ID)); }, token: VerdocsHeaderService, providedIn: "root" });
if (false) {
    /** @type {?} */
    VerdocsHeaderService.prototype.tokenConfig;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.csvBlobSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templates;
    /** @type {?} */
    VerdocsHeaderService.prototype.saveStatusSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateDetailToggleSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profileLoadingSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.templateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.template;
    /** @type {?} */
    VerdocsHeaderService.prototype.allEnvelopes;
    /** @type {?} */
    VerdocsHeaderService.prototype.sideNavStateSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.initiateBuilderAutofocus;
    /** @type {?} */
    VerdocsHeaderService.prototype.createToggleSubscription;
    /** @type {?} */
    VerdocsHeaderService.prototype.rAccount_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rSecure_url;
    /** @type {?} */
    VerdocsHeaderService.prototype.rForm_url;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.envUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._toggleSidenavSource;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._title;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._selected;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._pdfUrl;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._env;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype._envDoc;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.builderSideNavState;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userFullname;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userInitial;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userEmail;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userPhone;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.userData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.profileData;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.isAtOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrigin;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.currentOrganizationId;
    /** @type {?} */
    VerdocsHeaderService.prototype.sidenavOpened;
    /** @type {?} */
    VerdocsHeaderService.prototype.toggleSidenav$;
    /** @type {?} */
    VerdocsHeaderService.prototype.selectStatus$;
    /** @type {?} */
    VerdocsHeaderService.prototype.env$;
    /** @type {?} */
    VerdocsHeaderService.prototype.titleValue$;
    /** @type {?} */
    VerdocsHeaderService.prototype.pdfUrl$;
    /** @type {?} */
    VerdocsHeaderService.prototype.envDoc$;
    /** @type {?} */
    VerdocsHeaderService.prototype.userDataSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.userProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.currentProfileSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.personalAccountSubject;
    /** @type {?} */
    VerdocsHeaderService.prototype.profilesSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    VerdocsHeaderService.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RecipientEditorComponent {
    /**
     * @param {?} verdocsHeaderService
     * @param {?} vTokenObjectService
     */
    constructor(verdocsHeaderService, vTokenObjectService) {
        this.verdocsHeaderService = verdocsHeaderService;
        this.vTokenObjectService = vTokenObjectService;
        this.roles = [];
        this.sender = 'creator';
        this.sender_name = '';
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.prepareSender();
        this.prepareExistingRoles();
    }
    /**
     * @return {?}
     */
    prepareSender() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sender = this.template.sender || 'creator';
            yield this.updateSenderName();
        });
    }
    /**
     * @return {?}
     */
    updateSenderName() {
        return __awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const profile = this.vTokenObjectService.getProfile();
            /** @type {?} */
            const ownerInfo = yield this.verdocsHeaderService.getTemplateOwnerInfo(this.template.id);
            switch (this.sender) {
                case TemplateSenderTypes.ORGANIZATION_MEMBER:
                    this.sender_name = 'Anyone at ' + (profile ? profile.organization.name : 'organization');
                    break;
                case TemplateSenderTypes.EVERYONE:
                    this.sender_name = 'Anyone';
                    break;
                case TemplateSenderTypes.EVERYONE_AS_CREATOR:
                case TemplateSenderTypes.CREATOR:
                case TemplateSenderTypes.ORGANIZATION_MEMBER_AS_CREATOR:
                    if (profile && this.template.profile_id === profile.id) {
                        this.sender_name = profile.first_name + ' ' + profile.last_name + ' (me)';
                    }
                    else {
                        this.sender_name = ownerInfo.name + ' (creator)';
                    }
                    break;
            }
        });
    }
    /**
     * @param {?=} recipients
     * @return {?}
     */
    prepareExistingRoles(recipients) {
        /** @type {?} */
        let roles = [];
        if (recipients && recipients.length > 0) {
            roles = recipients;
        }
        else {
            roles = this.template.roles.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a.sequence - b.sequence;
            })).slice();
        }
        roles = this.setStyles(roles);
        this.roles = [];
        for (let roleIndex = 0; roleIndex < roles.length; roleIndex++) {
            if (roles[roleIndex]) {
                /** @type {?} */
                const sequenceIndex = roles[roleIndex].sequence - 1;
                if (!roles[roleIndex]['status']) {
                    roles[roleIndex]['status'] = null;
                }
                if (!roles[roleIndex]['old_name']) {
                    roles[roleIndex]['old_name'] = roles[roleIndex].name;
                }
                if (this.roles[sequenceIndex] === undefined) {
                    this.roles[sequenceIndex] = [roles[roleIndex]];
                }
                else {
                    this.roles[sequenceIndex].push(roles[roleIndex]);
                }
            }
        }
        if (this.roles && this.roles.length === 0 && !this.roles[0]) {
            this.roles = [];
            this.roles[0] = [];
        }
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    setStyles(roles) {
        roles.forEach((/**
         * @param {?} role
         * @param {?} index
         * @return {?}
         */
        (role, index) => {
            if (role) {
                if (role.full_name && role.email) {
                    role['style'] = {
                        'border': '1px solid ' + this.verdocsHeaderService.getRGBA(index),
                        'background-color': 'transparent'
                    };
                }
                else {
                    role['style'] = {
                        'background': this.verdocsHeaderService.getRGBA(index),
                        'border': '1px solid getRGBA(index)'
                    };
                }
            }
        }));
        return roles;
    }
}
RecipientEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-recipient-editor',
                template: "<div class=\"template-recipients__container\" *ngIf=\"template\">\n  <div class=\"template-recipients__wrapper\">\n    <div class=\"template-recipients__body\">\n      <div class=\"template-recipients__sender\">\n        <div class=\"template-recipients__icon\">\n          <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Sender\" [matTooltipPosition]=\"'below'\">trip_origin</mat-icon>\n        </div>\n        <div class=\"template-recipients__dots\"></div>\n        <div class=\"template-recipients__chips sender\">\n          <mat-chip class=\"template-recipients__chip-sender\">\n            <span>\n              {{sender_name}}\n            </span>\n          </mat-chip>\n        </div>\n      </div>\n      <div class=\"template-recipients__roles\" *ngIf=\"roles && roles.length > 0\">\n        <div class=\"template-recipients__role\" *ngFor=\"let sequence of roles; let sequenceIndex = index;\">\n          <div class=\"template-recipients__icon\">\n            <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Sequence\" [matTooltipPosition]=\"'below'\">place</mat-icon>\n          </div>\n          <div class=\"template-recipients__dots\"></div>\n          <div class=\"template-recipients__chips\">\n            <div class=\"template-recipients__field\">\n              <mat-chip-list class=\"template-recipients__chip-list\" #roleChipList aria-label=\"roles\">\n                <div class=\"template-recipients__chip-wrapper\">\n                  <mat-chip class=\"template-recipients__chip-recipient\" *ngFor=\"let role of sequence\"\n                    [ngStyle]=\"role.style\" [removable]=\"false\" [ngClass]=\"{hidden: role.status === 'delete'}\">\n                    {{role.full_name && role.email ? role.full_name : role.name}}\n                  </mat-chip>\n                </div>\n              </mat-chip-list>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"template-recipients__sender\">\n        <div class=\"template-recipients__icon\">\n          <mat-icon class=\"template-recipients__icon-icon\" matTooltip=\"Verdco complete\" [matTooltipPosition]=\"'below'\">done_all</mat-icon>\n        </div>\n        <div class=\"template-recipients__chips sender\">\n          <mat-chip class=\"template-recipients__chip-sender no-border\">\n            <span>\n              Complete\n            </span>\n          </mat-chip>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>",
                styles: [".template-recipients__wrapper{position:relative;margin:0 auto;width:100%;max-width:600px}.template-recipients__body{position:relative}.template-recipients__sender{position:relative;min-height:48px}.template-recipients__sender:after{content:\"\";display:table;clear:both}.template-recipients__sender-text{margin-top:8px;margin-bottom:8px;font-size:12px;line-height:12px;color:rgba(0,0,0,.54)}.template-recipients__sender-radio{display:flex;align-items:center;height:40px}.template-recipients__roles{position:relative;min-height:48px}.template-recipients__roles:after{content:\"\";display:table;clear:both}.template-recipients__role{position:relative;min-height:48px}.template-recipients__role:after{content:\"\";display:table;clear:both}.template-recipients__icon{position:absolute;top:12px;left:16px;display:inline-block;width:24px;height:24px;z-index:10;background-color:#fff;border-radius:100%}.template-recipients__icon-icon{color:rgba(0,0,0,.54)}.template-recipients__dots{position:absolute;top:24px;left:25.7px;height:100%;border-left:4px dotted #9b9b9b;z-index:1}.template-recipients__chips{position:relative;min-height:48px;margin-left:64px;display:flex;align-items:center;border-bottom:1px solid #d1d5da}.template-recipients__chips.sender,.template-recipients__chips.sequence{display:flex;align-items:center}.template-recipients__chip-list{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center}.template-recipients__chip-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;width:100%;min-height:40px}.template-recipients__chip-recipient.no-border,.template-recipients__chip-sender.no-border{padding-left:0;border:none;pointer-events:none}.template-recipients__chip-recipient.hidden,.template-recipients__chip-sender.hidden{display:none}.template-recipients__chip-recipient.icon-right,.template-recipients__chip-sender.icon-right{padding-right:8px}.template-recipients__chip-recipient:hover,.template-recipients__chip-sender:hover{cursor:pointer}.template-recipients__chip-recipient.cdk-drag-placeholder{background:#ccc;border:3px dotted #999;border-radius:16px;opacity:1;height:32px;transition:transform 250ms cubic-bezier(0,0,.2,1)}.template-recipients__chip-sender{background-color:transparent;border:1px solid rgba(98,113,123,.2)}.template-recipients__chip-add{border:1px dashed #979797;background-color:transparent}.template-recipients__chip-add.icon-left{padding-left:8px}.template-recipients__chip-add:hover{cursor:pointer}.template-recipients__chip-edit{width:18px;height:18px;color:rgba(0,0,0,.87);font-size:18px;margin-left:8px}.template-recipients__chip-icon--left{width:18px;height:18px;color:rgba(0,0,0,.87);font-size:18px;margin-right:8px}"]
            }] }
];
/** @nocollapse */
RecipientEditorComponent.ctorParameters = () => [
    { type: VerdocsHeaderService },
    { type: VerdocsTokenObjectService }
];
RecipientEditorComponent.propDecorators = {
    template: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RecipientEditorComponent.prototype.roles;
    /** @type {?} */
    RecipientEditorComponent.prototype.sender;
    /** @type {?} */
    RecipientEditorComponent.prototype.sender_name;
    /** @type {?} */
    RecipientEditorComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    RecipientEditorComponent.prototype.verdocsHeaderService;
    /**
     * @type {?}
     * @private
     */
    RecipientEditorComponent.prototype.vTokenObjectService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TemplateSourceComponent {
    /**
     * @param {?} templatesService
     */
    constructor(templatesService) {
        this.templatesService = templatesService;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['template']) {
        }
    }
    /**
     * @return {?}
     */
    downloadTemplateDocument() {
        this.templatesService.downloadTemplateDocument(this.template);
    }
}
TemplateSourceComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-template-source',
                template: "<div class=\"template-source__container\" *ngIf=\"template\">\n  <div class=\"template-source__download\" (click)=\"downloadTemplateDocument()\">\n    <mat-icon class=\"template-source__download-icon\">cloud_download</mat-icon>\n    <div class=\"template-source__download-text\">{{template.template_documents[0].name}}</div>\n  </div>\n</div>",
                styles: [".template-source__download{display:flex;align-items:center}.template-source__download:hover{cursor:pointer}.template-source__download-icon{margin-right:4px;color:rgba(0,0,0,.54)}.template-source__download-text{color:rgba(0,0,0,.87)}"]
            }] }
];
/** @nocollapse */
TemplateSourceComponent.ctorParameters = () => [
    { type: VerdocsHeaderService }
];
TemplateSourceComponent.propDecorators = {
    template: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TemplateSourceComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    TemplateSourceComponent.prototype.templatesService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VisibilityEditorComponent {
    /**
     * @param {?} templateGuard
     * @param {?} verdocsHeaderService
     */
    constructor(templateGuard, verdocsHeaderService) {
        this.templateGuard = templateGuard;
        this.verdocsHeaderService = verdocsHeaderService;
        this.updateVisibility = false;
        this.isSaving = false;
        this.isEditMode = false;
        this._canShareWithOrg = null;
        this._canMakeItPrivate = null;
        this._canShareWithPublic = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.template_visibility = this.getTemplateVisibility();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.template_visibility = this.getTemplateVisibility();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.template_visibility = undefined;
    }
    /**
     * @return {?}
     */
    getTemplateVisibility() {
        if (this.visibility) {
            if (this.visibility.is_personal) {
                if (this.visibility.is_public) {
                    return 'personal & public';
                }
                else {
                    return 'personal';
                }
            }
            else {
                if (this.visibility.is_public) {
                    return 'public & org';
                }
                else {
                    return 'org';
                }
            }
        }
        return undefined;
    }
    /**
     * @return {?}
     */
    setUpdateVisibility() {
        /** @type {?} */
        const original_visibility = this.getTemplateVisibility();
        this.updateVisibility = original_visibility !== this.template_visibility;
    }
    /**
     * @return {?}
     */
    saveChanges() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isSaving = true;
            /** @type {?} */
            const body = {};
            if (this.updateVisibility && this.template) {
                switch (this.template_visibility) {
                    case 'personal':
                        body['is_personal'] = true;
                        body['is_public'] = false;
                        break;
                    case 'org':
                        body['is_personal'] = false;
                        body['is_public'] = false;
                        break;
                    case 'public & org':
                        body['is_personal'] = false;
                        body['is_public'] = true;
                        break;
                    case 'personal & public':
                        body['is_personal'] = true;
                        body['is_public'] = true;
                    default:
                        break;
                }
            }
            /** @type {?} */
            const template = yield this.verdocsHeaderService.updateTemplate(this.template.id, body);
            this.updateVisibility = false;
            this.isSaving = false;
        });
    }
    /**
     * @return {?}
     */
    get canShareWithPublic() {
        if (this.template && typeof (this._canShareWithPublic) !== 'boolean') {
            this._canShareWithPublic = (this.templateGuard.canPerformAction(TemplateActions.CHANGE_VISIBILITY_PUBLIC, this.template))['canPerform'];
        }
        return this._canShareWithPublic;
    }
    /**
     * @return {?}
     */
    get canChangeVisibility() {
        return this.canMakeItPrivate || this.canShareWithOrg || this.canShareWithPublic;
    }
    /**
     * @return {?}
     */
    get canShareWithOrg() {
        if (this.template && typeof (this._canShareWithOrg) !== 'boolean') {
            this._canShareWithOrg = (this.templateGuard.canPerformAction(TemplateActions.CHANGE_VISIBILITY_ORG, this.template))['canPerform'];
        }
        return this._canShareWithOrg;
    }
    /**
     * @return {?}
     */
    get canMakeItPrivate() {
        if (this.template && typeof (this._canMakeItPrivate) !== 'boolean') {
            this._canMakeItPrivate =
                (this.templateGuard.canPerformAction(TemplateActions.CHANGE_VISIBILITY_PERSONAL, this.template))['canPerform'];
        }
        return this._canMakeItPrivate;
    }
}
VisibilityEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-preview-visibility',
                template: "<div class=\"template-visiblity__container\" *ngIf=\"visibility\">\n  <ng-template #readView>\n    <div class=\"template-visibility__read\">\n      <div class=\"template-visibility__type\" *ngIf=\"visibility.is_personal && !visibility.is_public\">\n        <mat-icon class=\"template-visibility__type-icon\">lock</mat-icon>\n        <div class=\"template-visibility__type-text\">Personal</div>\n      </div>\n      <div class=\"template-visibility__type\" *ngIf=\"visibility.is_public\">\n        <mat-icon class=\"template-visibility__type-icon\">public</mat-icon>\n        <div class=\"template-visibility__type-text\">Public</div>\n      </div>\n      <div class=\"template-visibility__type\" *ngIf=\"!visibility.is_personal\">\n        <mat-icon class=\"template-visibility__type-icon\">group</mat-icon>\n        <div class=\"template-visibility__type-text\">Shared</div>\n      </div>\n    </div>\n  </ng-template>\n  <ng-template #editView>\n    <div class=\"template-visibility__edit\">\n      <mat-radio-group [(ngModel)]=\"template_visibility\" [disabled]=\"!canChangeVisibility\"\n        matTooltip=\"{{ !canChangeVisibility? 'You don\\'t have the permission to change the visibility of this document':''}}\">\n        <mat-radio-button class=\"template-visibility__radio-button\" [value]=\"'personal'\" (click)=\"setUpdateVisibility()\"\n          [disabled]=\"!canMakeItPrivate\"\n          matTooltip=\"{{ !canMakeItPrivate? 'You don\\'t have the permission to select this option':''}}\">\n          <div class=\"template-visibility__radio-text\">\n            Private\n          </div>\n          <div class=\"template-visibility__radio-description\">\n            Only you can see this document.\n          </div>\n        </mat-radio-button>\n        <mat-radio-button class=\"template-visibility__radio-button\" [value]=\"'org'\" (click)=\"setUpdateVisibility()\"\n          [disabled]=\"!canShareWithOrg\"\n          matTooltip=\"{{ !canShareWithOrg? 'You don\\'t have the permission to select this option':''}}\">\n          <div class=\"template-visibility__radio-text\">\n            Shared to your organization\n          </div>\n          <div class=\"template-visibility__radio-description\">\n            Give access to your organization to share this document.\n          </div>\n        </mat-radio-button>\n        <mat-radio-button class=\"template-visibility__radio-button\" [value]=\"'public & org'\" (click)=\"setUpdateVisibility()\"\n          [disabled]=\"!canShareWithOrg || !canShareWithPublic\"\n          matTooltip=\"{{ !canShareWithOrg || !canShareWithPublic ? 'You don\\'t have the permission to select this option':''}}\">\n          <div class=\"template-visibility__radio-text\">\n            Shared to your organization, and public on the web\n          </div>\n          <div class=\"template-visibility__radio-description\">\n            Give access to your organization to share, and anyone on the web can find and access this document.\n          </div>\n        </mat-radio-button>\n        <mat-radio-button class=\"template-visibility__radio-button\" [value]=\"'personal & public'\"\n          [disabled]=\"!canShareWithPublic\" (click)=\"setUpdateVisibility()\"\n          matTooltip=\"{{ !canShareWithPublic? 'You don\\'t have the permission to select this option':''}}\">\n          <div class=\"template-visibility__radio-text\">\n            Public on the web\n          </div>\n          <div class=\"template-visibility__radio-description\">\n            Anyone on the web can find and access this document.\n          </div>\n        </mat-radio-button>\n      </mat-radio-group>\n    </div>\n  </ng-template>\n  <ng-container *ngTemplateOutlet=\"isEditMode ? editView : readView\"></ng-container>\n</div>",
                styles: [".template-visibility__read,.template-visibility__type{display:flex;align-items:center}.template-visibility__type-icon{margin-right:4px;color:rgba(0,0,0,.54)}.template-visibility__type-text{color:rgba(0,0,0,.87);margin-right:8px}"]
            }] }
];
/** @nocollapse */
VisibilityEditorComponent.ctorParameters = () => [
    { type: TemplatesGuardService },
    { type: VerdocsHeaderService }
];
VisibilityEditorComponent.propDecorators = {
    visibility: [{ type: Input }],
    isEditMode: [{ type: Input }],
    template: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    VisibilityEditorComponent.prototype.template_visibility;
    /** @type {?} */
    VisibilityEditorComponent.prototype.updateVisibility;
    /** @type {?} */
    VisibilityEditorComponent.prototype.isSaving;
    /** @type {?} */
    VisibilityEditorComponent.prototype.visibility;
    /** @type {?} */
    VisibilityEditorComponent.prototype.isEditMode;
    /** @type {?} */
    VisibilityEditorComponent.prototype.template;
    /**
     * @type {?}
     * @private
     */
    VisibilityEditorComponent.prototype._canShareWithOrg;
    /**
     * @type {?}
     * @private
     */
    VisibilityEditorComponent.prototype._canMakeItPrivate;
    /**
     * @type {?}
     * @private
     */
    VisibilityEditorComponent.prototype._canShareWithPublic;
    /**
     * @type {?}
     * @private
     */
    VisibilityEditorComponent.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    VisibilityEditorComponent.prototype.verdocsHeaderService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HeaderComponent {
    /**
     * @param {?} verdocsHeaderService
     * @param {?} vTokenStateService
     * @param {?} vTokenObjectService
     * @param {?} vAuthService
     * @param {?} templateGuard
     * @param {?} router
     * @param {?} cdr
     * @param {?} compiler
     * @param {?} injector
     * @param {?} platform
     */
    constructor(verdocsHeaderService, vTokenStateService, vTokenObjectService, vAuthService, templateGuard, router, cdr, compiler, injector, platform) {
        this.verdocsHeaderService = verdocsHeaderService;
        this.vTokenStateService = vTokenStateService;
        this.vTokenObjectService = vTokenObjectService;
        this.vAuthService = vAuthService;
        this.templateGuard = templateGuard;
        this.router = router;
        this.cdr = cdr;
        this.compiler = compiler;
        this.injector = injector;
        this.platform = platform;
        this.pageLoading = true;
        this.isAuthenticated = false;
        this.headerTitle = 'Envelope';
        this.mode = '';
        this.searchActive = false;
        this.templateName = '';
        this.newTemplateName = null;
        this.saveStatus = '';
        this.notifications = [];
        this.loading = false;
        this.csvBlob = null;
        this.templateDetailsExpanded = true;
        this.template = null;
        this.isSearching = false;
        this.currentProfile = null;
        this.inputFocused = false;
        this.isLiveView = false;
        this.app_version = '';
        this.currentAt = '';
        this._canStar = null;
        this._canCreate = null;
        this._canEdit = null;
        this._userStarred = null;
        this.metaDataSubscription = new Subscription();
        this.titleSubscription = new Subscription();
        this.titleInputSubscription = new Subscription();
        this.titleKeyDownSubscription = new Subscription();
        this.templateNameSubscription = new Subscription();
        this.templateSubscription = new Subscription();
        this.saveStatusSubscription = new Subscription();
        this.profileLoadingSubscription = new Subscription();
        this.userDataSubscription = new Subscription();
        this.modeSubscription = new Subscription();
        this.previewInputSubscription = new Subscription();
        this.generalInputSubscription = new Subscription();
        this.navigationEventSubscription = new Subscription();
        this.csvBlobSubscription = new Subscription();
        this.connections = this.injector.get(connectionConfigToken);
        this.myAccountUrl = this.connections.rAccount_frontend_url + '/rAccount';
        this.termsUrl = this.connections.rSecure_frontend_url + '/terms';
        this.privacyUrl = this.connections.rSecure_frontend_url + '/privacy';
        this.organizationImgSrc = `${this.connections.rAccount_frontend_url}/assets/organization/select-profile.png`;
        this.verdocs_url = this.connections.rForm_frontend_url;
        this.manageLink = `${this.verdocs_url}/manage`;
        this.templatesLink = `${this.verdocs_url}/templates`;
        this.rSecureFrontEnd = this.connections.rSecure_frontend_url;
        this.rFormFrontEnd = this.connections.rForm_frontend_url;
        this.currentOrigin = this.connections.origin;
        this.currentAt = this.currentOrigin;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.templateSubscription = this.verdocsHeaderService.templateSubject.subscribe((/**
         * @param {?} template
         * @return {?}
         */
        (template) => {
            this.template = template;
            this.updateStar();
        }));
        if (isPlatformBrowser(this.platform)) {
            if (window && window.location || this.connections.app_version) {
                this.origin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
            }
            if (this.origin && this.origin.includes('/stage.') || this.origin.includes('/localhost')) {
                this.app_version = this.connections.app_version;
            }
            else {
                this.app_version = '';
            }
        }
        this.isAuthenticated = this.vAuthService.isAuthenticated();
        this.emailVerified = this.vTokenStateService.getEmailVerification();
        this.navigationEventSubscription = this.router.events.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof NavigationEnd) {
                this.isAuthenticated = this.vAuthService.isAuthenticated();
                if (event && event.url && ((event.url.includes('document/') && !event.url.includes('envelopes/document')) || event.url.includes('view/live/'))) {
                    this.isAtOriginalOrigin = this.verdocsHeaderService.getAtOrigin(this.currentOrigin);
                    this.currentAt = this.currentOrigin;
                    this.mode = 'preview';
                    if (event.url.includes('view/live/')) {
                        this.isLiveView = true;
                        this.templateDetailsExpanded = false;
                    }
                    else {
                        this.isLiveView = false;
                    }
                }
                else {
                    this.mode = 'not-preview';
                    this.isLiveView = false;
                }
                if (this.mode !== 'preview') {
                    this.image_url = `${this.connections.rForm_frontend_url}/assets/white-logo.svg`;
                }
                else {
                    this.image_url = `${this.connections.rForm_frontend_url}/assets/break-black-logo.svg`;
                }
                this.getProfile();
                this.updateStar();
                this.checkCanStar();
                this._canEdit = undefined;
                this._canCreate = undefined;
                this.pageLoading = false;
            }
            else if (event instanceof NavigationStart) {
                this.pageLoading = true;
            }
        }));
        this.titleSubscription = this.verdocsHeaderService.titleSubject.subscribe((/**
         * @param {?} title
         * @return {?}
         */
        title => {
            if (title) {
                this.title = title;
            }
            else {
                this.title = null;
            }
        }));
        this.csvBlobSubscription = this.verdocsHeaderService.csvBlobSubject.subscribe((/**
         * @param {?} blob
         * @return {?}
         */
        blob => {
            if (blob) {
                this.csvBlob = blob;
            }
            else {
                this.csvBlob = null;
            }
        }));
        this.saveStatusSubscription = this.verdocsHeaderService.saveStatusSubject.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this.saveStatus = status;
        }));
        this.profileLoadingSubscription = this.verdocsHeaderService.profileLoadingSubject.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this.loading = status;
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.metaDataSubscription.unsubscribe();
        this.titleSubscription.unsubscribe();
        this.titleInputSubscription.unsubscribe();
        this.titleKeyDownSubscription.unsubscribe();
        this.templateNameSubscription.unsubscribe();
        this.templateSubscription.unsubscribe();
        this.saveStatusSubscription.unsubscribe();
        this.profileLoadingSubscription.unsubscribe();
        this.userDataSubscription.unsubscribe();
        this.modeSubscription.unsubscribe();
        if (!!this.generalInputSubscription) {
            this.generalInputSubscription.unsubscribe();
        }
        if (!!this.previewInputSubscription) {
            this.previewInputSubscription.unsubscribe();
        }
        this.navigationEventSubscription.unsubscribe();
        this.csvBlobSubscription.unsubscribe();
        this.compiler.clearCache();
    }
    /**
     * @return {?}
     */
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.vAuthService.isAuthenticated() && this.mode !== 'view') {
                yield this.verdocsHeaderService.initNotificationService();
            }
        });
    }
    /**
     * @return {?}
     */
    get home_url() {
        return this.vTokenStateService.getIDToken() ? this.connections.rForm_frontend_url + '/dashboard' : this.connections.rForm_frontend_url;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    previewInputEvent(event) {
        clearTimeout(this.inputTimer);
        this.inputTimer = setTimeout((/**
         * @return {?}
         */
        () => {
            this.getSearchResults(this.previewInput.nativeElement.value);
            clearTimeout(this.inputTimer);
        }), 500);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    generalInputEvent(event) {
        clearTimeout(this.inputTimer);
        this.inputTimer = setTimeout((/**
         * @return {?}
         */
        () => {
            this.getSearchResults(this.generalInput.nativeElement.value);
            clearTimeout(this.inputTimer);
        }), 500);
    }
    /**
     * @return {?}
     */
    prepareSearchInput() {
        if (this.mode === 'preview') {
            this.listenForPreviewInput();
        }
        else {
            this.listenForGeneralInput();
        }
    }
    /**
     * @return {?}
     */
    listenForPreviewInput() {
        if (this.generalInputSubscription) {
            this.generalInputSubscription.unsubscribe();
        }
        if (this.previewInput) {
            if (!this.previewInputSubscription) {
                this.previewInputSubscription = fromEvent(this.previewInput.nativeElement, 'keyup')
                    .pipe(debounceTime(500), distinctUntilChanged()).subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    /** @type {?} */
                    const keyName = event['code'] || event['key'];
                    if (keyName) {
                        if (keyName !== 'Enter' && keyName !== 'ArrowDown' && keyName !== 'ArrowUp') {
                            this.getSearchResults(this.previewInput.nativeElement.value);
                        }
                    }
                    else {
                        this.getSearchResults(this.previewInput.nativeElement.value);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    listenForGeneralInput() {
        if (this.previewInputSubscription) {
            this.previewInputSubscription.unsubscribe();
        }
        if (this.generalInput) {
            if (!this.generalInputSubscription) {
                this.generalInputSubscription = fromEvent(this.generalInput.nativeElement, 'keyup')
                    .pipe(debounceTime(500), distinctUntilChanged()).subscribe((/**
                 * @param {?} event
                 * @return {?}
                 */
                (event) => {
                    /** @type {?} */
                    const keyName = event['code'] || event['key'];
                    if (keyName) {
                        if (keyName !== 'Enter' && keyName !== 'ArrowDown' && keyName !== 'ArrowUp') {
                            this.getSearchResults(this.generalInput.nativeElement.value);
                        }
                    }
                    else {
                        this.getSearchResults(this.generalInput.nativeElement.value);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    get canStar() {
        return this._canStar;
    }
    /**
     * @return {?}
     */
    get userStarred() {
        return this._userStarred;
    }
    /**
     * @return {?}
     */
    get canEdit() {
        if (typeof (this._canEdit) !== 'boolean' && this.templateGuard && this.isAuthenticated && this.template) {
            /** @type {?} */
            const response = this.templateGuard.canPerformAction(TemplateActions.WRITE, this.template);
            this._canEdit = response['canPerform'];
        }
        if (!this.isAuthenticated && this.template) {
            this._canEdit = false;
        }
        return this._canEdit;
    }
    /**
     * @return {?}
     */
    get canCreate() {
        if (this.isAuthenticated) {
            if (typeof (this._canCreate) !== 'boolean') {
                /** @type {?} */
                const permissions = this.vTokenObjectService.getVerdocsPermissions();
                this._canCreate = false;
                if (permissions && permissions.length > 0) {
                    permissions.forEach((/**
                     * @param {?} permission
                     * @return {?}
                     */
                    permission => {
                        if (permission.includes('creator:create')) {
                            return this._canCreate = true;
                        }
                    }));
                }
            }
            return this._canCreate;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    getProfile() {
        if (this.isAuthenticated) {
            this.currentProfile = this.vTokenObjectService.getProfile();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    selected(event) {
        if ((this.generalInput && this.generalInput.nativeElement.value) || (this.previewInput && this.previewInput.nativeElement.value)) {
            event.option._element.nativeElement.click();
        }
    }
    /**
     * @return {?}
     */
    checkCanStar() {
        this._canStar = this.isAuthenticated;
    }
    /**
     * @param {?} search_string
     * @return {?}
     */
    getSearchResults(search_string) {
        this.isSearching = true;
        if (this.isAuthenticated) {
            this.verdocsHeaderService.searchEnvelopes({ envelope_name: search_string, row: 3 }).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result instanceof HttpResponse) {
                    this.envelopeResult = (/** @type {?} */ (result.body['result']));
                    this.verdocsHeaderService.searchTemplates({ name: search_string, row: 3 }).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        if (result instanceof HttpResponse) {
                            this.templateResult = (/** @type {?} */ (result.body['result']));
                            this.isSearching = false;
                        }
                    }));
                }
            }));
        }
        else {
            this.verdocsHeaderService.searchTemplates({ name: search_string, row: 3 }).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result instanceof HttpResponse) {
                    this.templateResult = (/** @type {?} */ (result.body['result']));
                    this.isSearching = false;
                }
            }));
        }
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    recipientTracking(index, item) {
        return index;
    }
    /**
     * @return {?}
     */
    toggleMenu() {
        this.verdocsHeaderService.toggleSidenav(!this.sidenavOpen);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setInputFocused(value) {
        this.inputFocused = value;
    }
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    hasProp(obj, key) {
        return obj.hasOwnProperty(key);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    roleColor(name) {
        return this.verdocsHeaderService.getRoleColor(name);
    }
    /**
     * @return {?}
     */
    toggleSidenav() {
        this.verdocsHeaderService.toggleBuilderSideNav();
    }
    /**
     * @return {?}
     */
    toggleTemplateDetails() {
        this.templateDetailsExpanded = !this.templateDetailsExpanded;
        if (this.templateDetailsExpanded) {
            this.verdocsHeaderService.templateDetailToggleSubject.next(true);
        }
    }
    /**
     * @return {?}
     */
    reset() {
        this.templateName = 'Unititled';
        // this.verdocsHeaderService.templateNameSubject.next('Untitled');
    }
    /**
     * @param {?} roles
     * @return {?}
     */
    getRoleNames(roles) {
        if (roles && roles.length > 0) {
            /** @type {?} */
            const last_index = roles.length - 1;
            /** @type {?} */
            let names_string = '';
            for (let x = 0; x < roles.length; x++) {
                if (x < last_index) {
                    names_string += (/** @type {?} */ (roles[x]['full_name'] + ', '));
                }
                else {
                    names_string += (/** @type {?} */ (roles[x]['full_name']));
                }
            }
            return names_string;
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    getTemplateStats(template) {
        return `${this.getTemplatePages(template)}  ${this.getTemplateSequence(template)}  ${this.getTemplateRecipients(template)}`;
    }
    /**
     * @param {?} template
     * @return {?}
     */
    getTemplatePages(template) {
        if (template && template.pages) {
            return `${template.pages.length >= 2 ? template.pages.length + ' Pages' : '1 Page'}`;
        }
        else {
            return '0 Page';
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    getTemplateSequence(template) {
        if (template && template.roles) {
            /** @type {?} */
            let hasPreparer = false;
            /** @type {?} */
            let maxSequence = -1;
            for (let x = 0; x < template.roles.length; x++) {
                if (template.roles[x].sequence > maxSequence) {
                    maxSequence = template.roles[x].sequence;
                }
                if (template.roles[x].sequence === 0) {
                    hasPreparer = true;
                }
            }
            /** @type {?} */
            const totalSequence = hasPreparer ? maxSequence + 1 : maxSequence;
            return totalSequence > 1 ? totalSequence + ' Sequences' : '1 Sequence';
        }
        else {
            return '0 Sequence';
        }
    }
    /**
     * @param {?} template
     * @return {?}
     */
    getTemplateRecipients(template) {
        if (template && template.roles) {
            /** @type {?} */
            const totalRecipients = template.roles.length;
            return totalRecipients > 1 ? totalRecipients + ' Recipients' : '1 Recipient';
        }
        else {
            return '0 Recipient';
        }
    }
    /**
     * @param {?} envelope_id
     * @return {?}
     */
    goToEnvelope(envelope_id) {
        if (this.currentOrigin === 'rForm' && this.isAtOriginalOrigin) {
            this.router.navigate([`/envelope/${envelope_id}`]);
        }
        else {
            location.href = `${this.connections.rForm_frontend_url}/envelope/${envelope_id}`;
        }
        this.clearSearchInputs();
    }
    /**
     * @param {?} template
     * @return {?}
     */
    goToTemplate(template) {
        this.verdocsHeaderService.openTemplate(template);
        this.clearSearchInputs();
    }
    /**
     * @param {?} keyword
     * @return {?}
     */
    goToTemplates(keyword) {
        this.verdocsHeaderService.openTemplates(keyword);
    }
    /**
     * @return {?}
     */
    searchEnvelopes() {
        /** @type {?} */
        const keyword = this.getSearchKeyword();
        if (keyword !== '') {
            this.router.navigate([`/manage`], { queryParams: { envelope_name: keyword } });
            this.clearSearchInputs();
        }
    }
    /**
     * @return {?}
     */
    searchRecipients() {
        /** @type {?} */
        const keyword = this.getSearchKeyword();
        if (keyword !== '') {
            this.router.navigate([`/manage`], { queryParams: { recipient_name: keyword } });
            this.clearSearchInputs();
        }
    }
    /**
     * @return {?}
     */
    searchTemplates() {
        /** @type {?} */
        const keyword = this.getSearchKeyword();
        if (keyword !== '') {
            this.router.navigate([`/templates`], { queryParams: { name: keyword } });
            this.clearSearchInputs();
        }
    }
    /**
     * @return {?}
     */
    getSearchKeyword() {
        if (this.previewInput && this.previewInput.nativeElement.value) {
            return this.previewInput.nativeElement.value;
        }
        else if (this.generalInput && this.generalInput.nativeElement.value) {
            return this.generalInput.nativeElement.value;
        }
        return '';
    }
    /**
     * @return {?}
     */
    clearSearchInputs() {
        if (this.previewInput) {
            this.previewInput.nativeElement.value = '';
        }
        if (this.generalInput) {
            this.generalInput.nativeElement.value = '';
        }
        this.envelopeResult = [];
        this.templateResult = [];
    }
    /**
     * @return {?}
     */
    updateStar() {
        if (this.template && this.currentProfile && this.template.template_stars) {
            /** @type {?} */
            const existingStarIndex = findIndex(this.template.template_stars, { profile_id: this.currentProfile.id, template_id: this.template.id });
            this._userStarred = existingStarIndex > -1;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    starTemplate() {
        if (this.canStar) {
            this.verdocsHeaderService.starTemplate(this.template.id).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                this.template.template_stars.push(res);
                this.updateStar();
            }));
        }
        else if (!this.isAuthenticated) {
            this.createTemplate();
        }
    }
    /**
     * @return {?}
     */
    unstarTemplate() {
        if (this.canStar) {
            this.verdocsHeaderService.unstarTemplate(this.template.id).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                /** @type {?} */
                const removedStarIndex = findIndex(this.template.template_stars, { profile_id: this.currentProfile.id, template_id: this.template.id });
                if (removedStarIndex > -1) {
                    this.template.template_stars.splice(removedStarIndex, 1);
                    this.updateStar();
                }
            }));
        }
        else if (!this.isAuthenticated) {
            this.createTemplate();
        }
    }
    /**
     * @return {?}
     */
    editTemplate() {
        if (this.canEdit) {
            this.router.navigate([`/builder/${this.template.id}/fields`]);
        }
        else if (!this.isAuthenticated) {
            this.createTemplate();
        }
    }
    /**
     * @return {?}
     */
    createTemplate() {
        this.verdocsHeaderService.toggleCreate();
    }
}
HeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'verdocs-header',
                template: "<div class=\"header__placeholder\" *ngIf=\"pageLoading\"></div>\n<div *ngIf=\"!pageLoading\">\n  <header #headerContainer>\n    <div class=\"header-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\n      [ngClass]=\"{authenticated: isAuthenticated, preview: mode === 'preview'}\">\n      <div class=\"header-util-wrapper collapsed\" fxLayout=\"row\">\n        <button mat-icon-button (click)=\"toggleMenu()\">\n          <mat-icon>menu</mat-icon>\n        </button>\n      </div>\n      <div class=\"header__dynamic-section\"\n        [ngClass]=\"{preview: mode === 'preview', expanded: templateDetailsExpanded, 'live-view': isLiveView}\">\n        <div class=\"header__logo-wrapper preview\" *ngIf=\"mode === 'preview'\"\n          [ngClass]=\"{authenticated: isAuthenticated, expanded: templateDetailsExpanded}\" matAutocompleteOrigin\n          #previewOrigin=\"matAutocompleteOrigin\">\n          <div class=\"header__dynamic-mobile-menu collapsed\">\n            <button mat-icon-button (click)=\"toggleMenu()\">\n              <mat-icon>menu</mat-icon>\n            </button>\n          </div>\n          <a class=\"header__title preview\" href=\"{{home_url}}\" [ngClass]=\"{authenticated: isAuthenticated}\"\n            *ngIf=\"currentOrigin !== 'rForm'\">\n            <img class=\"header__logo\" [src]=\"image_url\"\n              [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\" />\n              <div class=\"header__app-version\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\">{{app_version}}</div>\n          </a>\n          <a class=\"header__title preview\" [routerLink]=\"(isAuthenticated?'/dashboard': '/')\" [ngClass]=\"{authenticated: isAuthenticated}\"\n            *ngIf=\"currentOrigin === 'rForm'\">\n            <img class=\"header__logo\" [src]=\"image_url\"\n              [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\" />\n              <div class=\"header__app-version\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\">{{app_version}}</div>\n          </a>\n          <div class=\"header__general-search preview\">\n            <input class=\"header__general-search-input\" #previewInput type=\"text\"\n              [ngClass]=\"{preview: mode === 'preview', stretch: previewInput.value !== ''}\"\n              placeholder=\"Search or jump to...\" [matAutocompleteConnectedTo]=\"previewOrigin\"\n              [matAutocomplete]=\"autocomplete\" (focus)=\"setInputFocused(true)\" (blur)=\"setInputFocused(false)\"\n              (input)=\"previewInputEvent($event)\">\n            <button class=\"header__search-button preview\" mat-icon-button *ngIf=\"!isSearching\"\n              (click)=\"previewInput.focus()\">\n              <mat-icon>search</mat-icon>\n            </button>\n            <div class=\"header__general-search-spinner\" *ngIf=\"isSearching\">\n              <mat-spinner [diameter]=\"24\"></mat-spinner>\n            </div>\n          </div>\n          <mat-autocomplete class=\"header__search-autocomplete\" #autocomplete=\"matAutocomplete\"\n            (optionSelected)=\"selected($event)\">\n            <mat-option class=\"header__search-autocomplete-option\" *ngFor=\"let envelope of envelopeResult\"\n              [value]=\"envelope['name']\" (keydown.enter)=\"goToEnvelope(envelope.id)\" (click)=\"goToEnvelope(envelope.id)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>mail</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    {{envelope['name']}}\n                  </div>\n                  <div class=\"header__search-autocomplete-subheader\">\n                    {{getRoleNames(envelope.recipients)}}\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <mat-option class=\"header__search-autocomplete-option\" *ngIf=\"envelopeResult && envelopeResult.length > 0\"\n              [value]=\"previewInput.value\" (keydown.enter)=\"searchEnvelopes()\" (click)=\"searchEnvelopes()\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <img class=\"header__search-verdocs-image\" src=\"{{verdocs_url}}/assets/v-blue-logo.svg\" />\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Show more Verdocs\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <hr *ngIf=\"envelopeResult && envelopeResult.length > 0\">\n            <mat-option class=\"header__search-autocomplete-option\" *ngFor=\"let template of templateResult\"\n              [value]=\"template.name\" (keydown.enter)=\"goToTemplate(template)\" (click)=\"goToTemplate(template)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>description</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    <div class=\"header__search-autocomplete-header\">\n                      {{template.name}}\n                    </div>\n                    <div class=\"header__search-autocomplete-subheader\">\n                      {{getTemplateStats(template)}}\n                    </div>\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <mat-option class=\"header__search-autocomplete-option\" *ngIf=\"templateResult && templateResult.length > 0\"\n              [value]=\"previewInput.value\" (keydown.enter)=\"goToTemplates(previewInput.value)\" (click)=\"goToTemplates(previewInput.value)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <img class=\"header__search-verdocs-image\" src=\"{{verdocs_url}}/assets/v-blue-logo.svg\" />\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Show more Documents\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <hr *ngIf=\"templateResult && templateResult.length > 0 && isAuthenticated\">\n            <mat-option class=\"header__search-autocomplete-option\" [value]=\"previewInput.value\"\n              (keydown.enter)=\"searchRecipients()\" (click)=\"searchRecipients()\"\n              *ngIf=\"isAuthenticated && previewInput.value !== ''\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>search</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Search Recipients with \"{{previewInput.value}}\"\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </div>\n        <div class=\"header__logo-wrapper\" *ngIf=\"mode !== 'preview'\"\n          [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated, expanded: templateDetailsExpanded}\">\n          <a class=\"header__title\" href=\"{{home_url}}\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\"\n            *ngIf=\"currentOrigin !== 'rForm'\">\n            <img class=\"header__logo\" [src]=\"image_url\"\n              [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\" />\n              <div class=\"header__app-version\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\">{{app_version}}</div>\n          </a>\n          <a class=\"header__title\" [routerLink]=\"(isAuthenticated?'/dashboard': '/')\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\"\n            *ngIf=\"currentOrigin === 'rForm'\">\n            <img class=\"header__logo\" [src]=\"image_url\"\n              [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\" />\n              <div class=\"header__app-version\" [ngClass]=\"{preview: mode === 'preview', authenticated: isAuthenticated}\">{{app_version}}</div>\n          </a>\n          <div class=\"header__general-search\"\n            [ngClass]=\"{preview: mode === 'preview', extend: inputFocused || generalInput.value != '', unauthenticated: !isAuthenticated, landing: currentAt === 'rSecure'}\"\n            matAutocompleteOrigin #generalOrigin=\"matAutocompleteOrigin\">\n            <input class=\"header__general-search-input\" #generalInput type=\"text\"\n              [ngClass]=\"{preview: mode === 'preview', stretch: generalInput.value !== '', unauthenticated: !isAuthenticated}\"\n              placeholder=\"Search or jump to...\" [matAutocompleteConnectedTo]=\"generalOrigin\"\n              [matAutocomplete]=\"autocomplete\" (focus)=\"setInputFocused(true)\" (blur)=\"setInputFocused(false)\"\n              (input)=\"generalInputEvent($event)\">\n            <button class=\"header__search-button\" mat-icon-button [ngClass]=\"{preview: mode === 'preview'}\"\n              *ngIf=\"!isSearching\" (click)=\"generalInput.focus()\">\n              <mat-icon>search</mat-icon>\n            </button>\n            <div class=\"header__general-search-spinner\" *ngIf=\"isSearching\">\n              <mat-spinner [diameter]=\"24\"></mat-spinner>\n            </div>\n          </div>\n          <mat-autocomplete class=\"header__search-autocomplete\" #autocomplete=\"matAutocomplete\"\n            (optionSelected)=\"selected($event)\">\n            <mat-option class=\"header__search-autocomplete-option\" *ngFor=\"let envelope of envelopeResult\"\n              [value]=\"envelope.name\" (keydown.enter)=\"goToEnvelope(envelope.id)\" (click)=\"goToEnvelope(envelope.id)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>mail</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    {{envelope.name}}\n                  </div>\n                  <div class=\"header__search-autocomplete-subheader\">\n                    {{getRoleNames(envelope.recipients)}}\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <mat-option class=\"header__search-autocomplete-option\" *ngIf=\"envelopeResult && envelopeResult.length > 0\"\n              [value]=\"generalInput.value\" (keydown.enter)=\"searchEnvelopes()\" (click)=\"searchEnvelopes()\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <img class=\"header__search-verdocs-image\" src=\"{{verdocs_url}}/assets/v-blue-logo.svg\" />\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Show more Verdocs\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <hr *ngIf=\"envelopeResult && envelopeResult.length > 0\">\n            <mat-option class=\"header__search-autocomplete-option\" *ngFor=\"let template of templateResult\"\n              (keydown.enter)=\"goToTemplate(template)\" (click)=\"goToTemplate(template)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>description</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    {{template?.name}}\n                  </div>\n                  <div class=\"header__search-autocomplete-subheader\">\n                    {{getTemplateStats(template)}}\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <mat-option class=\"header__search-autocomplete-option\" *ngIf=\"templateResult && templateResult.length > 0\"\n              [value]=\"generalInput.value\" (keydown.enter)=\"goToTemplates(generalInput.value)\" (click)=\"goToTemplates(generalInput.value)\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <img class=\"header__search-verdocs-image\" src=\"{{verdocs_url}}/assets/v-blue-logo.svg\" />\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Show more Documents\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n            <hr *ngIf=\"templateResult && templateResult.length > 0 && isAuthenticated\">\n            <mat-option class=\"header__search-autocomplete-option\" [value]=\"generalInput.value\"\n              (keydown.enter)=\"searchRecipients()\" (click)=\"searchRecipients()\"\n              *ngIf=\"isAuthenticated && generalInput.value !== ''\">\n              <div class=\"header__search-autocomplete-wrapper\">\n                <div class=\"header__search-autocomplete-left\">\n                  <mat-icon>search</mat-icon>\n                </div>\n                <div class=\"header__search-autocomplete-middle\">\n                  <div class=\"header__search-autocomplete-header\">\n                    Search Recipients with \"{{generalInput.value}}\"\n                  </div>\n                </div>\n                <div class=\"header__search-autocomplete-right\"></div>\n              </div>\n            </mat-option>\n          </mat-autocomplete>\n        </div>\n        <div class=\"header__template-details\"\n          [ngClass]=\"{show: mode === 'preview' && !isLiveView, expanded: templateDetailsExpanded}\">\n          <div class=\"header__template-detail-container\" [ngClass]=\"{show: templateDetailsExpanded}\">\n            <div class=\"header__template-detail-wrapper\">\n              <div class=\"header__template-detail-header no-top-border\">\n                <div class=\"header__template-detail-title bold\">\n                  <h1>{{template?.name}}</h1>\n                </div>\n                <div class=\"header__template-detail-button-container\"></div>\n              </div>\n              <div class=\"header__template-detail-body\" *ngIf=\"template && template.description\">\n                <div class=\"header__template-detail-body-text\">\n                  {{template?.description}}\n                </div>\n              </div>\n            </div>\n            <div class=\"header__template-detail-wrapper\" *ngIf=\"template\">\n              <div class=\"header__template-detail-header\">\n                <div class=\"header__template-detail-title\">Tags</div>\n                <div class=\"header__template-detail-button-container\"></div>\n              </div>\n              <div class=\"header__template-detail-body\">\n                <div class=\"header__template-detail-tags\">\n                  <div class=\"header__template-detail-tag\" *ngFor=\"let tag of template.tags\">\n                    {{tag.tag_name}}\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"header__template-detail-wrapper\" *ngIf=\"template\">\n              <div class=\"header__template-detail-header\">\n                <div class=\"header__template-detail-title\">Visibility</div>\n              </div>\n              <div class=\"header__template-detail-button-container\">\n                <app-preview-visibility [template]=\"template\"\n                  [visibility]=\"{is_personal: template?.is_personal, is_public: template?.is_public}\">\n                </app-preview-visibility>\n              </div>\n              <div class=\"header__template-detail-body\"></div>\n            </div>\n            <div class=\"header__template-detail-wrapper\" *ngIf=\"template\">\n              <div class=\"header__template-detail-header\">\n                <div class=\"header__template-detail-title\">Source documents</div>\n              </div>\n              <div class=\"header__template-detail-body\">\n                <app-template-source [template]=\"template\"></app-template-source>\n              </div>\n            </div>\n            <div class=\"header__template-detail-wrapper\" *ngIf=\"template\">\n              <div class=\"header__template-detail-header\">\n                <div class=\"header__template-detail-title\">Workflow</div>\n              </div>\n              <div class=\"header__template-detail-body\">\n                <app-recipient-editor [template]=\"template\"></app-recipient-editor>\n              </div>\n            </div>\n            <div class=\"header__template-detail-wrapper\" *ngIf=\"template\">\n              <div class=\"header__template-detail-header\">\n                <div class=\"header__template-detail-title\">Metrics</div>\n              </div>\n              <div class=\"header__template-detail-body\">\n                <div class=\"header__template-detail-stats\">\n                  <div class=\"header__counter-stars\">\n                    <mat-icon class=\"header__counter-icon\">star</mat-icon>\n                    <span class=\"header__counter-number\">\n                      {{template.template_stars ? template.template_stars.length : 0}}\n                    </span>\n                  </div>\n                  <div class=\"header__counter-envelopes\">\n                    <mat-icon class=\"header__counter-icon\">mail</mat-icon>\n                    <span class=\"header__counter-number\">\n                      {{template.counter}}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"header__template-detail-options\" [ngClass]=\"{show: templateDetailsExpanded}\">\n            <div class=\"header__template-detail-option-button-wrapper\">\n              <button mat-raised-button class=\"header__template-detail-option-button\" *ngIf=\"!userStarred\"\n                (click)=\"starTemplate()\">\n                <mat-icon class=\"header__template-detail-option-icon\">star</mat-icon>\n                <span class=\"header__template-detail-option-text\">Star</span>\n              </button>\n              <button mat-raised-button class=\"header__template-detail-option-button\" *ngIf=\"userStarred\"\n                (click)=\"unstarTemplate()\">\n                <mat-icon class=\"header__template-detail-option-icon\">star_outline</mat-icon>\n                <span class=\"header__template-detail-option-text\">Unstar</span>\n              </button>\n            </div>\n            <div class=\"header__template-detail-option-button-wrapper\">\n              <button mat-raised-button class=\"header__template-detail-option-button\" (click)=\"createTemplate()\">\n                <mat-icon class=\"header__template-detail-option-icon\">drafts</mat-icon>\n                <span class=\"header__template-detail-option-text\">Create</span>\n              </button>\n            </div>\n            <div class=\"header__template-detail-option-button-wrapper\" matTooltip=\"Edit privileges required.\">\n              <button mat-raised-button class=\"header__template-detail-option-button\" (click)=\"editTemplate()\" [disabled]=\"!canEdit && isAuthenticated\">\n                <mat-icon class=\"header__template-detail-option-icon\">build</mat-icon>\n                <span class=\"header__template-detail-option-text\">Edit</span>\n              </button>\n            </div>\n          </div>\n          <div class=\"header__template-details-expansion\" (click)=\"toggleTemplateDetails()\"\n            [ngClass]=\"{expanded: templateDetailsExpanded}\">\n            <button class=\"header__template-details-button\" mat-icon-button>\n              <mat-icon class=\"header__template-details-arrow\" [ngClass]=\"{expanded: templateDetailsExpanded}\">\n                keyboard_arrow_down</mat-icon>\n            </button>\n            <div class=\"header__template-details-text\" *ngIf=\"!templateDetailsExpanded\">Show details</div>\n            <div class=\"header__template-details-text\" *ngIf=\"templateDetailsExpanded\">Hide</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"header__nav\" fxFlex [ngClass]=\"{preview: mode === 'preview', ua: !isAuthenticated}\">\n        <div class=\"header__nav-authenticated\" *ngIf=\"isAuthenticated && currentOrigin === 'rForm'\">\n          <a class=\"header__link\" [routerLink]=\"'/manage'\">Manage</a>\n          <a class=\"header__link\" [routerLink]=\"'/documents'\">Documents</a>\n        </div>\n        <div class=\"header__nav-authenticated\" *ngIf=\"isAuthenticated && currentOrigin !== 'rForm' && currentOrigin !== 'rSecure'\">\n          <a class=\"header__link\" [href]=\"rFormFrontEnd + '/manage'\">Manage</a>\n          <a class=\"header__link\" [href]=\"rFormFrontEnd + '/documents'\">Documents</a>\n        </div>\n        <div class=\"header__nav-unauthenticated\" *ngIf=\"(!isAuthenticated && currentOrigin !== 'rSecure') || currentOrigin === 'rSecure'\">\n          <div class=\"header__link-wrapper realster\">\n            <div class=\"header__link realster\">Why Verdocs <mat-icon>expand_more</mat-icon>\n            </div>\n            <div class=\"header__sub-link realster\" *ngIf=\"currentOrigin !== 'rSecure'\">\n              <a [href]=\"rSecureFrontEnd + '/features'\" class=\"header__sub-link-nav main\">Features</a>\n              <a [href]=\"rSecureFrontEnd + '/features/builder'\" class=\"header__sub-link-nav\">Builder</a>\n              <a [href]=\"rSecureFrontEnd + '/features/documents'\" class=\"header__sub-link-nav\">Documents</a>\n              <a [href]=\"rSecureFrontEnd + '/features/attachments'\" class=\"header__sub-link-nav\">Collect Attachments</a>\n              <a [href]=\"rSecureFrontEnd + '/features/payments'\" class=\"header__sub-link-nav\">Collect Payments</a>\n              <a [href]=\"rSecureFrontEnd + '/features/export'\" class=\"header__sub-link-nav\">Export</a>\n              <a [href]=\"rSecureFrontEnd + '/features/audit-trail'\" class=\"header__sub-link-nav\">Tamper-Proof Audit\n                Trail</a>\n              <a [href]=\"rSecureFrontEnd + '/features/reminders'\" class=\"header__sub-link-nav\">Reminders</a>\n              <a [href]=\"rSecureFrontEnd + '/features/flexible-workflows'\" class=\"header__sub-link-nav\">Flexible\n                Workflows</a>\n              <a [href]=\"rSecureFrontEnd + '/features/team-management'\" class=\"header__sub-link-nav\">Team Management</a>\n              <hr class=\"header__navigation-divider realster\">\n              <a [href]=\"rSecureFrontEnd + '/security'\" class=\"header__sub-link-nav main\">Security</a>\n              <a href=\"https://verdocs.com/resources/category/customer-stories\"\n                class=\"header__sub-link-nav main\">Customer\n                Stories</a>\n            </div>\n            <div class=\"header__sub-link realster local\" *ngIf=\"currentOrigin === 'rSecure'\">\n              <a [routerLink]=\"'/features'\" class=\"header__sub-link-nav main\">Features</a>\n              <a [routerLink]=\"'/features/builder'\" class=\"header__sub-link-nav\">Builder</a>\n              <a [routerLink]=\"'/features/documents'\" class=\"header__sub-link-nav\">Documents</a>\n              <a [routerLink]=\"'/features/attachments'\" class=\"header__sub-link-nav\">Collect Attachments</a>\n              <a [routerLink]=\"'/features/payments'\" class=\"header__sub-link-nav\">Collect Payments</a>\n              <a [routerLink]=\"'/features/export'\" class=\"header__sub-link-nav\">Export</a>\n              <a [routerLink]=\"'/features/audit-trail'\" class=\"header__sub-link-nav\">Tamper-Proof Audit Trail</a>\n              <a [routerLink]=\"'/features/reminders'\" class=\"header__sub-link-nav\">Reminders</a>\n              <a [routerLink]=\"'/features/flexible-workflows'\" class=\"header__sub-link-nav\">Flexible Workflows</a>\n              <a [routerLink]=\"'/features/team-management'\" class=\"header__sub-link-nav\">Team Management</a>\n              <hr class=\"header__navigation-divider realster\">\n              <a [routerLink]=\"'/security'\" class=\"header__sub-link-nav main\">Security</a>\n              <a href=\"https://verdocs.com/resources/category/customer-stories\"\n                class=\"header__sub-link-nav main\">Customer\n                Stories</a>\n            </div>\n          </div>\n          <div class=\"header__link-wrapper pricing\">\n            <div class=\"header__link pricing\">Pricing <mat-icon>expand_more</mat-icon>\n            </div>\n            <div class=\"header__sub-link pricing\" *ngIf=\"currentOrigin !== 'rSecure'\">\n              <a [href]=\"rSecureFrontEnd + '/pricing'\" class=\"header__sub-link-nav main\">Plans</a>\n              <a [href]=\"rSecureFrontEnd + '/pricing/contact-sales'\" class=\"header__sub-link-nav\">Contact Sales</a>\n              <hr class=\"nav-header__navigation-divider pricing\">\n              <!-- <a [href]=\"rSecureFrontEnd + '/pricing/real-estate'\" class=\"nav-header__navigation-link\">Real Estate</a> -->\n              <a [href]=\"rSecureFrontEnd + '/pricing/nonprofit'\" class=\"header__sub-link-nav\">Nonprofit</a>\n            </div>\n            <div class=\"header__sub-link pricing local\" *ngIf=\"currentOrigin === 'rSecure'\">\n              <a [routerLink]=\"'/pricing'\" class=\"header__sub-link-nav main\">Plans</a>\n              <a [routerLink]=\"'/pricing/contact-sales'\" class=\"header__sub-link-nav\">Contact Sales</a>\n              <hr class=\"nav-header__navigation-divider pricing\">\n              <!-- <a [routerLink]=\"'/pricing/real-estate'\" class=\"nav-header__navigation-link\">Real Estate</a> -->\n              <a [routerLink]=\"'/pricing/nonprofit'\" class=\"header__sub-link-nav\">Nonprofit</a>\n            </div>\n          </div>\n          <a class=\"header__link\" href=\"https://verdocs.com/resources\">Resources</a>\n        </div>\n      </div>\n      <div class=\"header-util-mg\" fxFlex>\n        <verdocs-header-tools [mode]=\"mode\"></verdocs-header-tools>\n      </div>\n    </div>\n    <svg class=\"ghost\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n      <defs>\n        <linearGradient id=\"linear\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop offset=\"0%\" stop-color=\"#50BD80\" />\n          <stop offset=\"100%\" stop-color=\"#4856CA\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  </header>\n</div>",
                styles: ["app-header{position:fixed;top:0;left:0;width:100%}header{position:relative;z-index:99}.header__placeholder{background-color:#f6f8fa;height:56px}.header__nav{margin-left:8px;display:flex;align-items:center;height:64px;flex:1 1 0%;box-sizing:border-box}.header__nav .header__link,.header__nav .header__link:visited{display:flex;align-items:center;padding-left:8px;padding-right:8px;color:#fff;text-decoration:none;height:64px}.header__nav.preview .header__link,.header__nav.preview .header__link:visited{color:rgba(0,0,0,.87)}.header__nav.preview{position:absolute;top:0;left:378px}@media only screen and (max-width:854px){.header__nav{display:none}.header__app-version.preview{padding-left:6px}}@media only screen and (max-width:600px){.header__nav{height:56px}}.header__nav-authenticated,.header__nav-unauthenticated{position:relative;display:flex;align-items:center}.header__app-version{position:absolute;top:20px;font-size:10px;padding-left:12px}.header__app-version.preview{color:rgba(0,0,0,.54);padding-left:6px}@media only screen and (max-width:768px){.header__app-version.preview{padding-left:6px}.header__app-version{padding-left:0}}.header__link-wrapper{position:relative;overflow:visible}.header__link-wrapper:hover{cursor:pointer}.header__link-wrapper.realster{width:143.64px;max-width:143.64px}.header__link-wrapper.realster:hover .header__sub-link.realster{visibility:visible;opacity:1;height:466px;width:240px;background-color:#fff}.header__link-wrapper.realster:hover .header__sub-link.realster:after,.header__link-wrapper.realster:hover .header__sub-link.realster:before{content:'';position:absolute;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14);z-index:-1}.header__link-wrapper.realster:hover .header__sub-link.realster:before{height:100%;width:100%;left:0;top:0}.header__link-wrapper.realster:hover .header__sub-link.realster:after{content:'';width:143.64px;height:54px;top:-52px;left:0;background-color:#fff;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14)}.header__link-wrapper.realster:hover .header__sub-link.realster .header__sub-link-nav{visibility:visible;opacity:1;height:38px}.header__link-wrapper.pricing{width:92.52px;max-width:92.52px}.header__link-wrapper.pricing:hover .header__sub-link.pricing{visibility:visible;opacity:1;height:120px;width:160px;background-color:#fff}.header__link-wrapper.pricing:hover .header__sub-link.pricing:after,.header__link-wrapper.pricing:hover .header__sub-link.pricing:before{content:'';position:absolute;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14);z-index:-1}.header__link-wrapper.pricing:hover .header__sub-link.pricing:before{height:100%;width:100%;left:0;top:0}.header__link-wrapper.pricing:hover .header__sub-link.pricing:after{content:'';width:92.52px;height:54px;top:-52px;left:0;background-color:#fff;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14)}.header__link-wrapper.pricing:hover .header__sub-link.pricing .header__sub-link-nav{visibility:visible;opacity:1;height:38px}.header__sub-link{position:absolute;padding-top:8px;top:60px;left:0;visibility:hidden;opacity:0;height:0;transition:height .3s cubic-bezier(.17,.04,.03,.94);border-bottom-left-radius:2px;border-bottom-right-radius:2px}.header__sub-link:hover{visibility:visible;opacity:1;height:466px;width:240px;background-color:#fff}.header__sub-link:hover:after,.header__sub-link:hover:before{content:'';position:absolute;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14);z-index:-1}.header__sub-link:hover:before{height:100%;width:100%;left:0;top:0}.header__sub-link:hover:after{content:'';width:143.64px;height:54px;top:-52px;left:0;background-color:#fff;box-shadow:0 1px 8px 0 rgba(0,0,0,.2),0 3px 3px -2px rgba(0,0,0,.12),0 3px 4px 0 rgba(0,0,0,.14)}@media only screen and (max-width:600px){.header__sub-link{top:56px}}.header__sub-link-nav{padding:8px 16px;display:block;text-decoration:none;color:rgba(0,0,0,.87);visibility:none;opacity:0;transition:250ms cubic-bezier(.17,.04,.03,.94);transition-delay:50ms;height:0}.header__sub-link-nav.main{font-weight:600}.header__sub-link-nav:visited{color:rgba(0,0,0,.87)}.header-row{position:relative;height:56px;display:flex;align-items:center;place-content:center space-between;background-color:#33354c;color:#fff}.header-row.authenticated{background-color:#33354c;color:#fff}.header-row.preview,.header-row.preview.authenticated{background-color:transparent;color:rgba(0,0,0,.87)}@media only screen and (min-width:601px){.header-row{height:64px}}.header-util-wrapper{margin-left:12px;visibility:visible;opacity:1;transform:translateX(0);transition:.2s ease-out}.header-util-wrapper button:hover{background-color:rgba(0,0,0,.12)}@media only screen and (max-width:415px){.header-util-wrapper.search-active{visibility:hidden;opacity:0;width:0;transform:translateX(-200%)}}@media only screen and (min-width:855px){.header-util-wrapper{visibility:0;opacity:0;display:none!important}}.header__dynamic-mobile-menu{display:none}.header__dynamic-section.preview{position:absolute;top:8px;left:0;height:96px;max-width:370.5px;margin-left:8px;background-color:#f3f3f3;border-radius:2px;box-shadow:0 3px 14px 2px rgba(0,0,0,.12),0 8px 10px 1px rgba(0,0,0,.14),0 5px 5px -3px rgba(0,0,0,.2);transition:height .3s cubic-bezier(.17,.04,.03,.94)}.header__dynamic-section.preview.live-view{height:0}.header__dynamic-section.preview.expanded{max-width:386.5px;margin-left:0;top:0;height:100vh;height:calc(var(--vh,1vh) * 100)}.header__general-search{display:flex;align-items:center;height:48px;background-color:rgba(0,0,0,.15);border-radius:2px}.header__general-search.preview{background-color:transparent}@media only screen and (max-width:854px){.header__dynamic-mobile-menu{display:flex;padding-left:4px}.header__dynamic-section.preview{width:calc(100% - 16px);max-width:calc(100% - 16px)}.header__dynamic-section.preview.expanded{width:100%;max-width:100%}.header__general-search.extend{background-color:rgba(0,0,0,.15);width:calc(100vw - 16px);margin-left:-150px}.header__general-search{background-color:transparent}}.header__general-search-field{height:48px}.header__general-search-input{padding-left:8px;border:none;height:48px;font-size:16px;line-height:48px;outline:0;border-radius:2px;background-color:transparent;color:#fff;width:203px;transition:.3s cubic-bezier(.17,.04,.03,.94)}.header__general-search-input.stretch,.header__general-search-input:focus{width:340px}.header__general-search-input.landing{width:130px}.header__general-search-input.landing.stretch{width:340px}.header__general-search-input.preview,.header__general-search-input.preview.authenticated{background-color:transparent;color:rgba(0,0,0,.87)}.header__general-search-input.preview.authenticated::-webkit-input-placeholder,.header__general-search-input.preview::-webkit-input-placeholder{color:rgba(0,0,0,.54)}.header__general-search-input.preview.authenticated::-moz-placeholder,.header__general-search-input.preview::-moz-placeholder{color:rgba(0,0,0,.54)}.header__general-search-input.preview.authenticated::-ms-input-placeholder,.header__general-search-input.preview::-ms-input-placeholder{color:rgba(0,0,0,.54)}.header__general-search-input.preview.authenticated::placeholder,.header__general-search-input.preview::placeholder{color:rgba(0,0,0,.54)}.header__general-search-input.preview.authenticated.stretch,.header__general-search-input.preview.authenticated:focus,.header__general-search-input.preview.stretch,.header__general-search-input.preview:focus{width:203px}.header__general-search-input::-webkit-input-placeholder{color:rgba(255,255,255,.54)}.header__general-search-input::-moz-placeholder{color:rgba(255,255,255,.54)}.header__general-search-input::-ms-input-placeholder{color:rgba(255,255,255,.54)}.header__general-search-input::placeholder{color:rgba(255,255,255,.54)}@media only screen and (max-width:854px){.header__general-search-input{width:0;border:none}.header__general-search-input.stretch,.header__general-search-input:focus{width:calc(100vw - 72px)!important;background-color:#292d3c;z-index:100}.header__general-search-input.stretch.preview,.header__general-search-input:focus.preview{margin-left:-152px;background-color:#fff}}.header__general-search-spinner{margin-left:8px;display:flex;align-items:center;justify-content:center;height:40px;width:40px}.header__template-details{position:absolute;top:-120px;height:0;visibility:hidden;opacity:0;transition:.3s cubic-bezier(.17,.04,.03,.94)}.header__template-details.show{position:relative;top:0;visibility:visible;opacity:1;height:48px}.header__template-details.show.expanded{height:calc(100% - 64px)}.header__template-details-expansion{position:absolute;bottom:0;left:0;padding-left:8px;padding-right:8px;display:flex;height:48px;align-items:center;width:100%}.header__template-details-expansion.expanded{padding-left:16px;border-top:2px solid rgba(0,0,0,.12)}.header__template-details-expansion:hover{cursor:pointer}.header__template-details-arrow{transition:.3s cubic-bezier(.17,.04,.03,.94)}.header__template-details-arrow.expanded{transform:rotate(-180deg)}.header__template-details-text{font-size:12px;color:rgba(0,0,0,.54)}.header__template-detail-container{background-color:#fff;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.12),0 0 2px 0 rgba(0,0,0,.14);visibility:hidden;opacity:0;height:0;transition:.3s cubic-bezier(.17,.04,.03,.94);transition-delay:25ms}.header__template-detail-container.show{margin:8px 8px 0;padding:8px;visibility:visible;opacity:1;height:auto;max-height:calc(100% - 128px);overflow-y:auto}.header__template-detail-options{visibility:hidden;opacity:0;height:0;transition:.3s cubic-bezier(.17,.04,.03,.94);transition-delay:25ms}.header__template-detail-options.show{display:flex;padding:8px;visibility:visible;opacity:1;width:100%;height:auto}.header__template-detail-option-button{width:100%}.header__template-detail-option-button-wrapper{width:calc(41% - 32px);margin-right:8px}.header__template-detail-option-button-wrapper:last-child{margin-right:0}.header__template-detail-option-icon{margin-right:4px;color:rgba(0,0,0,.54)}.header__template-detail-option-text{text-transform:uppercase;color:rgba(0,0,0,.87)}.header__template-detail-wrapper{padding-left:8px;padding-right:8px}.header__template-detail-header{padding-top:8px;padding-bottom:8px;border-top:1px solid #d1d5da}.header__template-detail-header.no-top-border{border-top:none}.header__template-detail-title{font-size:12px;color:rgba(0,0,0,.87)}.header__template-detail-title.bold{padding-bottom:8px;font-weight:800;font-size:20px}.header__template-detail-title.bold h1{color:rgba(0,0,0,.87);padding-bottom:8px;font-weight:800;font-size:20px;margin:0}.header__template-detail-body{padding-bottom:8px}.header__template-detail-tags{display:flex;padding-top:2px;align-items:center}.header__template-detail-tag{margin-left:8px;padding-left:8px;padding-right:8px;height:20px;line-height:20px;background-color:rgba(55,71,79,.34);border-radius:2px;font-size:10px;color:#000}.header__template-detail-tag:first-child{margin-left:0}.header__template-detail-stats{display:flex;align-items:center;padding-top:8px;line-height:24px}.header__logo{display:inline-block;height:20px;width:77.5px;margin-right:16px;background-size:contain;background-position:center;background-repeat:no-repeat}@media only screen and (max-width:854px){.header__logo{margin:0}}.header__logo-wrapper{display:flex;height:48px;align-items:center}.header__logo-wrapper.preview,.header__logo-wrapper.preview.authenticated{border-radius:2px;background-color:#fff;box-shadow:0 1px 3px 0 rgba(0,0,0,.2),0 2px 1px -1px rgba(0,0,0,.12),0 1px 1px 0 rgba(0,0,0,.14);max-width:370.5px}.header__logo-wrapper.preview.authenticated.expanded,.header__logo-wrapper.preview.expanded{margin-top:8px;margin-left:8px;margin-right:8px;max-width:370.5px}.header__logo-wrapper.preview .header__logo,.header__logo-wrapper.preview.authenticated .header__logo{margin-left:6px}@media screen and (max-width:854px){.header__logo-wrapper.preview,.header__logo-wrapper.preview.authenticated{width:100%;max-width:100%}.header__logo-wrapper.preview.authenticated.expanded,.header__logo-wrapper.preview.expanded{width:calc(100% - 16px);max-width:calc(100% - 16px)}.header__logo-wrapper{justify-content:space-between;width:calc(100vw - 64px)}}@media screen and (min-width:855px){.header__logo{margin-left:12px}}.header__search-button{font-size:24px;margin-left:8px}.header__search-button.preview{color:rgba(0,0,0,.54)}.header__search-button.preview:hover{color:rgba(0,0,0,.87)}.header__search-verdocs-image{margin-left:2px;width:20px}.header__search-autocomplete{position:relative;padding-top:8px;max-height:515px}.header__search-autocomplete-option{display:flex;align-items:center;height:60px;line-height:60px}.header__search-autocomplete-wrapper{display:flex;align-items:center}.header__search-autocomplete-right{display:flex;align-items:center;width:40px;color:rgba(0,0,0,.54)}.header__search-autocomplete-middle{max-width:calc(100% - 80px)}.header__search-autocomplete-header{font-size:16px;color:rgba(0,0,0,.87);height:20px;line-height:20px}.header__search-autocomplete-subheader{font-size:14px;color:rgba(0,0,0,.54);height:20px;line-height:20px}.header__search-autocomplete-left{display:flex;align-items:center;width:40px;color:rgba(0,0,0,.54)}.header__title{position:relative;visibility:visible;opacity:1;padding-left:12px;margin-right:8px;width:calc(100% - 120px);text-align:left;font-size:20px;font-weight:500;text-overflow:ellipsis;text-decoration:none;white-space:nowrap;overflow:visible;color:#fff;transition:.2s ease-out}@media only screen and (max-width:415px){.header__title.search-active{visibility:hidden;width:0;opacity:0;transform:translateX(-200%)}}@media only screen and (max-width:854px){.header__title{margin:0 auto;width:auto;padding-left:0;padding-right:0;transform:translateX(8px)}}.header__title-input{border:none;outline:0;max-width:500px;width:100%;font-size:20px;font-weight:500;background:0 0;color:#fff}.header__title-input:not(:focus){text-overflow:ellipsis}.header__counter-envelopes,.header__counter-stars{margin-right:8px;display:flex;align-items:center}.header__counter-icon{margin-right:4px;color:rgba(0,0,0,.54)}.header__counter-number{margin-right:6px;font-size:16px;line-height:24px;height:24px;color:rgba(0,0,0,.87)}.header-util-mg{margin-right:12px;font-size:1.125rem;font-weight:300;height:64px;flex:1 1 0%}.header-util-mg button{min-width:48px;min-height:48px;background-color:transparent}@media screen and (max-width:768px){.header-util-mg{flex:none!important}}@media only screen and (max-width:600px){.header-util-mg{margin-right:0}.header-user__button{display:none}}.header__app{float:left;width:48px;height:48px;padding-top:5px}.header__notification{float:left;width:48px;height:48px;margin-top:-8px;margin-right:8px}.header-user__button{float:left;height:48px;width:48px;border:none;padding-top:5px;border-radius:50%}.header-user__button:hover{cursor:pointer}.header__nav-back,.header__nav-settings{line-height:40px!important;vertical-align:middle}.header-nav-route{padding-top:10px;padding-bottom:10px;color:#fff;text-align:center;text-transform:uppercase;font-size:1.125em;font-weight:400}.header-nav-filter{margin-right:30px}.header-nav-menu{margin-left:30px}.header__recipients{text-align:right}.header__template-status{position:absolute;bottom:4px;left:56px;font-size:12px;margin-left:8px;color:#fff}@media only screen and (max-width:675px){.header__title{padding-left:0}.header__recipients{max-width:195px!important;min-width:150px!important}.header__template-status{left:45px}}@media only screen and (max-width:360px){.header__template-status{display:none}}"]
            }] }
];
/** @nocollapse */
HeaderComponent.ctorParameters = () => [
    { type: VerdocsHeaderService },
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: VerdocsAuthService },
    { type: TemplatesGuardService },
    { type: Router },
    { type: ChangeDetectorRef },
    { type: Compiler },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
HeaderComponent.propDecorators = {
    currentOrigin: [{ type: Input }],
    header: [{ type: ViewChild, args: ['headerContainer', { static: false },] }],
    searchBar: [{ type: ViewChild, args: ['search', { static: false },] }],
    templateTitleInput: [{ type: ViewChild, args: ['templateTitle', { static: false },] }],
    previewInput: [{ type: ViewChild, args: ['previewInput', { static: false },] }],
    generalInput: [{ type: ViewChild, args: ['generalInput', { static: false },] }]
};
if (false) {
    /** @type {?} */
    HeaderComponent.prototype.pageLoading;
    /** @type {?} */
    HeaderComponent.prototype.connections;
    /** @type {?} */
    HeaderComponent.prototype.title;
    /** @type {?} */
    HeaderComponent.prototype.isAuthenticated;
    /** @type {?} */
    HeaderComponent.prototype.headerTitle;
    /** @type {?} */
    HeaderComponent.prototype.mode;
    /** @type {?} */
    HeaderComponent.prototype.searchActive;
    /** @type {?} */
    HeaderComponent.prototype.templateName;
    /** @type {?} */
    HeaderComponent.prototype.newTemplateName;
    /** @type {?} */
    HeaderComponent.prototype.saveStatus;
    /** @type {?} */
    HeaderComponent.prototype.notifications;
    /** @type {?} */
    HeaderComponent.prototype.loading;
    /** @type {?} */
    HeaderComponent.prototype.myAccountUrl;
    /** @type {?} */
    HeaderComponent.prototype.termsUrl;
    /** @type {?} */
    HeaderComponent.prototype.privacyUrl;
    /** @type {?} */
    HeaderComponent.prototype.newProfile;
    /** @type {?} */
    HeaderComponent.prototype.organization_id;
    /** @type {?} */
    HeaderComponent.prototype.emailVerified;
    /** @type {?} */
    HeaderComponent.prototype.organizationImgSrc;
    /** @type {?} */
    HeaderComponent.prototype.csvBlob;
    /** @type {?} */
    HeaderComponent.prototype.templateDetailsExpanded;
    /** @type {?} */
    HeaderComponent.prototype.template;
    /** @type {?} */
    HeaderComponent.prototype.isSearching;
    /** @type {?} */
    HeaderComponent.prototype.envelopeResult;
    /** @type {?} */
    HeaderComponent.prototype.templateResult;
    /** @type {?} */
    HeaderComponent.prototype.currentProfile;
    /** @type {?} */
    HeaderComponent.prototype.inputFocused;
    /** @type {?} */
    HeaderComponent.prototype.manageLink;
    /** @type {?} */
    HeaderComponent.prototype.templatesLink;
    /** @type {?} */
    HeaderComponent.prototype.rSecureFrontEnd;
    /** @type {?} */
    HeaderComponent.prototype.rFormFrontEnd;
    /** @type {?} */
    HeaderComponent.prototype.isLiveView;
    /** @type {?} */
    HeaderComponent.prototype.verdocs_url;
    /** @type {?} */
    HeaderComponent.prototype.image_url;
    /** @type {?} */
    HeaderComponent.prototype.isAtOriginalOrigin;
    /** @type {?} */
    HeaderComponent.prototype.app_version;
    /** @type {?} */
    HeaderComponent.prototype.currentAt;
    /** @type {?} */
    HeaderComponent.prototype.currentOrigin;
    /** @type {?} */
    HeaderComponent.prototype.header;
    /** @type {?} */
    HeaderComponent.prototype.searchBar;
    /** @type {?} */
    HeaderComponent.prototype.templateTitleInput;
    /** @type {?} */
    HeaderComponent.prototype.previewInput;
    /** @type {?} */
    HeaderComponent.prototype.generalInput;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.sidenavOpen;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype._canStar;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype._canCreate;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype._canEdit;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype._userStarred;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.metaDataSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.titleSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.titleInputSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.titleKeyDownSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.templateNameSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.templateSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.saveStatusSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.profileLoadingSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.userDataSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.modeSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.previewInputSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.generalInputSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.navigationEventSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.csvBlobSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.inputTimer;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.origin;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.verdocsHeaderService;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.vTokenStateService;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.vTokenObjectService;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.vAuthService;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.templateGuard;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.compiler;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    HeaderComponent.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HeaderToolsComponent {
    /**
     * @param {?} verdocsStateService
     * @param {?} verdocsObjectService
     * @param {?} verdocsAuthGuardService
     * @param {?} organizationDialogService
     * @param {?} notificationsService
     * @param {?} verdocsHeaderService
     * @param {?} snackbar
     * @param {?} injector
     * @param {?} router
     * @param {?} platform
     */
    constructor(verdocsStateService, verdocsObjectService, verdocsAuthGuardService, organizationDialogService, notificationsService, verdocsHeaderService, snackbar, injector, router, platform) {
        this.verdocsStateService = verdocsStateService;
        this.verdocsObjectService = verdocsObjectService;
        this.verdocsAuthGuardService = verdocsAuthGuardService;
        this.organizationDialogService = organizationDialogService;
        this.notificationsService = notificationsService;
        this.verdocsHeaderService = verdocsHeaderService;
        this.snackbar = snackbar;
        this.injector = injector;
        this.router = router;
        this.platform = platform;
        this.apps = [];
        this.notifications = [];
        this.profileLoading = false;
        this.hasProfile = false;
        this.profileOverride = {
            top: 56,
            right: 20
        };
        this.sidenav = false;
        this.type = 'default';
        this.notificationsSubscription = new Subscription();
        this.profileLoadingSubscription = new Subscription();
        this.tokenConfig = this.injector.get(connectionConfigToken);
        this.myAccountUrl = this.tokenConfig.rAccount_frontend_url;
        this.rSecureUrl = this.tokenConfig.rSecure_frontend_url;
        this.rFormUrl = this.tokenConfig.rForm_frontend_url;
        this.termsUrl = this.tokenConfig.rSecure_frontend_url + '/terms';
        this.privacyUrl = this.tokenConfig.rSecure_frontend_url + '/privacy';
        this.loginUrl = this.tokenConfig.rSecure_frontend_url + '/login';
        this.signupUrl = this.tokenConfig.rSecure_frontend_url + '/signup';
        this.organizationImgSrc = `${this.tokenConfig.rAccount_frontend_url}/assets/organization/select-profile.png`;
        this.verdocs_logo_url = `${this.rFormUrl}/assets/blue-logo.svg`;
        this.origin = this.tokenConfig.origin;
        this.isAtOriginalOrigin = this.verdocsHeaderService.getAtOrigin(this.origin);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkEmailVerification();
        this.hasProfile = this.verdocsObjectService.getProfile();
        this.verdocsHeaderService.userProfileSubject.subscribe((/**
         * @param {?} profiles
         * @return {?}
         */
        profiles => {
            this.profiles = this.verdocsHeaderService.getProfileCollection(profiles);
            this.verdocsHeaderService.profilesSubject.next(profiles);
            /** @type {?} */
            const index = findIndex(profiles, { organization_id: this.organization_id });
            if (index >= 0) {
                this.newProfile = profiles[index];
                this.organizationDialogService.setNewProfile(this.newProfile);
            }
        }));
        this.notificationsSubscription = this.notificationsService.Notificatations().subscribe((/**
         * @param {?} notifications
         * @return {?}
         */
        notifications => {
            this.notifications = notifications;
        }));
        this.profileLoadingSubscription = this.verdocsHeaderService.profileLoadingSubject.subscribe((/**
         * @param {?} status
         * @return {?}
         */
        status => {
            this.profileLoading = status;
        }));
        if (!this.profiles && this.hasProfile) {
            this.verdocsHeaderService.getProfiles();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (isPlatformBrowser(this.platform)) {
            if (typeof window !== 'undefined') {
                if (window.innerWidth > 600) {
                    this.profileOverride.top = 60;
                }
                else {
                    this.profileOverride.top = 56;
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.notificationsSubscription.unsubscribe();
        this.profileLoadingSubscription.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    checkEmailVerification() {
        this.emailVerified = this.verdocsStateService.getEmailVerification();
        this.organizationDialogService.setEmailVerified(this.emailVerified);
    }
    /**
     * @return {?}
     */
    get admin_url() {
        if (this.hasAccessToAdmin()) {
            return `${this.tokenConfig.rAccount_frontend_url}/admin`;
        }
        return undefined;
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    removeNotification(notification) {
        this.notificationsService.dismissNotification(notification);
    }
    /**
     * @return {?}
     */
    signOut() {
        this.verdocsAuthGuardService.signOut();
    }
    /**
     * @return {?}
     */
    signIn() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/login?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
    /**
     * @return {?}
     */
    signUp() {
        if (window) {
            window.location.href = `${this.rSecureUrl}/signup?redirect_url=${this.rFormUrl + this.router.url}`;
        }
    }
    /**
     * @param {?} profile_id
     * @return {?}
     */
    switch(profile_id) {
        this.verdocsHeaderService.switchProfile(profile_id).then((/**
         * @return {?}
         */
        () => {
            window.location.href = `${this.tokenConfig.rForm_frontend_url}`;
        }));
    }
    /**
     * @return {?}
     */
    switchAndGoToAdmin() {
        if (this.newProfile) {
            this.verdocsHeaderService.switchProfile(this.newProfile.id).then((/**
             * @param {?} profile
             * @return {?}
             */
            profile => {
                window.location.href = `${this.myAccountUrl}/admin/profile/${this.newProfile.id}`;
            }));
        }
    }
    /**
     * @param {?=} sendMessage
     * @return {?}
     */
    updateTokenStatus(sendMessage) {
        this.createSnackbar('Checking email verification', 'OK');
        this.verdocsHeaderService.updateTokens(sendMessage).then((/**
         * @return {?}
         */
        () => {
            this.emailVerified = this.verdocsStateService.getEmailVerification();
            this.organizationDialogService.setEmailVerified(this.emailVerified);
        }));
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.verdocsHeaderService.resendEmailVerification();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    checkNameValidity(name) {
        return this.verdocsHeaderService.getNameValidity(name)
            .then((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            this.organizationDialogService.setNameValidation(result);
        }));
    }
    /**
     * @param {?} organizationGroup
     * @return {?}
     */
    createOrganization(organizationGroup) {
        this.verdocsHeaderService.createOrganization(organizationGroup)
            .then((/**
         * @param {?} organization
         * @return {?}
         */
        (organization) => __awaiter(this, void 0, void 0, function* () {
            this.organization_id = organization['id'];
            yield this.verdocsHeaderService.getAccountData();
            this.createSnackbar('Organization created', null);
        })));
    }
    /**
     * @return {?}
     */
    switchProfile() {
        this.switch(this.newProfile.id);
    }
    /**
     * @param {?} clientName
     * @return {?}
     */
    checkAccess(clientName) {
        return this.verdocsStateService.hasAccessTo(clientName + '_Realster');
    }
    /**
     * @param {?} clientName
     * @return {?}
     */
    jumpTo(clientName) {
        window.location.href = this.tokenConfig[clientName + '_frontend_url'];
    }
    /**
     * @private
     * @return {?}
     */
    hasAccessToAdmin() {
        /** @type {?} */
        const roles = this.verdocsStateService.getRAccountRoles();
        return includes(roles, 'owner') || includes(roles, 'admin');
    }
    /**
     * @param {?} message
     * @param {?=} buttonTitle
     * @return {?}
     */
    createSnackbar(message, buttonTitle) {
        if (!buttonTitle) {
            buttonTitle = null;
        }
        /** @type {?} */
        let snackbarConfig;
        if (window.innerWidth >= 920) {
            snackbarConfig = {
                verticalPosition: 'bottom',
                horizontalPosition: 'left',
                duration: 5000
            };
        }
        else {
            snackbarConfig = {
                verticalPosition: 'top',
                duration: 5000
            };
        }
        this.snackbar.open(message, buttonTitle, snackbarConfig);
    }
    /**
     * @return {?}
     */
    lunchElevio() {
        window['lunchElevio']();
    }
    /**
     * @return {?}
     */
    lunchIntercom() {
        window['lunchIntercom']();
    }
}
HeaderToolsComponent.decorators = [
    { type: Component, args: [{
                selector: 'verdocs-header-tools',
                template: "<div class=\"verdocs__wrapper\" *ngIf=\"hasProfile\" [ngClass]=\"{sidenav: sidenav}\">\n  <div class=\"verdocs__chat\">\n    <button mat-icon-button *ngIf=\"!sidenav\" (click)=\"lunchIntercom()\" matTooltip=\"Live Chat\">\n      <mat-icon>forum</mat-icon>\n    </button>\n  </div>\n  <div class=\"verdocs__help\">\n    <button mat-icon-button *ngIf=\"!sidenav\" (click)=\"lunchElevio()\" matTooltip=\"Help Center\">\n      <mat-icon>help</mat-icon>\n    </button>\n  </div>\n  <div class=\"verdocs__notification\" *ngIf=\"!sidenav\" matTooltip=\"Notifications\">\n    <verdocs-notifications [notifications]=\"notifications\" (removeNotification)=\"removeNotification($event)\"\n      [verdocs_logo_url]=\"verdocs_logo_url\"></verdocs-notifications>\n  </div>\n  <div class=\"verdocs__account\" *ngIf=\"profiles\"\n    [ngClass]=\"{header: !sidenav, sidenav: sidenav, default: type === 'default'}\" matTooltip=\"My Account\">\n    <verdocs-profiles [currentProfile]=\"profiles.currentProfile()\" [override]=\"profileOverride\" [admin_url]=\"admin_url\">\n      <verdocs-account-dialog [profiles]=\"profiles\" [termsUrl]=\"termsUrl\" [privacyUrl]=\"privacyUrl\"\n        [accountUrl]=\"myAccountUrl\" (signOutEvent)=\"signOut()\" [admin_url]=\"admin_url\">\n        <verdocs-account-profile [profiles]=\"profiles\" [loading]=\"profileLoading\"\n          [organizationImgSrc]=\"organizationImgSrc\" (switchEvent)=\"switch($event)\"\n          (switchAndRedirectEvent)=\"switchAndGoToAdmin()\" (getEmailVerificationEvent)=\"updateTokenStatus()\"\n          (resendEmailVerificationEvent)=\"resendEmailVerification()\" (getNameValidityEvent)=\"checkNameValidity($event)\"\n          (createOrganizationEvent)=\"createOrganization($event)\" (switchProfileEvent)=\"switchProfile()\">\n        </verdocs-account-profile>\n      </verdocs-account-dialog>\n    </verdocs-profiles>\n  </div>\n</div>\n<div class=\"verdocs__wrapper\" *ngIf=\"!hasProfile\">\n  <a class=\"verdocs__signin-button\" mat-button [routerLink]=\"'/login'\"\n    *ngIf=\"origin === 'rSecure' && isAtOriginalOrigin\" [ngClass]=\"{preview: mode === 'preview'}\">Sign in</a>\n  <a class=\"verdocs__signup-button\" mat-button [routerLink]=\"'/signup'\"\n    *ngIf=\"origin === 'rSecure' && isAtOriginalOrigin\" [ngClass]=\"{preview: mode === 'preview'}\">Sign up</a>\n  <button class=\"verdocs__signin-button\" mat-button *ngIf=\"origin !== 'rSecure'\"\n    [ngClass]=\"{preview: mode === 'preview'}\" (click)=\"signIn()\">Sign in</button>\n  <button class=\"verdocs__signup-button\" mat-button *ngIf=\"origin !== 'rSecure'\"\n    [ngClass]=\"{preview: mode === 'preview'}\" (click)=\"signUp()\">Sign up</button>\n</div>",
                styles: [".verdocs__wrapper{height:64px;flex-direction:row;box-sizing:border-box;display:flex;justify-content:flex-end;align-items:center}.verdocs__notification{margin-top:0;line-height:64px}@media only screen and (max-width:600px){.verdocs__wrapper{height:56px}.verdocs__notification{line-height:56px}}.verdocs__chat{line-height:64px;margin-right:7px}.verdocs__chat button{height:40px;min-width:40px}.verdocs__help{line-height:64px;margin-right:7px}.verdocs__help button{height:40px;min-width:40px}.verdocs__app{line-height:64px}.verdocs__app-button{padding:0;height:48px;min-width:48px;border-radius:24px}.verdocs__app.sidenav{margin-right:4px}@media only screen and (max-width:600px){.verdocs__app{line-height:56px}}.verdocs__account{line-height:64px}.verdocs__account-button{background-color:#9b9b9b;color:#fff}@media only screen and (max-width:854px){.verdocs__wrapper{display:none}.verdocs__wrapper.sidenav{display:flex}.verdocs__account.header.default,.verdocs__app.header.default,.verdocs__chat,.verdocs__help,.verdocs__notification{display:none}}@media only screen and (min-width:855px){.verdocs__account.sidenav,.verdocs__app.sidenav{display:none}}@media only screen and (max-width:600px){.verdocs__account{line-height:56px}}.verdocs__account,.verdocs__app,.verdocs__chat,.verdocs__notification{float:left}.verdocs__signin-button,.verdocs__signup-button{padding-left:8px;padding-right:8px;border-radius:2px;height:36px;background-color:#33354c;color:#fff;min-width:60px}.verdocs__signin-button.preview,.verdocs__signup-button.preview{background-color:transparent;color:rgba(0,0,0,.87)}.verdocs__signup-button{margin-left:8px;border:.5px solid #fff}.verdocs__signup-button.preview{border:.5px solid rgba(0,0,0,.87)}.menu__container{width:320px;height:248px}.menu__container .mat-menu-content{padding:0}.menu__container.mat-menu-panel{padding:8px}.menu__item{padding:0!important;margin-bottom:8px!important;border:none;min-width:64px!important;border-radius:50%!important}.menu__item-wrapper{padding:12px;float:left;text-align:center}.menu__item-wrapper.my-account{padding-left:6.5px;padding-right:6.5px}.menu__item img{vertical-align:middle}.menu__icon{width:40px}.menu__icon.rForm{width:30px}.menu__background{background-color:#495057;width:64px;height:64px;line-height:64px;border-radius:50%}.menu__title{font-size:14px;text-align:center;line-height:20px}.menu__account-container{width:270px;height:228px}"]
            }] }
];
/** @nocollapse */
HeaderToolsComponent.ctorParameters = () => [
    { type: VerdocsStateService },
    { type: VerdocsTokenObjectService },
    { type: VerdocsAuthGuardService },
    { type: OrganizationDialogService },
    { type: NotificationService },
    { type: VerdocsHeaderService },
    { type: MatSnackBar },
    { type: Injector },
    { type: Router },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
HeaderToolsComponent.propDecorators = {
    profileOverride: [{ type: Input }],
    sidenav: [{ type: Input }],
    type: [{ type: Input }],
    mode: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HeaderToolsComponent.prototype.tokenConfig;
    /** @type {?} */
    HeaderToolsComponent.prototype.apps;
    /** @type {?} */
    HeaderToolsComponent.prototype.emailVerified;
    /** @type {?} */
    HeaderToolsComponent.prototype.notifications;
    /** @type {?} */
    HeaderToolsComponent.prototype.profiles;
    /** @type {?} */
    HeaderToolsComponent.prototype.newProfile;
    /** @type {?} */
    HeaderToolsComponent.prototype.organization_id;
    /** @type {?} */
    HeaderToolsComponent.prototype.myAccountUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.rSecureUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.rFormUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.termsUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.privacyUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.loginUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.signupUrl;
    /** @type {?} */
    HeaderToolsComponent.prototype.organizationImgSrc;
    /** @type {?} */
    HeaderToolsComponent.prototype.profileLoading;
    /** @type {?} */
    HeaderToolsComponent.prototype.hasProfile;
    /** @type {?} */
    HeaderToolsComponent.prototype.origin;
    /** @type {?} */
    HeaderToolsComponent.prototype.isAtOriginalOrigin;
    /** @type {?} */
    HeaderToolsComponent.prototype.verdocs_logo_url;
    /** @type {?} */
    HeaderToolsComponent.prototype.profileOverride;
    /** @type {?} */
    HeaderToolsComponent.prototype.sidenav;
    /** @type {?} */
    HeaderToolsComponent.prototype.type;
    /** @type {?} */
    HeaderToolsComponent.prototype.mode;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.notificationsSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.profileLoadingSubscription;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.verdocsStateService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.verdocsObjectService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.verdocsAuthGuardService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.organizationDialogService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.notificationsService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.verdocsHeaderService;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.snackbar;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    HeaderToolsComponent.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function connectionConfig() { }
if (false) {
    /** @type {?} */
    connectionConfig.prototype.rForm_backend_url;
    /** @type {?} */
    connectionConfig.prototype.rForm_frontend_url;
    /** @type {?} */
    connectionConfig.prototype.rSecure_frontend_url;
    /** @type {?} */
    connectionConfig.prototype.rSecure_backend_url;
    /** @type {?} */
    connectionConfig.prototype.rAccount_frontend_url;
    /** @type {?} */
    connectionConfig.prototype.rAccount_backend_url;
    /** @type {?} */
    connectionConfig.prototype.rNotification_backend_url;
    /** @type {?|undefined} */
    connectionConfig.prototype.origin;
    /** @type {?|undefined} */
    connectionConfig.prototype.app_version;
}
/** @type {?} */
const connectionConfigToken = new InjectionToken('connectionConfig');
class HeaderModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static initVerdocsHeader(config) {
        return {
            ngModule: HeaderModule,
            providers: [
                {
                    provide: connectionConfigToken,
                    useValue: config
                }
            ]
        };
    }
}
HeaderModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    HeaderComponent,
                    RecipientEditorComponent,
                    TemplateSourceComponent,
                    VisibilityEditorComponent,
                    HeaderToolsComponent,
                    FourOhOneDialog
                ],
                entryComponents: [
                    FourOhOneDialog
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    RouterModule,
                    ReactiveFormsModule,
                    MatSnackBarModule,
                    MatIconModule,
                    MatAutocompleteModule,
                    MatButtonModule,
                    MatSelectModule,
                    MatDialogModule,
                    MatChipsModule,
                    MatProgressSpinnerModule,
                    MatRadioModule,
                    MatTooltipModule,
                    NotificationsModule,
                    ProfilesModule,
                    TokensModule
                ],
                providers: [
                    TemplatesGuardService,
                    VerdocsHeaderService
                ],
                exports: [
                    HeaderComponent,
                    RecipientEditorComponent,
                    TemplateSourceComponent,
                    VisibilityEditorComponent,
                    HeaderToolsComponent,
                    FourOhOneDialog
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FourOhOneDialog, HeaderComponent, HeaderModule, HeaderToolsComponent, RecipientEditorComponent, SortOptions, TemplateActions, TemplatePermissions, TemplateSenderTypes, TemplateSortOptions, TemplateSourceComponent, TemplatesGuardService, VerdocsHeaderService, VisibilityEditorComponent, connectionConfigToken };
//# sourceMappingURL=verdocs-header.js.map
