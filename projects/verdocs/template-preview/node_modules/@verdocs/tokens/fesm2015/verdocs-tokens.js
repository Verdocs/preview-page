import { Injectable, Injector, Inject, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, INJECTOR, forwardRef, Component, EventEmitter, Directive, Output, Input, InjectionToken, NgModule } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { CookieService, CookieModule } from 'ngx-cookie';
import { JwtHelperService } from '@auth0/angular-jwt';
import { ReplaySubject, interval, throwError, Subscription } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { ActivatedRoute } from '@angular/router';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatButtonModule, MatDialogModule } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function EmailVerificationData() { }
if (false) {
    /** @type {?} */
    EmailVerificationData.prototype.emailAddress;
    /** @type {?} */
    EmailVerificationData.prototype.resendEmailVerification;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const helper = new JwtHelperService();
class VerdocsStateService {
    /**
     * @param {?} cookieService
     * @param {?} http
     * @param {?} injector
     * @param {?} platform
     */
    constructor(cookieService, http, injector, platform) {
        this.cookieService = cookieService;
        this.http = http;
        this.injector = injector;
        this.platform = platform;
        this.timerActive = false;
        this.cookieConfig = {
            path: '/',
            domain: 'localhost',
            secure: false
        };
        this.accessList = [];
        this.decodedIdTokenSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(VTokenConfigToken);
        this.domain = this.tokenConfig.domain;
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        if (this.tokenConfig.loginURL) {
            this.loginURL = this.tokenConfig.loginURL;
        }
        if (this.tokenConfig.cookieName) {
            this.cookieName = this.tokenConfig.cookieName;
        }
        else if (this.tokenConfig.origin) {
            this.cookieName = this.tokenConfig.origin + VerdocsStateService.COOKIE_NAME_SUFFIX;
        }
        this.production = this.tokenConfig.production || false;
        this.cookieConfig.domain = this.getDomain();
        if (this.tokenConfig.production) {
            this.cookieConfig.secure = true;
        }
        this.getAccessList();
    }
    /**
     * @return {?}
     */
    getDomain() {
        if (this.production || this.domain !== 'localhost') {
            /** @type {?} */
            const address = this.domain.split('.');
            return '.' + address[address.length - 2] + '.' + address[address.length - 1];
        }
        else {
            return 'localhost';
        }
    }
    /**
     * @return {?}
     */
    watchAuthentication() {
        if (isPlatformBrowser(this.platform)) {
            if (!this.timerActive) {
                this.timerActive = true;
                this.authenticationWatcher = interval(15000).subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.getAccessList();
                    if ((this.accessList.indexOf(VerdocsStateService.RACCOUNT_COOKIE_NAME) === -1 || this.accessList.indexOf(this.cookieName) === -1)) {
                        this.cookieService.removeAll();
                        window.location.href = this.getLoginURL();
                    }
                    ;
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    endWatchAuthentication() {
        this.authenticationWatcher.unsubscribe();
    }
    /**
     * @return {?}
     */
    getAccountCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie_prefix = this.tokenConfig.account_name || 'rAccount';
            /** @type {?} */
            const cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            const cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    }
    /**
     * @return {?}
     */
    getVerdocsCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie_prefix = this.tokenConfig.verdocs_name || 'rForm';
            /** @type {?} */
            const cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            const cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    }
    /**
     * @return {?}
     */
    getAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            if (this.cookieName) {
                /** @type {?} */
                const cookie = this.getOtherCookieObject(this.cookieName);
                if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                    this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    return this.accessToken;
                }
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    getVerdocsAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getVerdocsCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    }
    /**
     * @return {?}
     */
    getAccountAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    }
    /**
     * @return {?}
     */
    getIDToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                this.idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                this.decodedIdTokenSubject.next(helper.decodeToken(this.idToken));
                return this.idToken;
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    getLoginURL() {
        return this.loginURL;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setTimer(state) {
        this.timerActive = state;
    }
    /**
     * @return {?}
     */
    getUserId() {
        /** @type {?} */
        const idToken = this.getIDToken();
        if (!!idToken) {
            /** @type {?} */
            const idTokenContent = this.tokenToObject(idToken);
            if (idTokenContent['sub']) {
                return idTokenContent['sub'].replace('auth0|', '');
            }
            return null;
        }
        return;
    }
    /**
     * @param {?=} appName
     * @return {?}
     */
    getAppUserId(appName) {
        if (isPlatformBrowser(this.platform)) {
            if (!appName) {
                appName = VerdocsStateService.RACCOUNT_COOKIE_NAME;
            }
            /** @type {?} */
            const cookie = this.cookieService.getObject(appName);
            /** @type {?} */
            let idToken;
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                /** @type {?} */
                const idTokenContent = this.tokenToObject(idToken);
                if (idTokenContent['sub']) {
                    return idTokenContent['sub'].replace('auth0|', '');
                }
            }
            return null;
        }
        return;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    updateCookie(key, value, cookieName) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cName = cookieName ? cookieName : this.cookieName;
            this.cookieConfig.domain = this.getDomain();
            if (window && window.location && location.protocol === 'https:') {
                this.cookieConfig.secure = true;
            }
            /** @type {?} */
            let rAccountCookie = this.getrAccountCookieObject();
            /** @type {?} */
            let otherCookie = this.getOtherCookieObject(cName);
            /** @type {?} */
            let cookie;
            if (!!cName && !!key && !!value) {
                if (cName === VerdocsStateService.RACCOUNT_COOKIE_NAME && !!rAccountCookie) {
                    rAccountCookie[key] = value;
                    cookie = rAccountCookie;
                }
                else if (!!otherCookie) {
                    otherCookie[key] = value;
                    cookie = otherCookie;
                }
                this.cookieService.putObject(cName, cookie, this.cookieConfig);
            }
        }
    }
    /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    updateTokens(rSecureBackend) {
        if (isPlatformBrowser(this.platform)) {
            return this.getTokens(rSecureBackend).pipe(map((/**
             * @param {?} tokens
             * @return {?}
             */
            (tokens) => {
                for (let x = 0; x < tokens.length; x++) {
                    if (tokens[x].clientName === 'rAccount') {
                        this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, tokens[x].idToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        this.decodedIdTokenSubject.next(helper.decodeToken(tokens[x].idToken));
                    }
                    this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, tokens[x].accessToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
                return tokens;
            })));
        }
    }
    /**
     * @return {?}
     */
    hasCookie() {
        return !!this.cookieService.get(this.cookieName);
    }
    /**
     * @return {?}
     */
    getAccessList() {
        if (isPlatformBrowser(this.platform)) {
            this.getAllCookies();
            this.accessList = [];
            for (const cookie in this.cookies) {
                if (cookie.indexOf(VerdocsStateService.COOKIE_NAME_SUFFIX) !== -1) {
                    this.accessList.push(cookie);
                }
            }
            return this.accessList;
        }
    }
    /**
     * @return {?}
     */
    getEmailVerification() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const idToken = this.getIDToken();
            if (!!idToken) {
                /** @type {?} */
                const idTokenContent = this.tokenToObject(idToken);
                return idTokenContent['email_verified'];
            }
            return false;
        }
    }
    /**
     * @param {?} clientName
     * @return {?}
     */
    hasAccessTo(clientName) {
        return this.accessList.indexOf(clientName) !== -1;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    storeOtherCookie(key, value) {
        if (isPlatformBrowser(this.platform)) {
            this.setCookie(key, value);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getOtherCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (key) {
                    /** @type {?} */
                    const value = this.cookieService.getObject(key);
                    return value;
                }
                else {
                    return null;
                }
            }
            catch (err) {
                console.error('Cannot return cookie:', err);
                return null;
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getRCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            return this.cookieService.get(key);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getOtherCookieObject(key) {
        try {
            if (!!key) {
                if (isPlatformBrowser(this.platform)) {
                    return this.cookieService.getObject(key);
                }
            }
            return null;
        }
        catch (err) {
            if (key !== VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME) {
                console.error('Cannot get cookie: ', err);
            }
            return null;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeRCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.remove(key, this.cookieConfig);
        }
    }
    /**
     * @return {?}
     */
    removeRCookies() {
        if (isPlatformBrowser(this.platform)) {
            if (this.accessList.length > 0) {
                for (const key of this.accessList) {
                    this.removeRCookie(key);
                }
            }
            ;
        }
    }
    /**
     * @return {?}
     */
    removeIntercomCookie() {
        if (isPlatformBrowser(this.platform)) {
            for (const cookie in this.cookies) {
                if (cookie.indexOf('intercom') !== -1) {
                    this.removeRCookie(cookie);
                }
            }
        }
    }
    /**
     * @param {?} tokens
     * @return {?}
     */
    setTokens(tokens) {
        if (isPlatformBrowser(this.platform)) {
            if (tokens && tokens.length > 0) {
                for (const token of tokens) {
                    if (token.clientName === 'rAccount') {
                        this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, token.idToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        this.decodedIdTokenSubject.next(helper.decodeToken(token.idToken));
                    }
                    this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, token.accessToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getrAccountCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (this.cookieName && this.cookieService.get(VerdocsStateService.RACCOUNT_COOKIE_NAME)) {
                    /** @type {?} */
                    const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
                    return cookie;
                }
                return null;
            }
            catch (err) {
                return null;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getAllCookies() {
        if (isPlatformBrowser(this.platform)) {
            this.cookies = this.cookieService.getAll();
        }
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    tokenToObject(token) {
        if (token) {
            /** @type {?} */
            const base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    }
    /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    setCookie(cookieName, cookieValue) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.put(cookieName, cookieValue, this.cookieConfig);
        }
    }
    /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    getTokens(rSecureBackend) {
        return this.http.get(rSecureBackend + '/token');
    }
    /**
     * @return {?}
     */
    getRAccountRoles() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    const accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    const tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[`${VerdocsStateService.TOKEN_NAMESPACE}/roles`];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    }
    /**
     * @return {?}
     */
    getPlans() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    const accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    const tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[`${VerdocsStateService.TOKEN_NAMESPACE}/plans`];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    }
}
VerdocsStateService.RACCOUNT_COOKIE_NAME = 'rAccount_Verdocs';
VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME = 'signer_token';
VerdocsStateService.COOKIE_NAME_SUFFIX = '_Verdocs';
VerdocsStateService.ACCESS_TOKEN_NAME = 'accessToken';
VerdocsStateService.ID_TOKEN_NAME = 'idToken';
VerdocsStateService.TOKEN_NAMESPACE = 'https://verdocs.com';
VerdocsStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
VerdocsStateService.ctorParameters = () => [
    { type: CookieService },
    { type: HttpClient },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ VerdocsStateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function VerdocsStateService_Factory() { return new VerdocsStateService(ɵɵinject(CookieService), ɵɵinject(HttpClient), ɵɵinject(INJECTOR), ɵɵinject(PLATFORM_ID)); }, token: VerdocsStateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.RACCOUNT_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.COOKIE_NAME_SUFFIX;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ACCESS_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ID_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.loginURL;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.production;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.idToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.timerActive;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.domain;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookies;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.tokenConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.authenticationWatcher;
    /** @type {?} */
    VerdocsStateService.prototype.accessList;
    /** @type {?} */
    VerdocsStateService.prototype.decodedIdTokenSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieService;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsRequestInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        this.stateService = this.injector.get(VerdocsStateService);
        /** @type {?} */
        const accessToken = this.stateService.getAccessToken();
        /** @type {?} */
        const idToken = this.stateService.getIDToken();
        /** @type {?} */
        const signerToken = this.stateService.getOtherCookieObject('signer_token');
        /** @type {?} */
        const setHeaders = {
            Pragma: 'no-cache',
            'Cache-Control': 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0'
        };
        if (request.url.startsWith('assets/')) {
            return next.handle(request);
        }
        if (!request.headers.get('Authorization') && accessToken) {
            setHeaders['Authorization'] = `Bearer ${accessToken}`;
        }
        if (idToken) {
            setHeaders['Authentication'] = `Bearer ${idToken}`;
        }
        if (signerToken) {
            setHeaders['Signer'] = `Bearer ${signerToken}`;
        }
        request = request.clone({ setHeaders });
        return next.handle(request);
    }
}
VerdocsRequestInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsRequestInterceptor.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const helper$1 = new JwtHelperService();
class VerdocsAuthService {
    /**
     * @param {?} stateService
     */
    constructor(stateService) {
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    isAuthenticated() {
        /** @type {?} */
        const token = this.stateService.getIDToken();
        if (token) {
            /** @type {?} */
            const isTokenExpired = helper$1.isTokenExpired(token);
            return !isTokenExpired;
        }
        return false;
    }
}
VerdocsAuthService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsAuthService.ctorParameters = () => [
    { type: VerdocsStateService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthService.prototype.stateService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsAuthGuardService {
    // handle redirects based on authentication state
    /**
     * @param {?} authService
     * @param {?} stateService
     * @param {?} route
     */
    constructor(authService, stateService, route) {
        this.authService = authService;
        this.stateService = stateService;
        this.route = route;
        this.signOutRequestSubmitted = false;
        /** @type {?} */
        const snapshot = (/** @type {?} */ (this.route.snapshot));
    }
    /**
     * @return {?}
     */
    checkLogin() {
        if (!this.authService.isAuthenticated) {
            if (this.stateService.getLoginURL()) {
                this.signOut();
            }
        }
        this.stateService.watchAuthentication();
    }
    /**
     * @return {?}
     */
    checkAuthentication() {
        /** @type {?} */
        const authenticated = this.authService.isAuthenticated();
        if (!authenticated) {
            this.signOut();
        }
    }
    /**
     * @param {?=} redirectUrl
     * @return {?}
     */
    signOut(redirectUrl) {
        if (!this.signOutRequestSubmitted) {
            this.signOutRequestSubmitted = true;
            if (!this.authService.isAuthenticated()) {
                redirectUrl = window.location.href;
            }
            this.stateService.removeRCookies();
            this.stateService.removeIntercomCookie();
            /** @type {?} */
            const redirectUrlParam = (this.stateService.getLoginURL() && this.stateService.getLoginURL().includes('?') ? '&' : '?') + 'redirect_url';
            window.location.href = this.stateService.getLoginURL() + (redirectUrl ? `${redirectUrlParam}=${redirectUrl}` : '');
        }
    }
}
VerdocsAuthGuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsAuthGuardService.ctorParameters = () => [
    { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthService)),] }] },
    { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsStateService)),] }] },
    { type: ActivatedRoute }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.signOutRequestSubmitted;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.route;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsErrorInterceptor {
    /**
     * @param {?} injector
     * @param {?} platform
     */
    constructor(injector, platform) {
        this.injector = injector;
        this.platform = platform;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        return next.handle(request).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err instanceof HttpErrorResponse) {
                if (err['status'] === 403) {
                    this.stateService = this.injector.get(VerdocsStateService);
                    /** @type {?} */
                    let redirectUrl;
                    if (isPlatformBrowser(this.platform) && err['error'] && err['error']['reason'] === 'expired') {
                        redirectUrl = window.location.href;
                    }
                    this.authGuardService = this.injector.get(VerdocsAuthGuardService);
                    this.authGuardService.signOut(redirectUrl);
                }
                return throwError(err);
            }
        })));
    }
}
VerdocsErrorInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsErrorInterceptor.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.authGuardService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsResponseInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        this.stateService = this.injector.get(VerdocsStateService);
        return next.handle(request).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!!event.headers) {
                /** @type {?} */
                const accessToken = event.headers.get('x-access-token');
                /** @type {?} */
                const idToken = event.headers.get('x-id-token');
                if (accessToken) {
                    this.stateService.updateCookie('accessToken', accessToken);
                }
                if (idToken) {
                    this.stateService.updateCookie('idToken', idToken);
                }
            }
            return event;
        })));
    }
}
VerdocsResponseInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsResponseInterceptor.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsTokenObjectService {
    /**
     * @param {?} stateService
     */
    constructor(stateService) {
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    getAccessToken() {
        return this.tokenToObject(this.stateService.getAccessToken());
    }
    /**
     * @return {?}
     */
    getIDToken() {
        return this.tokenToObject(this.stateService.getIDToken());
    }
    /**
     * @return {?}
     */
    getAccountAccessToken() {
        return this.tokenToObject(this.stateService.getAccountAccessToken());
    }
    /**
     * @return {?}
     */
    getVerdocsAccessToken() {
        return this.tokenToObject(this.stateService.getVerdocsAccessToken());
    }
    /**
     * @return {?}
     */
    getProfile() {
        return this.getIDToken() ? this.getIDToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/profile`] : null;
    }
    /**
     * @return {?}
     */
    getPermissions() {
        return this.getAccessToken() ? this.getAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/permissions`] : null;
    }
    /**
     * @return {?}
     */
    getAccountPermissions() {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/permissions`] : null;
    }
    /**
     * @return {?}
     */
    getVerdocsPermissions() {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/permissions`] : null;
    }
    /**
     * @return {?}
     */
    getPlans() {
        return this.getAccessToken() ? this.getAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/plans`] : this.getAccountPlans() ? this.getAccountPlans() : this.getVerdocsPlans() ? this.getVerdocsPlans() : null;
    }
    /**
     * @return {?}
     */
    getOrganizationID() {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/organization_id`] : null;
    }
    /**
     * @return {?}
     */
    getAccountPlans() {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/plans`] : null;
    }
    /**
     * @return {?}
     */
    getVerdocsPlans() {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/plans`] : null;
    }
    /**
     * @return {?}
     */
    getRoles() {
        return this.getAccessToken() ? this.getAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/roles`] : this.getAccountRoles() ? this.getAccountRoles() : this.getVerdocsRoles() ? this.getVerdocsRoles() : null;
    }
    /**
     * @return {?}
     */
    getAccountRoles() {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/roles`] : null;
    }
    /**
     * @return {?}
     */
    getVerdocsRoles() {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/roles`] : null;
    }
    /**
     * @return {?}
     */
    getProfileID() {
        return this.getAccessToken() ? this.getAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/profile_id`] : this.getAccountAccessToken() ? this.getAccountAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/profile_id`] : this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[`${VerdocsTokenObjectService.TOKEN_NAMESPACE}/profile_id`] : null;
    }
    /**
     * @return {?}
     */
    getUserID() {
        /** @type {?} */
        const sub = this.getAccessToken()['sub'] || this.getAccountAccessToken()['sub'];
        /** @type {?} */
        const idStart = sub.indexOf('|') + 1;
        return this.getAccessToken()['sub'].slice(idStart);
    }
    /**
     * @param {?} token
     * @return {?}
     */
    tokenToObject(token) {
        if (token) {
            /** @type {?} */
            const base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    }
}
VerdocsTokenObjectService.TOKEN_NAMESPACE = 'https://verdocs.com';
VerdocsTokenObjectService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
VerdocsTokenObjectService.ctorParameters = () => [
    { type: VerdocsStateService }
];
/** @nocollapse */ VerdocsTokenObjectService.ngInjectableDef = ɵɵdefineInjectable({ factory: function VerdocsTokenObjectService_Factory() { return new VerdocsTokenObjectService(ɵɵinject(VerdocsStateService)); }, token: VerdocsTokenObjectService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenObjectService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenObjectService.prototype.stateService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerifyEmailDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} vTokenAuthGuard
     * @param {?} vTokenStateService
     * @param {?} data
     */
    constructor(dialogRef, vTokenAuthGuard, vTokenStateService, data) {
        this.dialogRef = dialogRef;
        this.vTokenAuthGuard = vTokenAuthGuard;
        this.vTokenStateService = vTokenStateService;
        this.data = data;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setInterval((/**
         * @return {?}
         */
        () => {
            if (this.vTokenStateService.getEmailVerification()) {
                this.closeDialog();
            }
        }), 10000);
    }
    /**
     * @return {?}
     */
    signOut() {
        this.vTokenAuthGuard.signOut(window.location.href);
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.data.resendEmailVerification();
    }
    /**
     * @return {?}
     */
    closeDialog() {
        this.dialogRef.close();
    }
}
VerifyEmailDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'verdocs-verify-email-dialog.component',
                template: "<div class=\"verify-email__container\">\n    <div class=\"verify-email__title\">\n        Confirm your email address\n    </div>\n    <div class=\"verify-email__content\">\n        We've sent a confirmation email to you at:\n        <br>\n        <span class=\"verify-email__content-email\">\n        {{data.emailAddress}}\n      </span>\n    </div>\n    <div class=\"verify-email__action\">\n        <button mat-button class=\"verify-email__action-button\" (click)=\"signOut()\">LOGOUT</button>\n        <button mat-button class=\"verify-email__action-button\" (click)=\"resendEmailVerification()\">RESEND EMAIL</button>\n    </div>\n</div>\n",
                styles: [".verify-email__container{width:640px}@media only screen and (max-width:960px){.verify-email__container{width:auto}}.verify-email__title{padding:0 0 14px;color:rgba(0,0,0,.87);font-size:20px;font-weight:500}.verify-email__content{color:rgba(0,0,0,.54)}.verify-email__content-email{padding-top:32px;display:block}.verify-email__action{height:52px;padding-top:10.5px;margin:24px -24px -24px 0;text-align:right}.verify-email__action-button{color:#3f5894;text-transform:uppercase;margin-left:-8px}"]
            }] }
];
/** @nocollapse */
VerifyEmailDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthGuardService)),] }] },
    { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsStateService)),] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.vTokenAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.vTokenStateService;
    /** @type {?} */
    VerifyEmailDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class VerdocsTokenGuardDirective {
    /**
     * @param {?} dialog
     * @param {?} verdocsAuthGuard
     * @param {?} verdocsStateService
     * @param {?} verdocsAuthService
     * @param {?} platform
     */
    constructor(dialog, verdocsAuthGuard, verdocsStateService, verdocsAuthService, platform) {
        this.dialog = dialog;
        this.verdocsAuthGuard = verdocsAuthGuard;
        this.verdocsStateService = verdocsStateService;
        this.verdocsAuthService = verdocsAuthService;
        this.platform = platform;
        this.verifyEmailDialogIsOpen = false;
        this.idTokenSubscription = new Subscription();
        this.resendEmailVerificationEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.idTokenSubscription = this.verdocsStateService.decodedIdTokenSubject.subscribe((/**
         * @param {?} decodedIdToken
         * @return {?}
         */
        decodedIdToken => {
            this.emailAddress = decodedIdToken.email;
        }));
        setInterval((/**
         * @return {?}
         */
        () => {
            if (this.enforceAuthentication) {
                this.verdocsAuthGuard.checkAuthentication();
            }
            if (this.verdocsAuthService.isAuthenticated()) {
                this.checkEmailVerification();
            }
        }), 5000);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.idTokenSubscription.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    checkEmailVerification() {
        /** @type {?} */
        const emailVerified = this.verdocsStateService.getEmailVerification();
        if (!emailVerified && !this.verifyEmailDialogIsOpen && isPlatformBrowser(this.platform)) {
            this.verifyEmailDialogIsOpen = true;
            /** @type {?} */
            const email_data = {
                resendEmailVerification: (/**
                 * @return {?}
                 */
                () => this.resendEmailVerification()),
                emailAddress: this.emailAddress
            };
            /** @type {?} */
            const verifyEmailDialog = this.dialog.open(VerifyEmailDialogComponent, {
                data: email_data,
                disableClose: true
            });
            verifyEmailDialog.afterClosed().subscribe((/**
             * @return {?}
             */
            () => {
                this.verifyEmailDialogIsOpen = false;
                location.reload();
            }));
        }
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.resendEmailVerificationEvent.emit();
    }
}
VerdocsTokenGuardDirective.decorators = [
    { type: Directive, args: [{
                selector: '[verdocs-guard]'
            },] }
];
/** @nocollapse */
VerdocsTokenGuardDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthGuardService)),] }] },
    { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsStateService)),] }] },
    { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthService)),] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
VerdocsTokenGuardDirective.propDecorators = {
    resendEmailVerificationEvent: [{ type: Output }],
    enforceAuthentication: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verifyEmailDialogIsOpen;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.emailAddress;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.idTokenSubscription;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerificationEvent;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.enforceAuthentication;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function VTokenConfig() { }
if (false) {
    /** @type {?} */
    VTokenConfig.prototype.production;
    /** @type {?} */
    VTokenConfig.prototype.domain;
    /** @type {?} */
    VTokenConfig.prototype.cookieName;
    /** @type {?} */
    VTokenConfig.prototype.loginURL;
    /** @type {?|undefined} */
    VTokenConfig.prototype.verdocs_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.account_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.origin;
}
/** @type {?} */
const VTokenConfigToken = new InjectionToken('VTokenConfig');
class TokensModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static initInterceptor(config) {
        return {
            ngModule: TokensModule,
            providers: [
                {
                    provide: VTokenConfigToken,
                    useValue: config
                }
            ]
        };
    }
}
TokensModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CookieModule.forRoot(),
                    MatButtonModule,
                    MatDialogModule,
                ],
                declarations: [
                    VerdocsTokenGuardDirective,
                    VerifyEmailDialogComponent
                ],
                providers: [
                    VerdocsResponseInterceptor,
                    VerdocsRequestInterceptor,
                    VerdocsErrorInterceptor,
                    VerdocsAuthService,
                    VerdocsAuthGuardService,
                    VerdocsStateService,
                    VerdocsTokenObjectService
                ],
                entryComponents: [
                    VerifyEmailDialogComponent
                ],
                exports: [
                    VerdocsTokenGuardDirective,
                    VerifyEmailDialogComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TokensModule, VTokenConfigToken, VerdocsAuthGuardService, VerdocsAuthService, VerdocsErrorInterceptor, VerdocsRequestInterceptor, VerdocsResponseInterceptor, VerdocsStateService, VerdocsTokenGuardDirective, VerdocsTokenObjectService, VerifyEmailDialogComponent };
//# sourceMappingURL=verdocs-tokens.js.map
