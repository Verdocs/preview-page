/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, Input, EventEmitter, Inject, forwardRef, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { MatDialog } from '@angular/material';
import { Subscription } from 'rxjs';
import { VerifyEmailDialogComponent } from '../dialogs/verify-email-dialog.component';
import { VerdocsAuthGuardService } from '../services/authguard.service';
import { VerdocsStateService } from '../services/state.service';
import { VerdocsAuthService } from '../services/auth.service';
export class VerdocsTokenGuardDirective {
    /**
     * @param {?} dialog
     * @param {?} verdocsAuthGuard
     * @param {?} verdocsStateService
     * @param {?} verdocsAuthService
     * @param {?} platform
     */
    constructor(dialog, verdocsAuthGuard, verdocsStateService, verdocsAuthService, platform) {
        this.dialog = dialog;
        this.verdocsAuthGuard = verdocsAuthGuard;
        this.verdocsStateService = verdocsStateService;
        this.verdocsAuthService = verdocsAuthService;
        this.platform = platform;
        this.verifyEmailDialogIsOpen = false;
        this.idTokenSubscription = new Subscription();
        this.resendEmailVerificationEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.idTokenSubscription = this.verdocsStateService.decodedIdTokenSubject.subscribe((/**
         * @param {?} decodedIdToken
         * @return {?}
         */
        decodedIdToken => {
            this.emailAddress = decodedIdToken.email;
        }));
        setInterval((/**
         * @return {?}
         */
        () => {
            if (this.enforceAuthentication) {
                this.verdocsAuthGuard.checkAuthentication();
            }
            if (this.verdocsAuthService.isAuthenticated()) {
                this.checkEmailVerification();
            }
        }), 5000);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.idTokenSubscription.unsubscribe();
    }
    /**
     * @private
     * @return {?}
     */
    checkEmailVerification() {
        /** @type {?} */
        const emailVerified = this.verdocsStateService.getEmailVerification();
        if (!emailVerified && !this.verifyEmailDialogIsOpen && isPlatformBrowser(this.platform)) {
            this.verifyEmailDialogIsOpen = true;
            /** @type {?} */
            const email_data = {
                resendEmailVerification: (/**
                 * @return {?}
                 */
                () => this.resendEmailVerification()),
                emailAddress: this.emailAddress
            };
            /** @type {?} */
            const verifyEmailDialog = this.dialog.open(VerifyEmailDialogComponent, {
                data: email_data,
                disableClose: true
            });
            verifyEmailDialog.afterClosed().subscribe((/**
             * @return {?}
             */
            () => {
                this.verifyEmailDialogIsOpen = false;
                location.reload();
            }));
        }
    }
    /**
     * @return {?}
     */
    resendEmailVerification() {
        this.resendEmailVerificationEvent.emit();
    }
}
VerdocsTokenGuardDirective.decorators = [
    { type: Directive, args: [{
                selector: '[verdocs-guard]'
            },] }
];
/** @nocollapse */
VerdocsTokenGuardDirective.ctorParameters = () => [
    { type: MatDialog },
    { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthGuardService)),] }] },
    { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsStateService)),] }] },
    { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthService)),] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
VerdocsTokenGuardDirective.propDecorators = {
    resendEmailVerificationEvent: [{ type: Output }],
    enforceAuthentication: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verifyEmailDialogIsOpen;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.emailAddress;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.idTokenSubscription;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerificationEvent;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.enforceAuthentication;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhbHN0ZXItZ3VhcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvdG9rZW5zLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVhbHN0ZXItZ3VhcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsWUFBWSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQWEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBTTlELE1BQU0sT0FBTywwQkFBMEI7Ozs7Ozs7O0lBUXJDLFlBQ1UsTUFBaUIsRUFDa0MsZ0JBQXlDLEVBQzdDLG1CQUF3QyxFQUN6QyxrQkFBc0MsRUFDL0QsUUFBUTtRQUo3QixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2tDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBeUI7UUFDN0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN6Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQy9ELGFBQVEsR0FBUixRQUFRLENBQUE7UUFaL0IsNEJBQXVCLEdBQUcsS0FBSyxDQUFDO1FBRWhDLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0IsaUNBQTRCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQVVwRSxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMscUJBQXFCLENBQUMsU0FBUzs7OztRQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ25HLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztRQUMzQyxDQUFDLEVBQUMsQ0FBQztRQUNILFdBQVc7OztRQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksSUFBSSxDQUFDLHFCQUFxQixFQUFFO2dCQUM5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQzthQUM3QztZQUNELElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsRUFBRSxFQUFFO2dCQUM3QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzthQUMvQjtRQUNILENBQUMsR0FBRSxJQUFJLENBQUMsQ0FBQztJQUNYLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBRU8sc0JBQXNCOztjQUN0QixhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixFQUFFO1FBQ3JFLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZGLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7O2tCQUM5QixVQUFVLEdBQTBCO2dCQUN4Qyx1QkFBdUI7OztnQkFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQTtnQkFDN0QsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2FBQ2hDOztrQkFDSyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFDckUsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUM7WUFDRixpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7Z0JBQ3JDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVELHVCQUF1QjtRQUNyQixJQUFJLENBQUMsNEJBQTRCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0MsQ0FBQzs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2FBQzVCOzs7O1lBVlEsU0FBUztZQUdULHVCQUF1Qix1QkFrQjNCLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLEVBQUM7WUFqQjVDLG1CQUFtQix1QkFrQnZCLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEVBQUM7WUFqQnhDLGtCQUFrQix1QkFrQnRCLE1BQU0sU0FBQyxVQUFVOzs7b0JBQUMsR0FBRyxFQUFFLENBQUMsa0JBQWtCLEVBQUM7NENBQzNDLE1BQU0sU0FBQyxXQUFXOzs7MkNBUnBCLE1BQU07b0NBQ04sS0FBSzs7Ozs7OztJQUxOLDZEQUF3Qzs7Ozs7SUFDeEMsa0RBQTZCOzs7OztJQUM3Qix5REFBaUQ7Ozs7O0lBRWpELGtFQUFvRTs7Ozs7SUFDcEUsMkRBQXVDOzs7OztJQUdyQyw0Q0FBeUI7Ozs7O0lBQ3pCLHNEQUFvRzs7Ozs7SUFDcEcseURBQStGOzs7OztJQUMvRix3REFBNEY7Ozs7O0lBQzVGLDhDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgT3V0cHV0LCBJbnB1dCwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIEluamVjdCwgZm9yd2FyZFJlZiwgT25EZXN0cm95LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTWF0RGlhbG9nIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBWZXJpZnlFbWFpbERpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4uL2RpYWxvZ3MvdmVyaWZ5LWVtYWlsLWRpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRoZ3VhcmQuc2VydmljZSc7XG5pbXBvcnQgeyBWZXJkb2NzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBWZXJkb2NzQXV0aFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgRW1haWxWZXJpZmljYXRpb25EYXRhIH0gZnJvbSAnLi4vbW9kZWxzL2VtYWlsLXZlcmlmaWNhdGlvbi1kYXRhLm1vZGVsJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3ZlcmRvY3MtZ3VhcmRdJ1xufSlcbmV4cG9ydCBjbGFzcyBWZXJkb2NzVG9rZW5HdWFyZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSB2ZXJpZnlFbWFpbERpYWxvZ0lzT3BlbiA9IGZhbHNlO1xuICBwcml2YXRlIGVtYWlsQWRkcmVzczogc3RyaW5nO1xuICBwcml2YXRlIGlkVG9rZW5TdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgQE91dHB1dCgpIHByaXZhdGUgcmVzZW5kRW1haWxWZXJpZmljYXRpb25FdmVudCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQElucHV0KCkgcHJpdmF0ZSBlbmZvcmNlQXV0aGVudGljYXRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBkaWFsb2c6IE1hdERpYWxvZyxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UpKSBwcml2YXRlIHZlcmRvY3NBdXRoR3VhcmQ6IFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBWZXJkb2NzU3RhdGVTZXJ2aWNlKSkgcHJpdmF0ZSB2ZXJkb2NzU3RhdGVTZXJ2aWNlOiBWZXJkb2NzU3RhdGVTZXJ2aWNlLFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBWZXJkb2NzQXV0aFNlcnZpY2UpKSBwcml2YXRlIHZlcmRvY3NBdXRoU2VydmljZTogVmVyZG9jc0F1dGhTZXJ2aWNlLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1cbiAgKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmlkVG9rZW5TdWJzY3JpcHRpb24gPSB0aGlzLnZlcmRvY3NTdGF0ZVNlcnZpY2UuZGVjb2RlZElkVG9rZW5TdWJqZWN0LnN1YnNjcmliZShkZWNvZGVkSWRUb2tlbiA9PiB7XG4gICAgICB0aGlzLmVtYWlsQWRkcmVzcyA9IGRlY29kZWRJZFRva2VuLmVtYWlsO1xuICAgIH0pO1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmVuZm9yY2VBdXRoZW50aWNhdGlvbikge1xuICAgICAgICB0aGlzLnZlcmRvY3NBdXRoR3VhcmQuY2hlY2tBdXRoZW50aWNhdGlvbigpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudmVyZG9jc0F1dGhTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICAgIHRoaXMuY2hlY2tFbWFpbFZlcmlmaWNhdGlvbigpO1xuICAgICAgfVxuICAgIH0sIDUwMDApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5pZFRva2VuU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBwcml2YXRlIGNoZWNrRW1haWxWZXJpZmljYXRpb24oKSB7XG4gICAgY29uc3QgZW1haWxWZXJpZmllZCA9IHRoaXMudmVyZG9jc1N0YXRlU2VydmljZS5nZXRFbWFpbFZlcmlmaWNhdGlvbigpXG4gICAgaWYgKCFlbWFpbFZlcmlmaWVkICYmICF0aGlzLnZlcmlmeUVtYWlsRGlhbG9nSXNPcGVuICYmIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pKSB7XG4gICAgICB0aGlzLnZlcmlmeUVtYWlsRGlhbG9nSXNPcGVuID0gdHJ1ZTtcbiAgICAgIGNvbnN0IGVtYWlsX2RhdGE6IEVtYWlsVmVyaWZpY2F0aW9uRGF0YSA9IHtcbiAgICAgICAgcmVzZW5kRW1haWxWZXJpZmljYXRpb246ICgpID0+IHRoaXMucmVzZW5kRW1haWxWZXJpZmljYXRpb24oKSxcbiAgICAgICAgZW1haWxBZGRyZXNzOiB0aGlzLmVtYWlsQWRkcmVzc1xuICAgICAgfVxuICAgICAgY29uc3QgdmVyaWZ5RW1haWxEaWFsb2cgPSB0aGlzLmRpYWxvZy5vcGVuKFZlcmlmeUVtYWlsRGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICAgIGRhdGE6IGVtYWlsX2RhdGEsXG4gICAgICAgIGRpc2FibGVDbG9zZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB2ZXJpZnlFbWFpbERpYWxvZy5hZnRlckNsb3NlZCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMudmVyaWZ5RW1haWxEaWFsb2dJc09wZW4gPSBmYWxzZTtcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXNlbmRFbWFpbFZlcmlmaWNhdGlvbigpIHtcbiAgICB0aGlzLnJlc2VuZEVtYWlsVmVyaWZpY2F0aW9uRXZlbnQuZW1pdCgpO1xuICB9XG59XG4iXX0=