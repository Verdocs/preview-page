/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpErrorResponse } from '@angular/common/http';
import { catchError } from 'rxjs/operators';
import { VerdocsAuthGuardService } from '../services/authguard.service';
import { VerdocsStateService } from '../services/state.service';
import { throwError } from 'rxjs';
export class VerdocsErrorInterceptor {
    /**
     * @param {?} injector
     * @param {?} platform
     */
    constructor(injector, platform) {
        this.injector = injector;
        this.platform = platform;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        return next.handle(request).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        err => {
            if (err instanceof HttpErrorResponse) {
                if (err['status'] === 403) {
                    this.stateService = this.injector.get(VerdocsStateService);
                    /** @type {?} */
                    let redirectUrl;
                    if (isPlatformBrowser(this.platform) && err['error'] && err['error']['reason'] === 'expired') {
                        redirectUrl = window.location.href;
                    }
                    this.authGuardService = this.injector.get(VerdocsAuthGuardService);
                    this.authGuardService.signOut(redirectUrl);
                }
                return throwError(err);
            }
        })));
    }
}
VerdocsErrorInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsErrorInterceptor.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.authGuardService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy90b2tlbnMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2Vycm9yLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ25ELE9BQU8sRUFJTCxpQkFBaUIsRUFDbEIsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUlsQyxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUdsQyxZQUNVLFFBQWtCLEVBQ0csUUFBUTtRQUQ3QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ0csYUFBUSxHQUFSLFFBQVEsQ0FBQTtJQUNuQyxDQUFDOzs7Ozs7SUFDTCxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjtRQUNwRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUM5QixVQUFVOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDZixJQUFJLEdBQUcsWUFBWSxpQkFBaUIsRUFBRTtnQkFDcEMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFO29CQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O3dCQUN2RCxXQUFXO29CQUNmLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO3dCQUM1RixXQUFXLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUE7cUJBQ25DO29CQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO29CQUNuRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUM1QztnQkFDRCxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QjtRQUNILENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOzs7WUF6QkYsVUFBVTs7OztZQWZVLFFBQVE7NENBcUJ4QixNQUFNLFNBQUMsV0FBVzs7Ozs7OztJQUpyQixtREFBa0Q7Ozs7O0lBQ2xELCtDQUEwQzs7Ozs7SUFFeEMsMkNBQTBCOzs7OztJQUMxQiwyQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nXG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cEVycm9yUmVzcG9uc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRoZ3VhcmQuc2VydmljZSc7XG5pbXBvcnQgeyBWZXJkb2NzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFZlcmRvY3NFcnJvckludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgcHJpdmF0ZSBhdXRoR3VhcmRTZXJ2aWNlOiBWZXJkb2NzQXV0aEd1YXJkU2VydmljZTtcbiAgcHJpdmF0ZSBzdGF0ZVNlcnZpY2U6IFZlcmRvY3NTdGF0ZVNlcnZpY2U7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1cbiAgKSB7IH1cbiAgaW50ZXJjZXB0KHJlcXVlc3Q6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKSB7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoXG4gICAgICBjYXRjaEVycm9yKGVyciA9PiB7XG4gICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgIGlmIChlcnJbJ3N0YXR1cyddID09PSA0MDMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoVmVyZG9jc1N0YXRlU2VydmljZSk7XG4gICAgICAgICAgICBsZXQgcmVkaXJlY3RVcmw7XG4gICAgICAgICAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybSkgJiYgZXJyWydlcnJvciddICYmIGVyclsnZXJyb3InXVsncmVhc29uJ10gPT09ICdleHBpcmVkJykge1xuICAgICAgICAgICAgICByZWRpcmVjdFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmF1dGhHdWFyZFNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChWZXJkb2NzQXV0aEd1YXJkU2VydmljZSk7XG4gICAgICAgICAgICB0aGlzLmF1dGhHdWFyZFNlcnZpY2Uuc2lnbk91dChyZWRpcmVjdFVybCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufSJdfQ==