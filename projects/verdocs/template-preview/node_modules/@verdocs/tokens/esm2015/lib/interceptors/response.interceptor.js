/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { map } from 'rxjs/operators';
import { VerdocsStateService } from '../services/state.service';
export class VerdocsResponseInterceptor {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        this.stateService = this.injector.get(VerdocsStateService);
        return next.handle(request).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (!!event.headers) {
                /** @type {?} */
                const accessToken = event.headers.get('x-access-token');
                /** @type {?} */
                const idToken = event.headers.get('x-id-token');
                if (accessToken) {
                    this.stateService.updateCookie('accessToken', accessToken);
                }
                if (idToken) {
                    this.stateService.updateCookie('idToken', idToken);
                }
            }
            return event;
        })));
    }
}
VerdocsResponseInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsResponseInterceptor.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy90b2tlbnMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL3Jlc3BvbnNlLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU9yRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFJaEUsTUFBTSxPQUFPLDBCQUEwQjs7OztJQUVyQyxZQUNVLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDekIsQ0FBQzs7Ozs7O0lBQ0osU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7UUFDcEQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQzNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzlCLEdBQUc7Ozs7UUFBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFOztzQkFDYixXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7O3NCQUNqRCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO2dCQUMvQyxJQUFJLFdBQVcsRUFBRTtvQkFDZixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7aUJBQzVEO2dCQUNELElBQUksT0FBTyxFQUFFO29CQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDcEQ7YUFDRjtZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLENBQ0gsQ0FBQTtJQUNILENBQUM7OztZQXZCRixVQUFVOzs7O1lBWlUsUUFBUTs7Ozs7OztJQWMzQixrREFBMEM7Ozs7O0lBRXhDLDhDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cFJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0YXRlLnNlcnZpY2UnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWZXJkb2NzUmVzcG9uc2VJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgc3RhdGVTZXJ2aWNlOiBWZXJkb2NzU3RhdGVTZXJ2aWNlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxuICApIHt9XG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcikge1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoVmVyZG9jc1N0YXRlU2VydmljZSk7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpLnBpcGUoXG4gICAgICBtYXAoKGV2ZW50OiBIdHRwUmVzcG9uc2U8YW55PikgPT4ge1xuICAgICAgICBpZiAoISFldmVudC5oZWFkZXJzKSB7XG4gICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSBldmVudC5oZWFkZXJzLmdldCgneC1hY2Nlc3MtdG9rZW4nKTtcbiAgICAgICAgICBjb25zdCBpZFRva2VuID0gZXZlbnQuaGVhZGVycy5nZXQoJ3gtaWQtdG9rZW4nKTtcbiAgICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnVwZGF0ZUNvb2tpZSgnYWNjZXNzVG9rZW4nLCBhY2Nlc3NUb2tlbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpZFRva2VuKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlU2VydmljZS51cGRhdGVDb29raWUoJ2lkVG9rZW4nLCBpZFRva2VuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSlcbiAgICApXG4gIH1cbn1cbiJdfQ==