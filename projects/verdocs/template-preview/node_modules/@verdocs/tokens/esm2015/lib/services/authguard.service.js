/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, forwardRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { VerdocsAuthService } from './auth.service';
import { VerdocsStateService } from './state.service';
export class VerdocsAuthGuardService {
    // handle redirects based on authentication state
    /**
     * @param {?} authService
     * @param {?} stateService
     * @param {?} route
     */
    constructor(authService, stateService, route) {
        this.authService = authService;
        this.stateService = stateService;
        this.route = route;
        this.signOutRequestSubmitted = false;
        /** @type {?} */
        const snapshot = (/** @type {?} */ (this.route.snapshot));
    }
    /**
     * @return {?}
     */
    checkLogin() {
        if (!this.authService.isAuthenticated) {
            if (this.stateService.getLoginURL()) {
                this.signOut();
            }
        }
        this.stateService.watchAuthentication();
    }
    /**
     * @return {?}
     */
    checkAuthentication() {
        /** @type {?} */
        const authenticated = this.authService.isAuthenticated();
        if (!authenticated) {
            this.signOut();
        }
    }
    /**
     * @param {?=} redirectUrl
     * @return {?}
     */
    signOut(redirectUrl) {
        if (!this.signOutRequestSubmitted) {
            this.signOutRequestSubmitted = true;
            if (!this.authService.isAuthenticated()) {
                redirectUrl = window.location.href;
            }
            this.stateService.removeRCookies();
            this.stateService.removeIntercomCookie();
            /** @type {?} */
            const redirectUrlParam = (this.stateService.getLoginURL() && this.stateService.getLoginURL().includes('?') ? '&' : '?') + 'redirect_url';
            window.location.href = this.stateService.getLoginURL() + (redirectUrl ? `${redirectUrlParam}=${redirectUrl}` : '');
        }
    }
}
VerdocsAuthGuardService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
VerdocsAuthGuardService.ctorParameters = () => [
    { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsAuthService)),] }] },
    { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => VerdocsStateService)),] }] },
    { type: ActivatedRoute }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.signOutRequestSubmitted;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGd1YXJkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy90b2tlbnMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYXV0aGd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3RELE1BQU0sT0FBTyx1QkFBdUI7Ozs7Ozs7SUFJbEMsWUFDd0QsV0FBK0IsRUFDOUIsWUFBaUMsRUFDaEYsS0FBcUI7UUFGeUIsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQzlCLGlCQUFZLEdBQVosWUFBWSxDQUFxQjtRQUNoRixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQU52Qiw0QkFBdUIsR0FBRyxLQUFLLENBQUM7O2NBUWhDLFFBQVEsR0FBRyxtQkFBd0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUE7SUFDOUQsQ0FBQzs7OztJQUVELFVBQVU7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7WUFDckMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEI7U0FDRjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUMxQyxDQUFDOzs7O0lBRUQsbUJBQW1COztjQUNYLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRTtRQUN4RCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLFdBQW9CO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDakMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsRUFBRTtnQkFDdkMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFBO2FBQ25DO1lBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLENBQUM7O2tCQUNuQyxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsY0FBYztZQUN4SSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwSDtJQUNILENBQUM7OztZQXhDRixVQUFVOzs7O1lBSEYsa0JBQWtCLHVCQVN0QixNQUFNLFNBQUMsVUFBVTs7O29CQUFDLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixFQUFDO1lBUnZDLG1CQUFtQix1QkFTdkIsTUFBTSxTQUFDLFVBQVU7OztvQkFBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsRUFBQztZQVh4QyxjQUFjOzs7Ozs7O0lBTXJCLDBEQUF3Qzs7Ozs7SUFJdEMsOENBQXFGOzs7OztJQUNyRiwrQ0FBd0Y7Ozs7O0lBQ3hGLHdDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgZm9yd2FyZFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhTZXJ2aWNlIH0gZnJvbSAnLi9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJy4vc3RhdGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSB7XG4gIHByaXZhdGUgc2lnbk91dFJlcXVlc3RTdWJtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBoYW5kbGUgcmVkaXJlY3RzIGJhc2VkIG9uIGF1dGhlbnRpY2F0aW9uIHN0YXRlXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBWZXJkb2NzQXV0aFNlcnZpY2UpKSBwcml2YXRlIGF1dGhTZXJ2aWNlOiBWZXJkb2NzQXV0aFNlcnZpY2UsXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IFZlcmRvY3NTdGF0ZVNlcnZpY2UpKSBwcml2YXRlIHN0YXRlU2VydmljZTogVmVyZG9jc1N0YXRlU2VydmljZSxcbiAgICBwcml2YXRlIHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSxcbiAgKSB7XG4gICAgY29uc3Qgc25hcHNob3QgPSA8QWN0aXZhdGVkUm91dGVTbmFwc2hvdD50aGlzLnJvdXRlLnNuYXBzaG90XG4gIH1cblxuICBjaGVja0xvZ2luKCkge1xuICAgIGlmICghdGhpcy5hdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlU2VydmljZS5nZXRMb2dpblVSTCgpKSB7XG4gICAgICAgIHRoaXMuc2lnbk91dCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN0YXRlU2VydmljZS53YXRjaEF1dGhlbnRpY2F0aW9uKCk7XG4gIH1cblxuICBjaGVja0F1dGhlbnRpY2F0aW9uKCkge1xuICAgIGNvbnN0IGF1dGhlbnRpY2F0ZWQgPSB0aGlzLmF1dGhTZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpO1xuICAgIGlmICghYXV0aGVudGljYXRlZCkge1xuICAgICAgdGhpcy5zaWduT3V0KCk7XG4gICAgfVxuICB9XG5cbiAgc2lnbk91dChyZWRpcmVjdFVybD86IHN0cmluZykge1xuICAgIGlmICghdGhpcy5zaWduT3V0UmVxdWVzdFN1Ym1pdHRlZCkge1xuICAgICAgdGhpcy5zaWduT3V0UmVxdWVzdFN1Ym1pdHRlZCA9IHRydWU7XG4gICAgICBpZiAoIXRoaXMuYXV0aFNlcnZpY2UuaXNBdXRoZW50aWNhdGVkKCkpIHtcbiAgICAgICAgcmVkaXJlY3RVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgfVxuICAgICAgdGhpcy5zdGF0ZVNlcnZpY2UucmVtb3ZlUkNvb2tpZXMoKTtcbiAgICAgIHRoaXMuc3RhdGVTZXJ2aWNlLnJlbW92ZUludGVyY29tQ29va2llKCk7XG4gICAgICBjb25zdCByZWRpcmVjdFVybFBhcmFtID0gKHRoaXMuc3RhdGVTZXJ2aWNlLmdldExvZ2luVVJMKCkgJiYgdGhpcy5zdGF0ZVNlcnZpY2UuZ2V0TG9naW5VUkwoKS5pbmNsdWRlcygnPycpID8gJyYnIDogJz8nKSArICdyZWRpcmVjdF91cmwnO1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLnN0YXRlU2VydmljZS5nZXRMb2dpblVSTCgpICsgKHJlZGlyZWN0VXJsID8gYCR7cmVkaXJlY3RVcmxQYXJhbX09JHtyZWRpcmVjdFVybH1gIDogJycpO1xuICAgIH1cbiAgfVxufVxuIl19