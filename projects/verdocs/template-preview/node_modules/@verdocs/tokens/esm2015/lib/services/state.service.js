/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { CookieService } from 'ngx-cookie';
import { JwtHelperService } from '@auth0/angular-jwt';
import { VTokenConfigToken } from '../tokens.module';
import { ReplaySubject, interval } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "ngx-cookie";
import * as i2 from "@angular/common/http";
/** @type {?} */
const helper = new JwtHelperService();
export class VerdocsStateService {
    /**
     * @param {?} cookieService
     * @param {?} http
     * @param {?} injector
     * @param {?} platform
     */
    constructor(cookieService, http, injector, platform) {
        this.cookieService = cookieService;
        this.http = http;
        this.injector = injector;
        this.platform = platform;
        this.timerActive = false;
        this.cookieConfig = {
            path: '/',
            domain: 'localhost',
            secure: false
        };
        this.accessList = [];
        this.decodedIdTokenSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(VTokenConfigToken);
        this.domain = this.tokenConfig.domain;
        this.init();
    }
    /**
     * @return {?}
     */
    init() {
        if (this.tokenConfig.loginURL) {
            this.loginURL = this.tokenConfig.loginURL;
        }
        if (this.tokenConfig.cookieName) {
            this.cookieName = this.tokenConfig.cookieName;
        }
        else if (this.tokenConfig.origin) {
            this.cookieName = this.tokenConfig.origin + VerdocsStateService.COOKIE_NAME_SUFFIX;
        }
        this.production = this.tokenConfig.production || false;
        this.cookieConfig.domain = this.getDomain();
        if (this.tokenConfig.production) {
            this.cookieConfig.secure = true;
        }
        this.getAccessList();
    }
    /**
     * @return {?}
     */
    getDomain() {
        if (this.production || this.domain !== 'localhost') {
            /** @type {?} */
            const address = this.domain.split('.');
            return '.' + address[address.length - 2] + '.' + address[address.length - 1];
        }
        else {
            return 'localhost';
        }
    }
    /**
     * @return {?}
     */
    watchAuthentication() {
        if (isPlatformBrowser(this.platform)) {
            if (!this.timerActive) {
                this.timerActive = true;
                this.authenticationWatcher = interval(15000).subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.getAccessList();
                    if ((this.accessList.indexOf(VerdocsStateService.RACCOUNT_COOKIE_NAME) === -1 || this.accessList.indexOf(this.cookieName) === -1)) {
                        this.cookieService.removeAll();
                        window.location.href = this.getLoginURL();
                    }
                    ;
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    endWatchAuthentication() {
        this.authenticationWatcher.unsubscribe();
    }
    /**
     * @return {?}
     */
    getAccountCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie_prefix = this.tokenConfig.account_name || 'rAccount';
            /** @type {?} */
            const cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            const cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    }
    /**
     * @return {?}
     */
    getVerdocsCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie_prefix = this.tokenConfig.verdocs_name || 'rForm';
            /** @type {?} */
            const cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            const cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    }
    /**
     * @return {?}
     */
    getAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            if (this.cookieName) {
                /** @type {?} */
                const cookie = this.getOtherCookieObject(this.cookieName);
                if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                    this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    return this.accessToken;
                }
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    getVerdocsAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getVerdocsCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    }
    /**
     * @return {?}
     */
    getAccountAccessToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    }
    /**
     * @return {?}
     */
    getIDToken() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                this.idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                this.decodedIdTokenSubject.next(helper.decodeToken(this.idToken));
                return this.idToken;
            }
        }
        return null;
    }
    /**
     * @return {?}
     */
    getLoginURL() {
        return this.loginURL;
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setTimer(state) {
        this.timerActive = state;
    }
    /**
     * @return {?}
     */
    getUserId() {
        /** @type {?} */
        const idToken = this.getIDToken();
        if (!!idToken) {
            /** @type {?} */
            const idTokenContent = this.tokenToObject(idToken);
            if (idTokenContent['sub']) {
                return idTokenContent['sub'].replace('auth0|', '');
            }
            return null;
        }
        return;
    }
    /**
     * @param {?=} appName
     * @return {?}
     */
    getAppUserId(appName) {
        if (isPlatformBrowser(this.platform)) {
            if (!appName) {
                appName = VerdocsStateService.RACCOUNT_COOKIE_NAME;
            }
            /** @type {?} */
            const cookie = this.cookieService.getObject(appName);
            /** @type {?} */
            let idToken;
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                /** @type {?} */
                const idTokenContent = this.tokenToObject(idToken);
                if (idTokenContent['sub']) {
                    return idTokenContent['sub'].replace('auth0|', '');
                }
            }
            return null;
        }
        return;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    updateCookie(key, value, cookieName) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cName = cookieName ? cookieName : this.cookieName;
            this.cookieConfig.domain = this.getDomain();
            if (window && window.location && location.protocol === 'https:') {
                this.cookieConfig.secure = true;
            }
            /** @type {?} */
            let rAccountCookie = this.getrAccountCookieObject();
            /** @type {?} */
            let otherCookie = this.getOtherCookieObject(cName);
            /** @type {?} */
            let cookie;
            if (!!cName && !!key && !!value) {
                if (cName === VerdocsStateService.RACCOUNT_COOKIE_NAME && !!rAccountCookie) {
                    rAccountCookie[key] = value;
                    cookie = rAccountCookie;
                }
                else if (!!otherCookie) {
                    otherCookie[key] = value;
                    cookie = otherCookie;
                }
                this.cookieService.putObject(cName, cookie, this.cookieConfig);
            }
        }
    }
    /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    updateTokens(rSecureBackend) {
        if (isPlatformBrowser(this.platform)) {
            return this.getTokens(rSecureBackend).pipe(map((/**
             * @param {?} tokens
             * @return {?}
             */
            (tokens) => {
                for (let x = 0; x < tokens.length; x++) {
                    if (tokens[x].clientName === 'rAccount') {
                        this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, tokens[x].idToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        this.decodedIdTokenSubject.next(helper.decodeToken(tokens[x].idToken));
                    }
                    this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, tokens[x].accessToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
                return tokens;
            })));
        }
    }
    /**
     * @return {?}
     */
    hasCookie() {
        return !!this.cookieService.get(this.cookieName);
    }
    /**
     * @return {?}
     */
    getAccessList() {
        if (isPlatformBrowser(this.platform)) {
            this.getAllCookies();
            this.accessList = [];
            for (const cookie in this.cookies) {
                if (cookie.indexOf(VerdocsStateService.COOKIE_NAME_SUFFIX) !== -1) {
                    this.accessList.push(cookie);
                }
            }
            return this.accessList;
        }
    }
    /**
     * @return {?}
     */
    getEmailVerification() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const idToken = this.getIDToken();
            if (!!idToken) {
                /** @type {?} */
                const idTokenContent = this.tokenToObject(idToken);
                return idTokenContent['email_verified'];
            }
            return false;
        }
    }
    /**
     * @param {?} clientName
     * @return {?}
     */
    hasAccessTo(clientName) {
        return this.accessList.indexOf(clientName) !== -1;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    storeOtherCookie(key, value) {
        if (isPlatformBrowser(this.platform)) {
            this.setCookie(key, value);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getOtherCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (key) {
                    /** @type {?} */
                    const value = this.cookieService.getObject(key);
                    return value;
                }
                else {
                    return null;
                }
            }
            catch (err) {
                console.error('Cannot return cookie:', err);
                return null;
            }
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getRCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            return this.cookieService.get(key);
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getOtherCookieObject(key) {
        try {
            if (!!key) {
                if (isPlatformBrowser(this.platform)) {
                    return this.cookieService.getObject(key);
                }
            }
            return null;
        }
        catch (err) {
            if (key !== VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME) {
                console.error('Cannot get cookie: ', err);
            }
            return null;
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeRCookie(key) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.remove(key, this.cookieConfig);
        }
    }
    /**
     * @return {?}
     */
    removeRCookies() {
        if (isPlatformBrowser(this.platform)) {
            if (this.accessList.length > 0) {
                for (const key of this.accessList) {
                    this.removeRCookie(key);
                }
            }
            ;
        }
    }
    /**
     * @return {?}
     */
    removeIntercomCookie() {
        if (isPlatformBrowser(this.platform)) {
            for (const cookie in this.cookies) {
                if (cookie.indexOf('intercom') !== -1) {
                    this.removeRCookie(cookie);
                }
            }
        }
    }
    /**
     * @param {?} tokens
     * @return {?}
     */
    setTokens(tokens) {
        if (isPlatformBrowser(this.platform)) {
            if (tokens && tokens.length > 0) {
                for (const token of tokens) {
                    if (token.clientName === 'rAccount') {
                        this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, token.idToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        this.decodedIdTokenSubject.next(helper.decodeToken(token.idToken));
                    }
                    this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, token.accessToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getrAccountCookieObject() {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (this.cookieName && this.cookieService.get(VerdocsStateService.RACCOUNT_COOKIE_NAME)) {
                    /** @type {?} */
                    const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
                    return cookie;
                }
                return null;
            }
            catch (err) {
                return null;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getAllCookies() {
        if (isPlatformBrowser(this.platform)) {
            this.cookies = this.cookieService.getAll();
        }
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    tokenToObject(token) {
        if (token) {
            /** @type {?} */
            const base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    }
    /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    setCookie(cookieName, cookieValue) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.put(cookieName, cookieValue, this.cookieConfig);
        }
    }
    /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    getTokens(rSecureBackend) {
        return this.http.get(rSecureBackend + '/token');
    }
    /**
     * @return {?}
     */
    getRAccountRoles() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    const accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    const tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[`${VerdocsStateService.TOKEN_NAMESPACE}/roles`];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    }
    /**
     * @return {?}
     */
    getPlans() {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            const cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    const accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    const tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[`${VerdocsStateService.TOKEN_NAMESPACE}/plans`];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    }
}
VerdocsStateService.RACCOUNT_COOKIE_NAME = 'rAccount_Verdocs';
VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME = 'signer_token';
VerdocsStateService.COOKIE_NAME_SUFFIX = '_Verdocs';
VerdocsStateService.ACCESS_TOKEN_NAME = 'accessToken';
VerdocsStateService.ID_TOKEN_NAME = 'idToken';
VerdocsStateService.TOKEN_NAMESPACE = 'https://verdocs.com';
VerdocsStateService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root"
            },] }
];
/** @nocollapse */
VerdocsStateService.ctorParameters = () => [
    { type: CookieService },
    { type: HttpClient },
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
/** @nocollapse */ VerdocsStateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VerdocsStateService_Factory() { return new VerdocsStateService(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: VerdocsStateService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.RACCOUNT_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.COOKIE_NAME_SUFFIX;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ACCESS_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ID_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.loginURL;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.production;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.idToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.timerActive;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.domain;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookies;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.tokenConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.authenticationWatcher;
    /** @type {?} */
    VerdocsStateService.prototype.accessList;
    /** @type {?} */
    VerdocsStateService.prototype.decodedIdTokenSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieService;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,