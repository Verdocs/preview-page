/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { VerdocsRequestInterceptor } from './interceptors/request.interceptor';
import { VerdocsErrorInterceptor } from './interceptors/error.interceptor';
import { VerdocsResponseInterceptor } from './interceptors/response.interceptor';
import { CookieModule } from 'ngx-cookie';
import { VerdocsAuthService } from './services/auth.service';
import { VerdocsAuthGuardService } from './services/authguard.service';
import { VerdocsStateService } from './services/state.service';
import { VerdocsTokenObjectService } from './services/token.service';
import { VerdocsTokenGuardDirective } from './directives/realster-guard.directive';
import { VerifyEmailDialogComponent } from './dialogs/verify-email-dialog.component';
import { MatButtonModule, MatDialogModule } from '@angular/material';
/**
 * @record
 */
export function VTokenConfig() { }
if (false) {
    /** @type {?} */
    VTokenConfig.prototype.production;
    /** @type {?} */
    VTokenConfig.prototype.domain;
    /** @type {?} */
    VTokenConfig.prototype.cookieName;
    /** @type {?} */
    VTokenConfig.prototype.loginURL;
    /** @type {?|undefined} */
    VTokenConfig.prototype.verdocs_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.account_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.origin;
}
/** @type {?} */
export const VTokenConfigToken = new InjectionToken('VTokenConfig');
export class TokensModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static initInterceptor(config) {
        return {
            ngModule: TokensModule,
            providers: [
                {
                    provide: VTokenConfigToken,
                    useValue: config
                }
            ]
        };
    }
}
TokensModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CookieModule.forRoot(),
                    MatButtonModule,
                    MatDialogModule,
                ],
                declarations: [
                    VerdocsTokenGuardDirective,
                    VerifyEmailDialogComponent
                ],
                providers: [
                    VerdocsResponseInterceptor,
                    VerdocsRequestInterceptor,
                    VerdocsErrorInterceptor,
                    VerdocsAuthService,
                    VerdocsAuthGuardService,
                    VerdocsStateService,
                    VerdocsTokenObjectService
                ],
                entryComponents: [
                    VerifyEmailDialogComponent
                ],
                exports: [
                    VerdocsTokenGuardDirective,
                    VerifyEmailDialogComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL3Rva2Vucy8iLCJzb3VyY2VzIjpbImxpYi90b2tlbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVqRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFFckUsa0NBUUM7OztJQVBDLGtDQUFvQjs7SUFDcEIsOEJBQWU7O0lBQ2Ysa0NBQW1COztJQUNuQixnQ0FBaUI7O0lBQ2pCLG9DQUFzQjs7SUFDdEIsb0NBQXNCOztJQUN0Qiw4QkFBOEI7OztBQUdoQyxNQUFNLE9BQU8saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQWUsY0FBYyxDQUFDO0FBNkJqRixNQUFNLE9BQU8sWUFBWTs7Ozs7SUFDdkIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFvQjtRQUN6QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjthQUNGO1NBQ0YsQ0FBQTtJQUNILENBQUM7OztZQXRDRixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVksQ0FBQyxPQUFPLEVBQUU7b0JBQ3RCLGVBQWU7b0JBQ2YsZUFBZTtpQkFDaEI7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLDBCQUEwQjtvQkFDMUIsMEJBQTBCO2lCQUMzQjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1QsMEJBQTBCO29CQUMxQix5QkFBeUI7b0JBQ3pCLHVCQUF1QjtvQkFDdkIsa0JBQWtCO29CQUNsQix1QkFBdUI7b0JBQ3ZCLG1CQUFtQjtvQkFDbkIseUJBQXlCO2lCQUMxQjtnQkFDRCxlQUFlLEVBQUU7b0JBQ2YsMEJBQTBCO2lCQUMzQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsMEJBQTBCO29CQUMxQiwwQkFBMEI7aUJBQzNCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVmVyZG9jc1JlcXVlc3RJbnRlcmNlcHRvciB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL3JlcXVlc3QuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgVmVyZG9jc0Vycm9ySW50ZXJjZXB0b3IgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9lcnJvci5pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBWZXJkb2NzUmVzcG9uc2VJbnRlcmNlcHRvciB9IGZyb20gJy4vaW50ZXJjZXB0b3JzL3Jlc3BvbnNlLmludGVyY2VwdG9yJztcblxuaW1wb3J0IHsgQ29va2llTW9kdWxlIH0gZnJvbSAnbmd4LWNvb2tpZSc7XG5pbXBvcnQgeyBWZXJkb2NzQXV0aFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2F1dGguc2VydmljZSc7XG5pbXBvcnQgeyBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXV0aGd1YXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBWZXJkb2NzVG9rZW5PYmplY3RTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy90b2tlbi5zZXJ2aWNlJztcblxuaW1wb3J0IHsgVmVyZG9jc1Rva2VuR3VhcmREaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvcmVhbHN0ZXItZ3VhcmQuZGlyZWN0aXZlJztcbmltcG9ydCB7IFZlcmlmeUVtYWlsRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9kaWFsb2dzL3ZlcmlmeS1lbWFpbC1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSwgTWF0RGlhbG9nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZUb2tlbkNvbmZpZyB7XG4gIHByb2R1Y3Rpb246IGJvb2xlYW47XG4gIGRvbWFpbjogc3RyaW5nO1xuICBjb29raWVOYW1lOiBzdHJpbmc7XG4gIGxvZ2luVVJMOiBzdHJpbmc7XG4gIHZlcmRvY3NfbmFtZT86IHN0cmluZztcbiAgYWNjb3VudF9uYW1lPzogc3RyaW5nO1xuICBvcmlnaW4/OiAnckFjY291bnQnIHwgJ3JGb3JtJztcbn1cblxuZXhwb3J0IGNvbnN0IFZUb2tlbkNvbmZpZ1Rva2VuID0gbmV3IEluamVjdGlvblRva2VuPFZUb2tlbkNvbmZpZz4oJ1ZUb2tlbkNvbmZpZycpO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29va2llTW9kdWxlLmZvclJvb3QoKSxcbiAgICBNYXRCdXR0b25Nb2R1bGUsXG4gICAgTWF0RGlhbG9nTW9kdWxlLFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBWZXJkb2NzVG9rZW5HdWFyZERpcmVjdGl2ZSxcbiAgICBWZXJpZnlFbWFpbERpYWxvZ0NvbXBvbmVudFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBWZXJkb2NzUmVzcG9uc2VJbnRlcmNlcHRvcixcbiAgICBWZXJkb2NzUmVxdWVzdEludGVyY2VwdG9yLFxuICAgIFZlcmRvY3NFcnJvckludGVyY2VwdG9yLFxuICAgIFZlcmRvY3NBdXRoU2VydmljZSxcbiAgICBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSxcbiAgICBWZXJkb2NzU3RhdGVTZXJ2aWNlLFxuICAgIFZlcmRvY3NUb2tlbk9iamVjdFNlcnZpY2VcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgVmVyaWZ5RW1haWxEaWFsb2dDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFZlcmRvY3NUb2tlbkd1YXJkRGlyZWN0aXZlLFxuICAgIFZlcmlmeUVtYWlsRGlhbG9nQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgVG9rZW5zTW9kdWxlIHtcbiAgc3RhdGljIGluaXRJbnRlcmNlcHRvcihjb25maWc6IFZUb2tlbkNvbmZpZykge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogVG9rZW5zTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBWVG9rZW5Db25maWdUb2tlbixcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH1cbn1cbiJdfQ==