import { Injectable, Injector, Inject, PLATFORM_ID, ɵɵdefineInjectable, ɵɵinject, INJECTOR, forwardRef, Component, EventEmitter, Directive, Output, Input, InjectionToken, NgModule } from '@angular/core';
import { __values } from 'tslib';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { CookieService, CookieModule } from 'ngx-cookie';
import { JwtHelperService } from '@auth0/angular-jwt';
import { ReplaySubject, interval, throwError, Subscription } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { ActivatedRoute } from '@angular/router';
import { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatButtonModule, MatDialogModule } from '@angular/material';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function EmailVerificationData() { }
if (false) {
    /** @type {?} */
    EmailVerificationData.prototype.emailAddress;
    /** @type {?} */
    EmailVerificationData.prototype.resendEmailVerification;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var helper = new JwtHelperService();
var VerdocsStateService = /** @class */ (function () {
    function VerdocsStateService(cookieService, http, injector, platform) {
        this.cookieService = cookieService;
        this.http = http;
        this.injector = injector;
        this.platform = platform;
        this.timerActive = false;
        this.cookieConfig = {
            path: '/',
            domain: 'localhost',
            secure: false
        };
        this.accessList = [];
        this.decodedIdTokenSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(VTokenConfigToken);
        this.domain = this.tokenConfig.domain;
        this.init();
    }
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.init = /**
     * @return {?}
     */
    function () {
        if (this.tokenConfig.loginURL) {
            this.loginURL = this.tokenConfig.loginURL;
        }
        if (this.tokenConfig.cookieName) {
            this.cookieName = this.tokenConfig.cookieName;
        }
        else if (this.tokenConfig.origin) {
            this.cookieName = this.tokenConfig.origin + VerdocsStateService.COOKIE_NAME_SUFFIX;
        }
        this.production = this.tokenConfig.production || false;
        this.cookieConfig.domain = this.getDomain();
        if (this.tokenConfig.production) {
            this.cookieConfig.secure = true;
        }
        this.getAccessList();
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getDomain = /**
     * @return {?}
     */
    function () {
        if (this.production || this.domain !== 'localhost') {
            /** @type {?} */
            var address = this.domain.split('.');
            return '.' + address[address.length - 2] + '.' + address[address.length - 1];
        }
        else {
            return 'localhost';
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.watchAuthentication = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            if (!this.timerActive) {
                this.timerActive = true;
                this.authenticationWatcher = interval(15000).subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.getAccessList();
                    if ((_this.accessList.indexOf(VerdocsStateService.RACCOUNT_COOKIE_NAME) === -1 || _this.accessList.indexOf(_this.cookieName) === -1)) {
                        _this.cookieService.removeAll();
                        window.location.href = _this.getLoginURL();
                    }
                    ;
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.endWatchAuthentication = /**
     * @return {?}
     */
    function () {
        this.authenticationWatcher.unsubscribe();
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccountCookieObject = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie_prefix = this.tokenConfig.account_name || 'rAccount';
            /** @type {?} */
            var cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            var cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getVerdocsCookieObject = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie_prefix = this.tokenConfig.verdocs_name || 'rForm';
            /** @type {?} */
            var cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            var cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            if (this.cookieName) {
                /** @type {?} */
                var cookie = this.getOtherCookieObject(this.cookieName);
                if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                    this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    return this.accessToken;
                }
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getVerdocsAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getVerdocsCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccountAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getIDToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                this.idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                this.decodedIdTokenSubject.next(helper.decodeToken(this.idToken));
                return this.idToken;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getLoginURL = /**
     * @return {?}
     */
    function () {
        return this.loginURL;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    VerdocsStateService.prototype.setTimer = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.timerActive = state;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getUserId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idToken = this.getIDToken();
        if (!!idToken) {
            /** @type {?} */
            var idTokenContent = this.tokenToObject(idToken);
            if (idTokenContent['sub']) {
                return idTokenContent['sub'].replace('auth0|', '');
            }
            return null;
        }
        return;
    };
    /**
     * @param {?=} appName
     * @return {?}
     */
    VerdocsStateService.prototype.getAppUserId = /**
     * @param {?=} appName
     * @return {?}
     */
    function (appName) {
        if (isPlatformBrowser(this.platform)) {
            if (!appName) {
                appName = VerdocsStateService.RACCOUNT_COOKIE_NAME;
            }
            /** @type {?} */
            var cookie = this.cookieService.getObject(appName);
            /** @type {?} */
            var idToken = void 0;
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                /** @type {?} */
                var idTokenContent = this.tokenToObject(idToken);
                if (idTokenContent['sub']) {
                    return idTokenContent['sub'].replace('auth0|', '');
                }
            }
            return null;
        }
        return;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    VerdocsStateService.prototype.updateCookie = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    function (key, value, cookieName) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cName = cookieName ? cookieName : this.cookieName;
            this.cookieConfig.domain = this.getDomain();
            if (window && window.location && location.protocol === 'https:') {
                this.cookieConfig.secure = true;
            }
            /** @type {?} */
            var rAccountCookie = this.getrAccountCookieObject();
            /** @type {?} */
            var otherCookie = this.getOtherCookieObject(cName);
            /** @type {?} */
            var cookie = void 0;
            if (!!cName && !!key && !!value) {
                if (cName === VerdocsStateService.RACCOUNT_COOKIE_NAME && !!rAccountCookie) {
                    rAccountCookie[key] = value;
                    cookie = rAccountCookie;
                }
                else if (!!otherCookie) {
                    otherCookie[key] = value;
                    cookie = otherCookie;
                }
                this.cookieService.putObject(cName, cookie, this.cookieConfig);
            }
        }
    };
    /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    VerdocsStateService.prototype.updateTokens = /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    function (rSecureBackend) {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            return this.getTokens(rSecureBackend).pipe(map((/**
             * @param {?} tokens
             * @return {?}
             */
            function (tokens) {
                for (var x = 0; x < tokens.length; x++) {
                    if (tokens[x].clientName === 'rAccount') {
                        _this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, tokens[x].idToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        _this.decodedIdTokenSubject.next(helper.decodeToken(tokens[x].idToken));
                    }
                    _this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, tokens[x].accessToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
                return tokens;
            })));
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.hasCookie = /**
     * @return {?}
     */
    function () {
        return !!this.cookieService.get(this.cookieName);
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccessList = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            this.getAllCookies();
            this.accessList = [];
            for (var cookie in this.cookies) {
                if (cookie.indexOf(VerdocsStateService.COOKIE_NAME_SUFFIX) !== -1) {
                    this.accessList.push(cookie);
                }
            }
            return this.accessList;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getEmailVerification = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var idToken = this.getIDToken();
            if (!!idToken) {
                /** @type {?} */
                var idTokenContent = this.tokenToObject(idToken);
                return idTokenContent['email_verified'];
            }
            return false;
        }
    };
    /**
     * @param {?} clientName
     * @return {?}
     */
    VerdocsStateService.prototype.hasAccessTo = /**
     * @param {?} clientName
     * @return {?}
     */
    function (clientName) {
        return this.accessList.indexOf(clientName) !== -1;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    VerdocsStateService.prototype.storeOtherCookie = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (isPlatformBrowser(this.platform)) {
            this.setCookie(key, value);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getOtherCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (key) {
                    /** @type {?} */
                    var value = this.cookieService.getObject(key);
                    return value;
                }
                else {
                    return null;
                }
            }
            catch (err) {
                console.error('Cannot return cookie:', err);
                return null;
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getRCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            return this.cookieService.get(key);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getOtherCookieObject = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        try {
            if (!!key) {
                if (isPlatformBrowser(this.platform)) {
                    return this.cookieService.getObject(key);
                }
            }
            return null;
        }
        catch (err) {
            if (key !== VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME) {
                console.error('Cannot get cookie: ', err);
            }
            return null;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.removeRCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.remove(key, this.cookieConfig);
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.removeRCookies = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (isPlatformBrowser(this.platform)) {
            if (this.accessList.length > 0) {
                try {
                    for (var _b = __values(this.accessList), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        this.removeRCookie(key);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            ;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.removeIntercomCookie = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            for (var cookie in this.cookies) {
                if (cookie.indexOf('intercom') !== -1) {
                    this.removeRCookie(cookie);
                }
            }
        }
    };
    /**
     * @param {?} tokens
     * @return {?}
     */
    VerdocsStateService.prototype.setTokens = /**
     * @param {?} tokens
     * @return {?}
     */
    function (tokens) {
        var e_2, _a;
        if (isPlatformBrowser(this.platform)) {
            if (tokens && tokens.length > 0) {
                try {
                    for (var tokens_1 = __values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                        var token = tokens_1_1.value;
                        if (token.clientName === 'rAccount') {
                            this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, token.idToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                            this.decodedIdTokenSubject.next(helper.decodeToken(token.idToken));
                        }
                        this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, token.accessToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsStateService.prototype.getrAccountCookieObject = /**
     * @private
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (this.cookieName && this.cookieService.get(VerdocsStateService.RACCOUNT_COOKIE_NAME)) {
                    /** @type {?} */
                    var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
                    return cookie;
                }
                return null;
            }
            catch (err) {
                return null;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsStateService.prototype.getAllCookies = /**
     * @private
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            this.cookies = this.cookieService.getAll();
        }
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    VerdocsStateService.prototype.tokenToObject = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token) {
            /** @type {?} */
            var base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    };
    /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    VerdocsStateService.prototype.setCookie = /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    function (cookieName, cookieValue) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.put(cookieName, cookieValue, this.cookieConfig);
        }
    };
    /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    VerdocsStateService.prototype.getTokens = /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    function (rSecureBackend) {
        return this.http.get(rSecureBackend + '/token');
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getRAccountRoles = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    var accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    var tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[VerdocsStateService.TOKEN_NAMESPACE + "/roles"];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getPlans = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    var accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    var tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[VerdocsStateService.TOKEN_NAMESPACE + "/plans"];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    };
    VerdocsStateService.RACCOUNT_COOKIE_NAME = 'rAccount_Verdocs';
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME = 'signer_token';
    VerdocsStateService.COOKIE_NAME_SUFFIX = '_Verdocs';
    VerdocsStateService.ACCESS_TOKEN_NAME = 'accessToken';
    VerdocsStateService.ID_TOKEN_NAME = 'idToken';
    VerdocsStateService.TOKEN_NAMESPACE = 'https://verdocs.com';
    VerdocsStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    VerdocsStateService.ctorParameters = function () { return [
        { type: CookieService },
        { type: HttpClient },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ VerdocsStateService.ngInjectableDef = ɵɵdefineInjectable({ factory: function VerdocsStateService_Factory() { return new VerdocsStateService(ɵɵinject(CookieService), ɵɵinject(HttpClient), ɵɵinject(INJECTOR), ɵɵinject(PLATFORM_ID)); }, token: VerdocsStateService, providedIn: "root" });
    return VerdocsStateService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.RACCOUNT_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.COOKIE_NAME_SUFFIX;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ACCESS_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ID_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.loginURL;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.production;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.idToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.timerActive;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.domain;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookies;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.tokenConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.authenticationWatcher;
    /** @type {?} */
    VerdocsStateService.prototype.accessList;
    /** @type {?} */
    VerdocsStateService.prototype.decodedIdTokenSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieService;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsRequestInterceptor = /** @class */ (function () {
    function VerdocsRequestInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    VerdocsRequestInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        this.stateService = this.injector.get(VerdocsStateService);
        /** @type {?} */
        var accessToken = this.stateService.getAccessToken();
        /** @type {?} */
        var idToken = this.stateService.getIDToken();
        /** @type {?} */
        var signerToken = this.stateService.getOtherCookieObject('signer_token');
        /** @type {?} */
        var setHeaders = {
            Pragma: 'no-cache',
            'Cache-Control': 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0'
        };
        if (request.url.startsWith('assets/')) {
            return next.handle(request);
        }
        if (!request.headers.get('Authorization') && accessToken) {
            setHeaders['Authorization'] = "Bearer " + accessToken;
        }
        if (idToken) {
            setHeaders['Authentication'] = "Bearer " + idToken;
        }
        if (signerToken) {
            setHeaders['Signer'] = "Bearer " + signerToken;
        }
        request = request.clone({ setHeaders: setHeaders });
        return next.handle(request);
    };
    VerdocsRequestInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsRequestInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return VerdocsRequestInterceptor;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var helper$1 = new JwtHelperService();
var VerdocsAuthService = /** @class */ (function () {
    function VerdocsAuthService(stateService) {
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    VerdocsAuthService.prototype.isAuthenticated = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var token = this.stateService.getIDToken();
        if (token) {
            /** @type {?} */
            var isTokenExpired = helper$1.isTokenExpired(token);
            return !isTokenExpired;
        }
        return false;
    };
    VerdocsAuthService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsAuthService.ctorParameters = function () { return [
        { type: VerdocsStateService }
    ]; };
    return VerdocsAuthService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthService.prototype.stateService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsAuthGuardService = /** @class */ (function () {
    // handle redirects based on authentication state
    function VerdocsAuthGuardService(authService, stateService, route) {
        this.authService = authService;
        this.stateService = stateService;
        this.route = route;
        this.signOutRequestSubmitted = false;
        /** @type {?} */
        var snapshot = (/** @type {?} */ (this.route.snapshot));
    }
    /**
     * @return {?}
     */
    VerdocsAuthGuardService.prototype.checkLogin = /**
     * @return {?}
     */
    function () {
        if (!this.authService.isAuthenticated) {
            if (this.stateService.getLoginURL()) {
                this.signOut();
            }
        }
        this.stateService.watchAuthentication();
    };
    /**
     * @return {?}
     */
    VerdocsAuthGuardService.prototype.checkAuthentication = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var authenticated = this.authService.isAuthenticated();
        if (!authenticated) {
            this.signOut();
        }
    };
    /**
     * @param {?=} redirectUrl
     * @return {?}
     */
    VerdocsAuthGuardService.prototype.signOut = /**
     * @param {?=} redirectUrl
     * @return {?}
     */
    function (redirectUrl) {
        if (!this.signOutRequestSubmitted) {
            this.signOutRequestSubmitted = true;
            if (!this.authService.isAuthenticated()) {
                redirectUrl = window.location.href;
            }
            this.stateService.removeRCookies();
            this.stateService.removeIntercomCookie();
            /** @type {?} */
            var redirectUrlParam = (this.stateService.getLoginURL() && this.stateService.getLoginURL().includes('?') ? '&' : '?') + 'redirect_url';
            window.location.href = this.stateService.getLoginURL() + (redirectUrl ? redirectUrlParam + "=" + redirectUrl : '');
        }
    };
    VerdocsAuthGuardService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsAuthGuardService.ctorParameters = function () { return [
        { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthService; })),] }] },
        { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsStateService; })),] }] },
        { type: ActivatedRoute }
    ]; };
    return VerdocsAuthGuardService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.signOutRequestSubmitted;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsAuthGuardService.prototype.route;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsErrorInterceptor = /** @class */ (function () {
    function VerdocsErrorInterceptor(injector, platform) {
        this.injector = injector;
        this.platform = platform;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    VerdocsErrorInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        return next.handle(request).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err instanceof HttpErrorResponse) {
                if (err['status'] === 403) {
                    _this.stateService = _this.injector.get(VerdocsStateService);
                    /** @type {?} */
                    var redirectUrl = void 0;
                    if (isPlatformBrowser(_this.platform) && err['error'] && err['error']['reason'] === 'expired') {
                        redirectUrl = window.location.href;
                    }
                    _this.authGuardService = _this.injector.get(VerdocsAuthGuardService);
                    _this.authGuardService.signOut(redirectUrl);
                }
                return throwError(err);
            }
        })));
    };
    VerdocsErrorInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsErrorInterceptor.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return VerdocsErrorInterceptor;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.authGuardService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsResponseInterceptor = /** @class */ (function () {
    function VerdocsResponseInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    VerdocsResponseInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        this.stateService = this.injector.get(VerdocsStateService);
        return next.handle(request).pipe(map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (!!event.headers) {
                /** @type {?} */
                var accessToken = event.headers.get('x-access-token');
                /** @type {?} */
                var idToken = event.headers.get('x-id-token');
                if (accessToken) {
                    _this.stateService.updateCookie('accessToken', accessToken);
                }
                if (idToken) {
                    _this.stateService.updateCookie('idToken', idToken);
                }
            }
            return event;
        })));
    };
    VerdocsResponseInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsResponseInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return VerdocsResponseInterceptor;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsResponseInterceptor.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsTokenObjectService = /** @class */ (function () {
    function VerdocsTokenObjectService(stateService) {
        this.stateService = stateService;
    }
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        return this.tokenToObject(this.stateService.getAccessToken());
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getIDToken = /**
     * @return {?}
     */
    function () {
        return this.tokenToObject(this.stateService.getIDToken());
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getAccountAccessToken = /**
     * @return {?}
     */
    function () {
        return this.tokenToObject(this.stateService.getAccountAccessToken());
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getVerdocsAccessToken = /**
     * @return {?}
     */
    function () {
        return this.tokenToObject(this.stateService.getVerdocsAccessToken());
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getProfile = /**
     * @return {?}
     */
    function () {
        return this.getIDToken() ? this.getIDToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/profile"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getPermissions = /**
     * @return {?}
     */
    function () {
        return this.getAccessToken() ? this.getAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/permissions"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getAccountPermissions = /**
     * @return {?}
     */
    function () {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/permissions"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getVerdocsPermissions = /**
     * @return {?}
     */
    function () {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/permissions"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getPlans = /**
     * @return {?}
     */
    function () {
        return this.getAccessToken() ? this.getAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/plans"] : this.getAccountPlans() ? this.getAccountPlans() : this.getVerdocsPlans() ? this.getVerdocsPlans() : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getOrganizationID = /**
     * @return {?}
     */
    function () {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/organization_id"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getAccountPlans = /**
     * @return {?}
     */
    function () {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/plans"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getVerdocsPlans = /**
     * @return {?}
     */
    function () {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/plans"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getRoles = /**
     * @return {?}
     */
    function () {
        return this.getAccessToken() ? this.getAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/roles"] : this.getAccountRoles() ? this.getAccountRoles() : this.getVerdocsRoles() ? this.getVerdocsRoles() : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getAccountRoles = /**
     * @return {?}
     */
    function () {
        return this.getAccountAccessToken() ? this.getAccountAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/roles"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getVerdocsRoles = /**
     * @return {?}
     */
    function () {
        return this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/roles"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getProfileID = /**
     * @return {?}
     */
    function () {
        return this.getAccessToken() ? this.getAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/profile_id"] : this.getAccountAccessToken() ? this.getAccountAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/profile_id"] : this.getVerdocsAccessToken() ? this.getVerdocsAccessToken()[VerdocsTokenObjectService.TOKEN_NAMESPACE + "/profile_id"] : null;
    };
    /**
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.getUserID = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sub = this.getAccessToken()['sub'] || this.getAccountAccessToken()['sub'];
        /** @type {?} */
        var idStart = sub.indexOf('|') + 1;
        return this.getAccessToken()['sub'].slice(idStart);
    };
    /**
     * @param {?} token
     * @return {?}
     */
    VerdocsTokenObjectService.prototype.tokenToObject = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token) {
            /** @type {?} */
            var base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    };
    VerdocsTokenObjectService.TOKEN_NAMESPACE = 'https://verdocs.com';
    VerdocsTokenObjectService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    VerdocsTokenObjectService.ctorParameters = function () { return [
        { type: VerdocsStateService }
    ]; };
    /** @nocollapse */ VerdocsTokenObjectService.ngInjectableDef = ɵɵdefineInjectable({ factory: function VerdocsTokenObjectService_Factory() { return new VerdocsTokenObjectService(ɵɵinject(VerdocsStateService)); }, token: VerdocsTokenObjectService, providedIn: "root" });
    return VerdocsTokenObjectService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenObjectService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenObjectService.prototype.stateService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerifyEmailDialogComponent = /** @class */ (function () {
    function VerifyEmailDialogComponent(dialogRef, vTokenAuthGuard, vTokenStateService, data) {
        this.dialogRef = dialogRef;
        this.vTokenAuthGuard = vTokenAuthGuard;
        this.vTokenStateService = vTokenStateService;
        this.data = data;
    }
    /**
     * @return {?}
     */
    VerifyEmailDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setInterval((/**
         * @return {?}
         */
        function () {
            if (_this.vTokenStateService.getEmailVerification()) {
                _this.closeDialog();
            }
        }), 10000);
    };
    /**
     * @return {?}
     */
    VerifyEmailDialogComponent.prototype.signOut = /**
     * @return {?}
     */
    function () {
        this.vTokenAuthGuard.signOut(window.location.href);
    };
    /**
     * @return {?}
     */
    VerifyEmailDialogComponent.prototype.resendEmailVerification = /**
     * @return {?}
     */
    function () {
        this.data.resendEmailVerification();
    };
    /**
     * @return {?}
     */
    VerifyEmailDialogComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close();
    };
    VerifyEmailDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'verdocs-verify-email-dialog.component',
                    template: "<div class=\"verify-email__container\">\n    <div class=\"verify-email__title\">\n        Confirm your email address\n    </div>\n    <div class=\"verify-email__content\">\n        We've sent a confirmation email to you at:\n        <br>\n        <span class=\"verify-email__content-email\">\n        {{data.emailAddress}}\n      </span>\n    </div>\n    <div class=\"verify-email__action\">\n        <button mat-button class=\"verify-email__action-button\" (click)=\"signOut()\">LOGOUT</button>\n        <button mat-button class=\"verify-email__action-button\" (click)=\"resendEmailVerification()\">RESEND EMAIL</button>\n    </div>\n</div>\n",
                    styles: [".verify-email__container{width:640px}@media only screen and (max-width:960px){.verify-email__container{width:auto}}.verify-email__title{padding:0 0 14px;color:rgba(0,0,0,.87);font-size:20px;font-weight:500}.verify-email__content{color:rgba(0,0,0,.54)}.verify-email__content-email{padding-top:32px;display:block}.verify-email__action{height:52px;padding-top:10.5px;margin:24px -24px -24px 0;text-align:right}.verify-email__action-button{color:#3f5894;text-transform:uppercase;margin-left:-8px}"]
                }] }
    ];
    /** @nocollapse */
    VerifyEmailDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthGuardService; })),] }] },
        { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsStateService; })),] }] },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return VerifyEmailDialogComponent;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.vTokenAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerifyEmailDialogComponent.prototype.vTokenStateService;
    /** @type {?} */
    VerifyEmailDialogComponent.prototype.data;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var VerdocsTokenGuardDirective = /** @class */ (function () {
    function VerdocsTokenGuardDirective(dialog, verdocsAuthGuard, verdocsStateService, verdocsAuthService, platform) {
        this.dialog = dialog;
        this.verdocsAuthGuard = verdocsAuthGuard;
        this.verdocsStateService = verdocsStateService;
        this.verdocsAuthService = verdocsAuthService;
        this.platform = platform;
        this.verifyEmailDialogIsOpen = false;
        this.idTokenSubscription = new Subscription();
        this.resendEmailVerificationEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.idTokenSubscription = this.verdocsStateService.decodedIdTokenSubject.subscribe((/**
         * @param {?} decodedIdToken
         * @return {?}
         */
        function (decodedIdToken) {
            _this.emailAddress = decodedIdToken.email;
        }));
        setInterval((/**
         * @return {?}
         */
        function () {
            if (_this.enforceAuthentication) {
                _this.verdocsAuthGuard.checkAuthentication();
            }
            if (_this.verdocsAuthService.isAuthenticated()) {
                _this.checkEmailVerification();
            }
        }), 5000);
    };
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.idTokenSubscription.unsubscribe();
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.checkEmailVerification = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var emailVerified = this.verdocsStateService.getEmailVerification();
        if (!emailVerified && !this.verifyEmailDialogIsOpen && isPlatformBrowser(this.platform)) {
            this.verifyEmailDialogIsOpen = true;
            /** @type {?} */
            var email_data = {
                resendEmailVerification: (/**
                 * @return {?}
                 */
                function () { return _this.resendEmailVerification(); }),
                emailAddress: this.emailAddress
            };
            /** @type {?} */
            var verifyEmailDialog = this.dialog.open(VerifyEmailDialogComponent, {
                data: email_data,
                disableClose: true
            });
            verifyEmailDialog.afterClosed().subscribe((/**
             * @return {?}
             */
            function () {
                _this.verifyEmailDialogIsOpen = false;
                location.reload();
            }));
        }
    };
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerification = /**
     * @return {?}
     */
    function () {
        this.resendEmailVerificationEvent.emit();
    };
    VerdocsTokenGuardDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[verdocs-guard]'
                },] }
    ];
    /** @nocollapse */
    VerdocsTokenGuardDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthGuardService; })),] }] },
        { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsStateService; })),] }] },
        { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthService; })),] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    VerdocsTokenGuardDirective.propDecorators = {
        resendEmailVerificationEvent: [{ type: Output }],
        enforceAuthentication: [{ type: Input }]
    };
    return VerdocsTokenGuardDirective;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verifyEmailDialogIsOpen;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.emailAddress;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.idTokenSubscription;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerificationEvent;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.enforceAuthentication;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.platform;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function VTokenConfig() { }
if (false) {
    /** @type {?} */
    VTokenConfig.prototype.production;
    /** @type {?} */
    VTokenConfig.prototype.domain;
    /** @type {?} */
    VTokenConfig.prototype.cookieName;
    /** @type {?} */
    VTokenConfig.prototype.loginURL;
    /** @type {?|undefined} */
    VTokenConfig.prototype.verdocs_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.account_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.origin;
}
/** @type {?} */
var VTokenConfigToken = new InjectionToken('VTokenConfig');
var TokensModule = /** @class */ (function () {
    function TokensModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    TokensModule.initInterceptor = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: TokensModule,
            providers: [
                {
                    provide: VTokenConfigToken,
                    useValue: config
                }
            ]
        };
    };
    TokensModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CookieModule.forRoot(),
                        MatButtonModule,
                        MatDialogModule,
                    ],
                    declarations: [
                        VerdocsTokenGuardDirective,
                        VerifyEmailDialogComponent
                    ],
                    providers: [
                        VerdocsResponseInterceptor,
                        VerdocsRequestInterceptor,
                        VerdocsErrorInterceptor,
                        VerdocsAuthService,
                        VerdocsAuthGuardService,
                        VerdocsStateService,
                        VerdocsTokenObjectService
                    ],
                    entryComponents: [
                        VerifyEmailDialogComponent
                    ],
                    exports: [
                        VerdocsTokenGuardDirective,
                        VerifyEmailDialogComponent
                    ]
                },] }
    ];
    return TokensModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { TokensModule, VTokenConfigToken, VerdocsAuthGuardService, VerdocsAuthService, VerdocsErrorInterceptor, VerdocsRequestInterceptor, VerdocsResponseInterceptor, VerdocsStateService, VerdocsTokenGuardDirective, VerdocsTokenObjectService, VerifyEmailDialogComponent };
//# sourceMappingURL=verdocs-tokens.js.map
