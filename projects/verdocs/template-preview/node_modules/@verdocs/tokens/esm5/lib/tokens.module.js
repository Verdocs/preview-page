/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { VerdocsRequestInterceptor } from './interceptors/request.interceptor';
import { VerdocsErrorInterceptor } from './interceptors/error.interceptor';
import { VerdocsResponseInterceptor } from './interceptors/response.interceptor';
import { CookieModule } from 'ngx-cookie';
import { VerdocsAuthService } from './services/auth.service';
import { VerdocsAuthGuardService } from './services/authguard.service';
import { VerdocsStateService } from './services/state.service';
import { VerdocsTokenObjectService } from './services/token.service';
import { VerdocsTokenGuardDirective } from './directives/realster-guard.directive';
import { VerifyEmailDialogComponent } from './dialogs/verify-email-dialog.component';
import { MatButtonModule, MatDialogModule } from '@angular/material';
/**
 * @record
 */
export function VTokenConfig() { }
if (false) {
    /** @type {?} */
    VTokenConfig.prototype.production;
    /** @type {?} */
    VTokenConfig.prototype.domain;
    /** @type {?} */
    VTokenConfig.prototype.cookieName;
    /** @type {?} */
    VTokenConfig.prototype.loginURL;
    /** @type {?|undefined} */
    VTokenConfig.prototype.verdocs_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.account_name;
    /** @type {?|undefined} */
    VTokenConfig.prototype.origin;
}
/** @type {?} */
export var VTokenConfigToken = new InjectionToken('VTokenConfig');
var TokensModule = /** @class */ (function () {
    function TokensModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    TokensModule.initInterceptor = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: TokensModule,
            providers: [
                {
                    provide: VTokenConfigToken,
                    useValue: config
                }
            ]
        };
    };
    TokensModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CookieModule.forRoot(),
                        MatButtonModule,
                        MatDialogModule,
                    ],
                    declarations: [
                        VerdocsTokenGuardDirective,
                        VerifyEmailDialogComponent
                    ],
                    providers: [
                        VerdocsResponseInterceptor,
                        VerdocsRequestInterceptor,
                        VerdocsErrorInterceptor,
                        VerdocsAuthService,
                        VerdocsAuthGuardService,
                        VerdocsStateService,
                        VerdocsTokenObjectService
                    ],
                    entryComponents: [
                        VerifyEmailDialogComponent
                    ],
                    exports: [
                        VerdocsTokenGuardDirective,
                        VerifyEmailDialogComponent
                    ]
                },] }
    ];
    return TokensModule;
}());
export { TokensModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL3Rva2Vucy8iLCJzb3VyY2VzIjpbImxpYi90b2tlbnMubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUVqRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7QUFFckUsa0NBUUM7OztJQVBDLGtDQUFvQjs7SUFDcEIsOEJBQWU7O0lBQ2Ysa0NBQW1COztJQUNuQixnQ0FBaUI7O0lBQ2pCLG9DQUFzQjs7SUFDdEIsb0NBQXNCOztJQUN0Qiw4QkFBOEI7OztBQUdoQyxNQUFNLEtBQU8saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQWUsY0FBYyxDQUFDO0FBRWpGO0lBQUE7SUF1Q0EsQ0FBQzs7Ozs7SUFYUSw0QkFBZTs7OztJQUF0QixVQUF1QixNQUFvQjtRQUN6QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLFlBQVk7WUFDdEIsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSxpQkFBaUI7b0JBQzFCLFFBQVEsRUFBRSxNQUFNO2lCQUNqQjthQUNGO1NBQ0YsQ0FBQTtJQUNILENBQUM7O2dCQXRDRixRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFlBQVksQ0FBQyxPQUFPLEVBQUU7d0JBQ3RCLGVBQWU7d0JBQ2YsZUFBZTtxQkFDaEI7b0JBQ0QsWUFBWSxFQUFFO3dCQUNaLDBCQUEwQjt3QkFDMUIsMEJBQTBCO3FCQUMzQjtvQkFDRCxTQUFTLEVBQUU7d0JBQ1QsMEJBQTBCO3dCQUMxQix5QkFBeUI7d0JBQ3pCLHVCQUF1Qjt3QkFDdkIsa0JBQWtCO3dCQUNsQix1QkFBdUI7d0JBQ3ZCLG1CQUFtQjt3QkFDbkIseUJBQXlCO3FCQUMxQjtvQkFDRCxlQUFlLEVBQUU7d0JBQ2YsMEJBQTBCO3FCQUMzQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsMEJBQTBCO3dCQUMxQiwwQkFBMEI7cUJBQzNCO2lCQUNGOztJQWFELG1CQUFDO0NBQUEsQUF2Q0QsSUF1Q0M7U0FaWSxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFZlcmRvY3NSZXF1ZXN0SW50ZXJjZXB0b3IgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9yZXF1ZXN0LmludGVyY2VwdG9yJztcbmltcG9ydCB7IFZlcmRvY3NFcnJvckludGVyY2VwdG9yIH0gZnJvbSAnLi9pbnRlcmNlcHRvcnMvZXJyb3IuaW50ZXJjZXB0b3InO1xuaW1wb3J0IHsgVmVyZG9jc1Jlc3BvbnNlSW50ZXJjZXB0b3IgfSBmcm9tICcuL2ludGVyY2VwdG9ycy9yZXNwb25zZS5pbnRlcmNlcHRvcic7XG5cbmltcG9ydCB7IENvb2tpZU1vZHVsZSB9IGZyb20gJ25neC1jb29raWUnO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2F1dGhndWFyZC5zZXJ2aWNlJztcbmltcG9ydCB7IFZlcmRvY3NTdGF0ZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3N0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc1Rva2VuT2JqZWN0U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvdG9rZW4uc2VydmljZSc7XG5cbmltcG9ydCB7IFZlcmRvY3NUb2tlbkd1YXJkRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3JlYWxzdGVyLWd1YXJkLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBWZXJpZnlFbWFpbERpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vZGlhbG9ncy92ZXJpZnktZW1haWwtZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXRCdXR0b25Nb2R1bGUsIE1hdERpYWxvZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuZXhwb3J0IGludGVyZmFjZSBWVG9rZW5Db25maWcge1xuICBwcm9kdWN0aW9uOiBib29sZWFuO1xuICBkb21haW46IHN0cmluZztcbiAgY29va2llTmFtZTogc3RyaW5nO1xuICBsb2dpblVSTDogc3RyaW5nO1xuICB2ZXJkb2NzX25hbWU/OiBzdHJpbmc7XG4gIGFjY291bnRfbmFtZT86IHN0cmluZztcbiAgb3JpZ2luPzogJ3JBY2NvdW50JyB8ICdyRm9ybSc7XG59XG5cbmV4cG9ydCBjb25zdCBWVG9rZW5Db25maWdUb2tlbiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxWVG9rZW5Db25maWc+KCdWVG9rZW5Db25maWcnKTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvb2tpZU1vZHVsZS5mb3JSb290KCksXG4gICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgIE1hdERpYWxvZ01vZHVsZSxcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgVmVyZG9jc1Rva2VuR3VhcmREaXJlY3RpdmUsXG4gICAgVmVyaWZ5RW1haWxEaWFsb2dDb21wb25lbnRcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgVmVyZG9jc1Jlc3BvbnNlSW50ZXJjZXB0b3IsXG4gICAgVmVyZG9jc1JlcXVlc3RJbnRlcmNlcHRvcixcbiAgICBWZXJkb2NzRXJyb3JJbnRlcmNlcHRvcixcbiAgICBWZXJkb2NzQXV0aFNlcnZpY2UsXG4gICAgVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UsXG4gICAgVmVyZG9jc1N0YXRlU2VydmljZSxcbiAgICBWZXJkb2NzVG9rZW5PYmplY3RTZXJ2aWNlXG4gIF0sXG4gIGVudHJ5Q29tcG9uZW50czogW1xuICAgIFZlcmlmeUVtYWlsRGlhbG9nQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBWZXJkb2NzVG9rZW5HdWFyZERpcmVjdGl2ZSxcbiAgICBWZXJpZnlFbWFpbERpYWxvZ0NvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFRva2Vuc01vZHVsZSB7XG4gIHN0YXRpYyBpbml0SW50ZXJjZXB0b3IoY29uZmlnOiBWVG9rZW5Db25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFRva2Vuc01vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogVlRva2VuQ29uZmlnVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1xuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9XG59XG4iXX0=