/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { VerdocsStateService } from '../services/state.service';
var VerdocsRequestInterceptor = /** @class */ (function () {
    function VerdocsRequestInterceptor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    VerdocsRequestInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        this.stateService = this.injector.get(VerdocsStateService);
        /** @type {?} */
        var accessToken = this.stateService.getAccessToken();
        /** @type {?} */
        var idToken = this.stateService.getIDToken();
        /** @type {?} */
        var signerToken = this.stateService.getOtherCookieObject('signer_token');
        /** @type {?} */
        var setHeaders = {
            Pragma: 'no-cache',
            'Cache-Control': 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',
            'If-Modified-Since': '0'
        };
        if (request.url.startsWith('assets/')) {
            return next.handle(request);
        }
        if (!request.headers.get('Authorization') && accessToken) {
            setHeaders['Authorization'] = "Bearer " + accessToken;
        }
        if (idToken) {
            setHeaders['Authentication'] = "Bearer " + idToken;
        }
        if (signerToken) {
            setHeaders['Signer'] = "Bearer " + signerToken;
        }
        request = request.clone({ setHeaders: setHeaders });
        return next.handle(request);
    };
    VerdocsRequestInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsRequestInterceptor.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return VerdocsRequestInterceptor;
}());
export { VerdocsRequestInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsRequestInterceptor.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B2ZXJkb2NzL3Rva2Vucy8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvcmVxdWVzdC5pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEU7SUFHRSxtQ0FDVSxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ3hCLENBQUM7Ozs7OztJQUNMLDZDQUFTOzs7OztJQUFULFVBQVUsT0FBeUIsRUFBRSxJQUFpQjtRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O1lBQ3JELFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRTs7WUFDaEQsT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFOztZQUN4QyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUM7O1lBQ3BFLFVBQVUsR0FBRztZQUNqQixNQUFNLEVBQUUsVUFBVTtZQUNsQixlQUFlLEVBQUUsVUFBVTtZQUMzQixPQUFPLEVBQUUsK0JBQStCO1lBQ3hDLG1CQUFtQixFQUFFLEdBQUc7U0FDekI7UUFFRCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxXQUFXLEVBQUU7WUFDeEQsVUFBVSxDQUFDLGVBQWUsQ0FBQyxHQUFHLFlBQVUsV0FBYSxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxZQUFVLE9BQVMsQ0FBQztTQUNwRDtRQUNELElBQUksV0FBVyxFQUFFO1lBQ2YsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFlBQVUsV0FBYSxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxVQUFVLFlBQUEsRUFBRSxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzdCLENBQUM7O2dCQWxDRixVQUFVOzs7O2dCQVZVLFFBQVE7O0lBNkM3QixnQ0FBQztDQUFBLEFBbkNELElBbUNDO1NBbENZLHlCQUF5Qjs7Ozs7O0lBQ3BDLGlEQUEwQzs7Ozs7SUFFeEMsNkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGFuZGxlcixcbiAgSHR0cEV2ZW50LFxuICBIdHRwSW50ZXJjZXB0b3Jcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBWZXJkb2NzU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc3RhdGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWZXJkb2NzUmVxdWVzdEludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcbiAgcHJpdmF0ZSBzdGF0ZVNlcnZpY2U6IFZlcmRvY3NTdGF0ZVNlcnZpY2U7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXG4gICkgeyB9XG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcikge1xuICAgIHRoaXMuc3RhdGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoVmVyZG9jc1N0YXRlU2VydmljZSk7XG4gICAgY29uc3QgYWNjZXNzVG9rZW4gPSB0aGlzLnN0YXRlU2VydmljZS5nZXRBY2Nlc3NUb2tlbigpO1xuICAgIGNvbnN0IGlkVG9rZW4gPSB0aGlzLnN0YXRlU2VydmljZS5nZXRJRFRva2VuKCk7XG4gICAgY29uc3Qgc2lnbmVyVG9rZW4gPSB0aGlzLnN0YXRlU2VydmljZS5nZXRPdGhlckNvb2tpZU9iamVjdCgnc2lnbmVyX3Rva2VuJyk7XG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IHtcbiAgICAgIFByYWdtYTogJ25vLWNhY2hlJyxcbiAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLWNhY2hlJyxcbiAgICAgIEV4cGlyZXM6ICdTYXQsIDAxIEphbiAyMDAwIDAwOjAwOjAwIEdNVCcsXG4gICAgICAnSWYtTW9kaWZpZWQtU2luY2UnOiAnMCdcbiAgICB9O1xuXG4gICAgaWYgKHJlcXVlc3QudXJsLnN0YXJ0c1dpdGgoJ2Fzc2V0cy8nKSkge1xuICAgICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcXVlc3QpO1xuICAgIH1cblxuICAgIGlmICghcmVxdWVzdC5oZWFkZXJzLmdldCgnQXV0aG9yaXphdGlvbicpICYmIGFjY2Vzc1Rva2VuKSB7XG4gICAgICBzZXRIZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgQmVhcmVyICR7YWNjZXNzVG9rZW59YDtcbiAgICB9XG4gICAgaWYgKGlkVG9rZW4pIHtcbiAgICAgIHNldEhlYWRlcnNbJ0F1dGhlbnRpY2F0aW9uJ10gPSBgQmVhcmVyICR7aWRUb2tlbn1gO1xuICAgIH1cbiAgICBpZiAoc2lnbmVyVG9rZW4pIHtcbiAgICAgIHNldEhlYWRlcnNbJ1NpZ25lciddID0gYEJlYXJlciAke3NpZ25lclRva2VufWA7XG4gICAgfVxuICAgIHJlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHsgc2V0SGVhZGVycyB9KTtcblxuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KVxuICB9XG59XG4iXX0=