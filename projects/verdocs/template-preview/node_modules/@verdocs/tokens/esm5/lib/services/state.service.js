/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { CookieService } from 'ngx-cookie';
import { JwtHelperService } from '@auth0/angular-jwt';
import { VTokenConfigToken } from '../tokens.module';
import { ReplaySubject, interval } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "ngx-cookie";
import * as i2 from "@angular/common/http";
/** @type {?} */
var helper = new JwtHelperService();
var VerdocsStateService = /** @class */ (function () {
    function VerdocsStateService(cookieService, http, injector, platform) {
        this.cookieService = cookieService;
        this.http = http;
        this.injector = injector;
        this.platform = platform;
        this.timerActive = false;
        this.cookieConfig = {
            path: '/',
            domain: 'localhost',
            secure: false
        };
        this.accessList = [];
        this.decodedIdTokenSubject = new ReplaySubject();
        this.tokenConfig = this.injector.get(VTokenConfigToken);
        this.domain = this.tokenConfig.domain;
        this.init();
    }
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.init = /**
     * @return {?}
     */
    function () {
        if (this.tokenConfig.loginURL) {
            this.loginURL = this.tokenConfig.loginURL;
        }
        if (this.tokenConfig.cookieName) {
            this.cookieName = this.tokenConfig.cookieName;
        }
        else if (this.tokenConfig.origin) {
            this.cookieName = this.tokenConfig.origin + VerdocsStateService.COOKIE_NAME_SUFFIX;
        }
        this.production = this.tokenConfig.production || false;
        this.cookieConfig.domain = this.getDomain();
        if (this.tokenConfig.production) {
            this.cookieConfig.secure = true;
        }
        this.getAccessList();
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getDomain = /**
     * @return {?}
     */
    function () {
        if (this.production || this.domain !== 'localhost') {
            /** @type {?} */
            var address = this.domain.split('.');
            return '.' + address[address.length - 2] + '.' + address[address.length - 1];
        }
        else {
            return 'localhost';
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.watchAuthentication = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            if (!this.timerActive) {
                this.timerActive = true;
                this.authenticationWatcher = interval(15000).subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.getAccessList();
                    if ((_this.accessList.indexOf(VerdocsStateService.RACCOUNT_COOKIE_NAME) === -1 || _this.accessList.indexOf(_this.cookieName) === -1)) {
                        _this.cookieService.removeAll();
                        window.location.href = _this.getLoginURL();
                    }
                    ;
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.endWatchAuthentication = /**
     * @return {?}
     */
    function () {
        this.authenticationWatcher.unsubscribe();
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccountCookieObject = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie_prefix = this.tokenConfig.account_name || 'rAccount';
            /** @type {?} */
            var cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            var cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getVerdocsCookieObject = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie_prefix = this.tokenConfig.verdocs_name || 'rForm';
            /** @type {?} */
            var cookie_name = cookie_prefix + VerdocsStateService.COOKIE_NAME_SUFFIX;
            /** @type {?} */
            var cookie = this.getOtherCookieObject(cookie_name);
            return cookie;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            if (this.cookieName) {
                /** @type {?} */
                var cookie = this.getOtherCookieObject(this.cookieName);
                if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                    this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    return this.accessToken;
                }
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getVerdocsAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getVerdocsCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccountAccessToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ACCESS_TOKEN_NAME]) {
                this.accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                return this.accessToken;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getIDToken = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.getAccountCookieObject();
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                this.idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                this.decodedIdTokenSubject.next(helper.decodeToken(this.idToken));
                return this.idToken;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getLoginURL = /**
     * @return {?}
     */
    function () {
        return this.loginURL;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    VerdocsStateService.prototype.setTimer = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.timerActive = state;
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getUserId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var idToken = this.getIDToken();
        if (!!idToken) {
            /** @type {?} */
            var idTokenContent = this.tokenToObject(idToken);
            if (idTokenContent['sub']) {
                return idTokenContent['sub'].replace('auth0|', '');
            }
            return null;
        }
        return;
    };
    /**
     * @param {?=} appName
     * @return {?}
     */
    VerdocsStateService.prototype.getAppUserId = /**
     * @param {?=} appName
     * @return {?}
     */
    function (appName) {
        if (isPlatformBrowser(this.platform)) {
            if (!appName) {
                appName = VerdocsStateService.RACCOUNT_COOKIE_NAME;
            }
            /** @type {?} */
            var cookie = this.cookieService.getObject(appName);
            /** @type {?} */
            var idToken = void 0;
            if (cookie && cookie[VerdocsStateService.ID_TOKEN_NAME]) {
                idToken = cookie[VerdocsStateService.ID_TOKEN_NAME];
                /** @type {?} */
                var idTokenContent = this.tokenToObject(idToken);
                if (idTokenContent['sub']) {
                    return idTokenContent['sub'].replace('auth0|', '');
                }
            }
            return null;
        }
        return;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    VerdocsStateService.prototype.updateCookie = /**
     * @param {?} key
     * @param {?} value
     * @param {?=} cookieName
     * @return {?}
     */
    function (key, value, cookieName) {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cName = cookieName ? cookieName : this.cookieName;
            this.cookieConfig.domain = this.getDomain();
            if (window && window.location && location.protocol === 'https:') {
                this.cookieConfig.secure = true;
            }
            /** @type {?} */
            var rAccountCookie = this.getrAccountCookieObject();
            /** @type {?} */
            var otherCookie = this.getOtherCookieObject(cName);
            /** @type {?} */
            var cookie = void 0;
            if (!!cName && !!key && !!value) {
                if (cName === VerdocsStateService.RACCOUNT_COOKIE_NAME && !!rAccountCookie) {
                    rAccountCookie[key] = value;
                    cookie = rAccountCookie;
                }
                else if (!!otherCookie) {
                    otherCookie[key] = value;
                    cookie = otherCookie;
                }
                this.cookieService.putObject(cName, cookie, this.cookieConfig);
            }
        }
    };
    /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    VerdocsStateService.prototype.updateTokens = /**
     * @param {?} rSecureBackend
     * @return {?}
     */
    function (rSecureBackend) {
        var _this = this;
        if (isPlatformBrowser(this.platform)) {
            return this.getTokens(rSecureBackend).pipe(map((/**
             * @param {?} tokens
             * @return {?}
             */
            function (tokens) {
                for (var x = 0; x < tokens.length; x++) {
                    if (tokens[x].clientName === 'rAccount') {
                        _this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, tokens[x].idToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                        _this.decodedIdTokenSubject.next(helper.decodeToken(tokens[x].idToken));
                    }
                    _this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, tokens[x].accessToken, tokens[x].clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                }
                return tokens;
            })));
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.hasCookie = /**
     * @return {?}
     */
    function () {
        return !!this.cookieService.get(this.cookieName);
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getAccessList = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            this.getAllCookies();
            this.accessList = [];
            for (var cookie in this.cookies) {
                if (cookie.indexOf(VerdocsStateService.COOKIE_NAME_SUFFIX) !== -1) {
                    this.accessList.push(cookie);
                }
            }
            return this.accessList;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getEmailVerification = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var idToken = this.getIDToken();
            if (!!idToken) {
                /** @type {?} */
                var idTokenContent = this.tokenToObject(idToken);
                return idTokenContent['email_verified'];
            }
            return false;
        }
    };
    /**
     * @param {?} clientName
     * @return {?}
     */
    VerdocsStateService.prototype.hasAccessTo = /**
     * @param {?} clientName
     * @return {?}
     */
    function (clientName) {
        return this.accessList.indexOf(clientName) !== -1;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    VerdocsStateService.prototype.storeOtherCookie = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (isPlatformBrowser(this.platform)) {
            this.setCookie(key, value);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getOtherCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (key) {
                    /** @type {?} */
                    var value = this.cookieService.getObject(key);
                    return value;
                }
                else {
                    return null;
                }
            }
            catch (err) {
                console.error('Cannot return cookie:', err);
                return null;
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getRCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            return this.cookieService.get(key);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.getOtherCookieObject = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        try {
            if (!!key) {
                if (isPlatformBrowser(this.platform)) {
                    return this.cookieService.getObject(key);
                }
            }
            return null;
        }
        catch (err) {
            if (key !== VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME) {
                console.error('Cannot get cookie: ', err);
            }
            return null;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    VerdocsStateService.prototype.removeRCookie = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.remove(key, this.cookieConfig);
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.removeRCookies = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (isPlatformBrowser(this.platform)) {
            if (this.accessList.length > 0) {
                try {
                    for (var _b = tslib_1.__values(this.accessList), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        this.removeRCookie(key);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            ;
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.removeIntercomCookie = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            for (var cookie in this.cookies) {
                if (cookie.indexOf('intercom') !== -1) {
                    this.removeRCookie(cookie);
                }
            }
        }
    };
    /**
     * @param {?} tokens
     * @return {?}
     */
    VerdocsStateService.prototype.setTokens = /**
     * @param {?} tokens
     * @return {?}
     */
    function (tokens) {
        var e_2, _a;
        if (isPlatformBrowser(this.platform)) {
            if (tokens && tokens.length > 0) {
                try {
                    for (var tokens_1 = tslib_1.__values(tokens), tokens_1_1 = tokens_1.next(); !tokens_1_1.done; tokens_1_1 = tokens_1.next()) {
                        var token = tokens_1_1.value;
                        if (token.clientName === 'rAccount') {
                            this.updateCookie(VerdocsStateService.ID_TOKEN_NAME, token.idToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                            this.decodedIdTokenSubject.next(helper.decodeToken(token.idToken));
                        }
                        this.updateCookie(VerdocsStateService.ACCESS_TOKEN_NAME, token.accessToken, token.clientName + VerdocsStateService.COOKIE_NAME_SUFFIX);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (tokens_1_1 && !tokens_1_1.done && (_a = tokens_1.return)) _a.call(tokens_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsStateService.prototype.getrAccountCookieObject = /**
     * @private
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            try {
                if (this.cookieName && this.cookieService.get(VerdocsStateService.RACCOUNT_COOKIE_NAME)) {
                    /** @type {?} */
                    var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
                    return cookie;
                }
                return null;
            }
            catch (err) {
                return null;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsStateService.prototype.getAllCookies = /**
     * @private
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            this.cookies = this.cookieService.getAll();
        }
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    VerdocsStateService.prototype.tokenToObject = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        if (token) {
            /** @type {?} */
            var base64Url = token.split('.')[1];
            /** @type {?} */
            var base64 = base64Url.replace('-', '+').replace('_', '/');
            return JSON.parse(window.atob(base64));
        }
        return null;
    };
    /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    VerdocsStateService.prototype.setCookie = /**
     * @private
     * @param {?} cookieName
     * @param {?} cookieValue
     * @return {?}
     */
    function (cookieName, cookieValue) {
        if (isPlatformBrowser(this.platform)) {
            this.cookieService.put(cookieName, cookieValue, this.cookieConfig);
        }
    };
    /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    VerdocsStateService.prototype.getTokens = /**
     * @private
     * @param {?} rSecureBackend
     * @return {?}
     */
    function (rSecureBackend) {
        return this.http.get(rSecureBackend + '/token');
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getRAccountRoles = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    var accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    var tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[VerdocsStateService.TOKEN_NAMESPACE + "/roles"];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    };
    /**
     * @return {?}
     */
    VerdocsStateService.prototype.getPlans = /**
     * @return {?}
     */
    function () {
        if (isPlatformBrowser(this.platform)) {
            /** @type {?} */
            var cookie = this.cookieService.getObject(VerdocsStateService.RACCOUNT_COOKIE_NAME);
            if (!!cookie) {
                try {
                    /** @type {?} */
                    var accessToken = cookie[VerdocsStateService.ACCESS_TOKEN_NAME];
                    /** @type {?} */
                    var tokenObject = this.tokenToObject(accessToken);
                    return tokenObject[VerdocsStateService.TOKEN_NAMESPACE + "/plans"];
                }
                catch (err) {
                    console.error(err);
                }
            }
            else {
                return null;
            }
        }
    };
    VerdocsStateService.RACCOUNT_COOKIE_NAME = 'rAccount_Verdocs';
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME = 'signer_token';
    VerdocsStateService.COOKIE_NAME_SUFFIX = '_Verdocs';
    VerdocsStateService.ACCESS_TOKEN_NAME = 'accessToken';
    VerdocsStateService.ID_TOKEN_NAME = 'idToken';
    VerdocsStateService.TOKEN_NAMESPACE = 'https://verdocs.com';
    VerdocsStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root"
                },] }
    ];
    /** @nocollapse */
    VerdocsStateService.ctorParameters = function () { return [
        { type: CookieService },
        { type: HttpClient },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ VerdocsStateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function VerdocsStateService_Factory() { return new VerdocsStateService(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i0.PLATFORM_ID)); }, token: VerdocsStateService, providedIn: "root" });
    return VerdocsStateService;
}());
export { VerdocsStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.RACCOUNT_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.SIGNER_TOKEN_COOKIE_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.COOKIE_NAME_SUFFIX;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ACCESS_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.ID_TOKEN_NAME;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.TOKEN_NAMESPACE;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.loginURL;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieName;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.production;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.idToken;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.timerActive;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.domain;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookies;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.tokenConfig;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.authenticationWatcher;
    /** @type {?} */
    VerdocsStateService.prototype.accessList;
    /** @type {?} */
    VerdocsStateService.prototype.decodedIdTokenSubject;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.cookieService;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsStateService.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,