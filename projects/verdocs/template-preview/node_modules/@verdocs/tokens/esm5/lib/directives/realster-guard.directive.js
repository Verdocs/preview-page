/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, Input, EventEmitter, Inject, forwardRef, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { MatDialog } from '@angular/material';
import { Subscription } from 'rxjs';
import { VerifyEmailDialogComponent } from '../dialogs/verify-email-dialog.component';
import { VerdocsAuthGuardService } from '../services/authguard.service';
import { VerdocsStateService } from '../services/state.service';
import { VerdocsAuthService } from '../services/auth.service';
var VerdocsTokenGuardDirective = /** @class */ (function () {
    function VerdocsTokenGuardDirective(dialog, verdocsAuthGuard, verdocsStateService, verdocsAuthService, platform) {
        this.dialog = dialog;
        this.verdocsAuthGuard = verdocsAuthGuard;
        this.verdocsStateService = verdocsStateService;
        this.verdocsAuthService = verdocsAuthService;
        this.platform = platform;
        this.verifyEmailDialogIsOpen = false;
        this.idTokenSubscription = new Subscription();
        this.resendEmailVerificationEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.idTokenSubscription = this.verdocsStateService.decodedIdTokenSubject.subscribe((/**
         * @param {?} decodedIdToken
         * @return {?}
         */
        function (decodedIdToken) {
            _this.emailAddress = decodedIdToken.email;
        }));
        setInterval((/**
         * @return {?}
         */
        function () {
            if (_this.enforceAuthentication) {
                _this.verdocsAuthGuard.checkAuthentication();
            }
            if (_this.verdocsAuthService.isAuthenticated()) {
                _this.checkEmailVerification();
            }
        }), 5000);
    };
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.idTokenSubscription.unsubscribe();
    };
    /**
     * @private
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.checkEmailVerification = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var emailVerified = this.verdocsStateService.getEmailVerification();
        if (!emailVerified && !this.verifyEmailDialogIsOpen && isPlatformBrowser(this.platform)) {
            this.verifyEmailDialogIsOpen = true;
            /** @type {?} */
            var email_data = {
                resendEmailVerification: (/**
                 * @return {?}
                 */
                function () { return _this.resendEmailVerification(); }),
                emailAddress: this.emailAddress
            };
            /** @type {?} */
            var verifyEmailDialog = this.dialog.open(VerifyEmailDialogComponent, {
                data: email_data,
                disableClose: true
            });
            verifyEmailDialog.afterClosed().subscribe((/**
             * @return {?}
             */
            function () {
                _this.verifyEmailDialogIsOpen = false;
                location.reload();
            }));
        }
    };
    /**
     * @return {?}
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerification = /**
     * @return {?}
     */
    function () {
        this.resendEmailVerificationEvent.emit();
    };
    VerdocsTokenGuardDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[verdocs-guard]'
                },] }
    ];
    /** @nocollapse */
    VerdocsTokenGuardDirective.ctorParameters = function () { return [
        { type: MatDialog },
        { type: VerdocsAuthGuardService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthGuardService; })),] }] },
        { type: VerdocsStateService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsStateService; })),] }] },
        { type: VerdocsAuthService, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return VerdocsAuthService; })),] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    VerdocsTokenGuardDirective.propDecorators = {
        resendEmailVerificationEvent: [{ type: Output }],
        enforceAuthentication: [{ type: Input }]
    };
    return VerdocsTokenGuardDirective;
}());
export { VerdocsTokenGuardDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verifyEmailDialogIsOpen;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.emailAddress;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.idTokenSubscription;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.resendEmailVerificationEvent;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.enforceAuthentication;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthGuard;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsStateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.verdocsAuthService;
    /**
     * @type {?}
     * @private
     */
    VerdocsTokenGuardDirective.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhbHN0ZXItZ3VhcmQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHZlcmRvY3MvdG9rZW5zLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVhbHN0ZXItZ3VhcmQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsWUFBWSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQWEsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRzlEO0lBV0Usb0NBQ1UsTUFBaUIsRUFDa0MsZ0JBQXlDLEVBQzdDLG1CQUF3QyxFQUN6QyxrQkFBc0MsRUFDL0QsUUFBUTtRQUo3QixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQ2tDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBeUI7UUFDN0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN6Qyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQy9ELGFBQVEsR0FBUixRQUFRLENBQUE7UUFaL0IsNEJBQXVCLEdBQUcsS0FBSyxDQUFDO1FBRWhDLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFL0IsaUNBQTRCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQVVwRSxDQUFDOzs7O0lBRUQsNkNBQVE7OztJQUFSO1FBQUEsaUJBWUM7UUFYQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQixDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLGNBQWM7WUFDaEcsS0FBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDO1FBQzNDLENBQUMsRUFBQyxDQUFDO1FBQ0gsV0FBVzs7O1FBQUM7WUFDVixJQUFJLEtBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFDOUIsS0FBSSxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixFQUFFLENBQUM7YUFDN0M7WUFDRCxJQUFJLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLEVBQUUsRUFBRTtnQkFDN0MsS0FBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7YUFDL0I7UUFDSCxDQUFDLEdBQUUsSUFBSSxDQUFDLENBQUM7SUFDWCxDQUFDOzs7O0lBRUQsZ0RBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Ozs7O0lBRU8sMkRBQXNCOzs7O0lBQTlCO1FBQUEsaUJBaUJDOztZQWhCTyxhQUFhLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixFQUFFO1FBQ3JFLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3ZGLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7O2dCQUM5QixVQUFVLEdBQTBCO2dCQUN4Qyx1QkFBdUI7OztnQkFBRSxjQUFNLE9BQUEsS0FBSSxDQUFDLHVCQUF1QixFQUFFLEVBQTlCLENBQThCLENBQUE7Z0JBQzdELFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTthQUNoQzs7Z0JBQ0ssaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7Z0JBQ3JFLElBQUksRUFBRSxVQUFVO2dCQUNoQixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDO1lBQ0YsaUJBQWlCLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUzs7O1lBQUM7Z0JBQ3hDLEtBQUksQ0FBQyx1QkFBdUIsR0FBRyxLQUFLLENBQUM7Z0JBQ3JDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQixDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVELDREQUF1Qjs7O0lBQXZCO1FBQ0UsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksRUFBRSxDQUFDO0lBQzNDLENBQUM7O2dCQTNERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7Ozs7Z0JBVlEsU0FBUztnQkFHVCx1QkFBdUIsdUJBa0IzQixNQUFNLFNBQUMsVUFBVTs7O3dCQUFDLGNBQU0sT0FBQSx1QkFBdUIsRUFBdkIsQ0FBdUIsRUFBQztnQkFqQjVDLG1CQUFtQix1QkFrQnZCLE1BQU0sU0FBQyxVQUFVOzs7d0JBQUMsY0FBTSxPQUFBLG1CQUFtQixFQUFuQixDQUFtQixFQUFDO2dCQWpCeEMsa0JBQWtCLHVCQWtCdEIsTUFBTSxTQUFDLFVBQVU7Ozt3QkFBQyxjQUFNLE9BQUEsa0JBQWtCLEVBQWxCLENBQWtCLEVBQUM7Z0RBQzNDLE1BQU0sU0FBQyxXQUFXOzs7K0NBUnBCLE1BQU07d0NBQ04sS0FBSzs7SUFtRFIsaUNBQUM7Q0FBQSxBQTVERCxJQTREQztTQXpEWSwwQkFBMEI7Ozs7OztJQUNyQyw2REFBd0M7Ozs7O0lBQ3hDLGtEQUE2Qjs7Ozs7SUFDN0IseURBQWlEOzs7OztJQUVqRCxrRUFBb0U7Ozs7O0lBQ3BFLDJEQUF1Qzs7Ozs7SUFHckMsNENBQXlCOzs7OztJQUN6QixzREFBb0c7Ozs7O0lBQ3BHLHlEQUErRjs7Ozs7SUFDL0Ysd0RBQTRGOzs7OztJQUM1Riw4Q0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgSW5wdXQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBJbmplY3QsIGZvcndhcmRSZWYsIE9uRGVzdHJveSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE1hdERpYWxvZyB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVmVyaWZ5RW1haWxEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuLi9kaWFsb2dzL3ZlcmlmeS1lbWFpbC1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aGd1YXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc0F1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEVtYWlsVmVyaWZpY2F0aW9uRGF0YSB9IGZyb20gJy4uL21vZGVscy9lbWFpbC12ZXJpZmljYXRpb24tZGF0YS5tb2RlbCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t2ZXJkb2NzLWd1YXJkXSdcbn0pXG5leHBvcnQgY2xhc3MgVmVyZG9jc1Rva2VuR3VhcmREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgdmVyaWZ5RW1haWxEaWFsb2dJc09wZW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBlbWFpbEFkZHJlc3M6IHN0cmluZztcbiAgcHJpdmF0ZSBpZFRva2VuU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIEBPdXRwdXQoKSBwcml2YXRlIHJlc2VuZEVtYWlsVmVyaWZpY2F0aW9uRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBJbnB1dCgpIHByaXZhdGUgZW5mb3JjZUF1dGhlbnRpY2F0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZGlhbG9nOiBNYXREaWFsb2csXG4gICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlKSkgcHJpdmF0ZSB2ZXJkb2NzQXV0aEd1YXJkOiBWZXJkb2NzQXV0aEd1YXJkU2VydmljZSxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVmVyZG9jc1N0YXRlU2VydmljZSkpIHByaXZhdGUgdmVyZG9jc1N0YXRlU2VydmljZTogVmVyZG9jc1N0YXRlU2VydmljZSxcbiAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gVmVyZG9jc0F1dGhTZXJ2aWNlKSkgcHJpdmF0ZSB2ZXJkb2NzQXV0aFNlcnZpY2U6IFZlcmRvY3NBdXRoU2VydmljZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtXG4gICkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pZFRva2VuU3Vic2NyaXB0aW9uID0gdGhpcy52ZXJkb2NzU3RhdGVTZXJ2aWNlLmRlY29kZWRJZFRva2VuU3ViamVjdC5zdWJzY3JpYmUoZGVjb2RlZElkVG9rZW4gPT4ge1xuICAgICAgdGhpcy5lbWFpbEFkZHJlc3MgPSBkZWNvZGVkSWRUb2tlbi5lbWFpbDtcbiAgICB9KTtcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5lbmZvcmNlQXV0aGVudGljYXRpb24pIHtcbiAgICAgICAgdGhpcy52ZXJkb2NzQXV0aEd1YXJkLmNoZWNrQXV0aGVudGljYXRpb24oKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnZlcmRvY3NBdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICB0aGlzLmNoZWNrRW1haWxWZXJpZmljYXRpb24oKTtcbiAgICAgIH1cbiAgICB9LCA1MDAwKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuaWRUb2tlblN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0VtYWlsVmVyaWZpY2F0aW9uKCkge1xuICAgIGNvbnN0IGVtYWlsVmVyaWZpZWQgPSB0aGlzLnZlcmRvY3NTdGF0ZVNlcnZpY2UuZ2V0RW1haWxWZXJpZmljYXRpb24oKVxuICAgIGlmICghZW1haWxWZXJpZmllZCAmJiAhdGhpcy52ZXJpZnlFbWFpbERpYWxvZ0lzT3BlbiAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtKSkge1xuICAgICAgdGhpcy52ZXJpZnlFbWFpbERpYWxvZ0lzT3BlbiA9IHRydWU7XG4gICAgICBjb25zdCBlbWFpbF9kYXRhOiBFbWFpbFZlcmlmaWNhdGlvbkRhdGEgPSB7XG4gICAgICAgIHJlc2VuZEVtYWlsVmVyaWZpY2F0aW9uOiAoKSA9PiB0aGlzLnJlc2VuZEVtYWlsVmVyaWZpY2F0aW9uKCksXG4gICAgICAgIGVtYWlsQWRkcmVzczogdGhpcy5lbWFpbEFkZHJlc3NcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZlcmlmeUVtYWlsRGlhbG9nID0gdGhpcy5kaWFsb2cub3BlbihWZXJpZnlFbWFpbERpYWxvZ0NvbXBvbmVudCwge1xuICAgICAgICBkYXRhOiBlbWFpbF9kYXRhLFxuICAgICAgICBkaXNhYmxlQ2xvc2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdmVyaWZ5RW1haWxEaWFsb2cuYWZ0ZXJDbG9zZWQoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnZlcmlmeUVtYWlsRGlhbG9nSXNPcGVuID0gZmFsc2U7XG4gICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmVzZW5kRW1haWxWZXJpZmljYXRpb24oKSB7XG4gICAgdGhpcy5yZXNlbmRFbWFpbFZlcmlmaWNhdGlvbkV2ZW50LmVtaXQoKTtcbiAgfVxufVxuIl19