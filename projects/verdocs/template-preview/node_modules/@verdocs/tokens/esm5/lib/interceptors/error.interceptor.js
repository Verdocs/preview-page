/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { HttpErrorResponse } from '@angular/common/http';
import { catchError } from 'rxjs/operators';
import { VerdocsAuthGuardService } from '../services/authguard.service';
import { VerdocsStateService } from '../services/state.service';
import { throwError } from 'rxjs';
var VerdocsErrorInterceptor = /** @class */ (function () {
    function VerdocsErrorInterceptor(injector, platform) {
        this.injector = injector;
        this.platform = platform;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    VerdocsErrorInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        var _this = this;
        return next.handle(request).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err instanceof HttpErrorResponse) {
                if (err['status'] === 403) {
                    _this.stateService = _this.injector.get(VerdocsStateService);
                    /** @type {?} */
                    var redirectUrl = void 0;
                    if (isPlatformBrowser(_this.platform) && err['error'] && err['error']['reason'] === 'expired') {
                        redirectUrl = window.location.href;
                    }
                    _this.authGuardService = _this.injector.get(VerdocsAuthGuardService);
                    _this.authGuardService.signOut(redirectUrl);
                }
                return throwError(err);
            }
        })));
    };
    VerdocsErrorInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    VerdocsErrorInterceptor.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return VerdocsErrorInterceptor;
}());
export { VerdocsErrorInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.authGuardService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.stateService;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    VerdocsErrorInterceptor.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdmVyZG9jcy90b2tlbnMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2Vycm9yLmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ25ELE9BQU8sRUFJTCxpQkFBaUIsRUFDbEIsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdsQztJQUlFLGlDQUNVLFFBQWtCLEVBQ0csUUFBUTtRQUQ3QixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ0csYUFBUSxHQUFSLFFBQVEsQ0FBQTtJQUNuQyxDQUFDOzs7Ozs7SUFDTCwyQ0FBUzs7Ozs7SUFBVCxVQUFVLE9BQXlCLEVBQUUsSUFBaUI7UUFBdEQsaUJBaUJDO1FBaEJDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzlCLFVBQVU7Ozs7UUFBQyxVQUFBLEdBQUc7WUFDWixJQUFJLEdBQUcsWUFBWSxpQkFBaUIsRUFBRTtnQkFDcEMsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFO29CQUN6QixLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7O3dCQUN2RCxXQUFXLFNBQUE7b0JBQ2YsSUFBSSxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLEVBQUU7d0JBQzVGLFdBQVcsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQTtxQkFDbkM7b0JBQ0QsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7b0JBQ25FLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzVDO2dCQUNELE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQXpCRixVQUFVOzs7O2dCQWZVLFFBQVE7Z0RBcUJ4QixNQUFNLFNBQUMsV0FBVzs7SUFvQnZCLDhCQUFDO0NBQUEsQUExQkQsSUEwQkM7U0F6QlksdUJBQXVCOzs7Ozs7SUFDbEMsbURBQWtEOzs7OztJQUNsRCwrQ0FBMEM7Ozs7O0lBRXhDLDJDQUEwQjs7Ozs7SUFDMUIsMkNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJ1xuaW1wb3J0IHtcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwSW50ZXJjZXB0b3IsXG4gIEh0dHBFcnJvclJlc3BvbnNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFZlcmRvY3NBdXRoR3VhcmRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aGd1YXJkLnNlcnZpY2UnO1xuaW1wb3J0IHsgVmVyZG9jc1N0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3N0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBWZXJkb2NzRXJyb3JJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgYXV0aEd1YXJkU2VydmljZTogVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2U7XG4gIHByaXZhdGUgc3RhdGVTZXJ2aWNlOiBWZXJkb2NzU3RhdGVTZXJ2aWNlO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtXG4gICkgeyB9XG4gIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcikge1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXF1ZXN0KS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAoZXJyWydzdGF0dXMnXSA9PT0gNDAzKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KFZlcmRvY3NTdGF0ZVNlcnZpY2UpO1xuICAgICAgICAgICAgbGV0IHJlZGlyZWN0VXJsO1xuICAgICAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm0pICYmIGVyclsnZXJyb3InXSAmJiBlcnJbJ2Vycm9yJ11bJ3JlYXNvbiddID09PSAnZXhwaXJlZCcpIHtcbiAgICAgICAgICAgICAgcmVkaXJlY3RVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hdXRoR3VhcmRTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoVmVyZG9jc0F1dGhHdWFyZFNlcnZpY2UpO1xuICAgICAgICAgICAgdGhpcy5hdXRoR3VhcmRTZXJ2aWNlLnNpZ25PdXQocmVkaXJlY3RVcmwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn0iXX0=