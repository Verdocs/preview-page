import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CookieService } from 'ngx-cookie';
import { ReplaySubject } from 'rxjs';
export declare class VerdocsStateService {
    private cookieService;
    private http;
    private injector;
    private platform;
    private static RACCOUNT_COOKIE_NAME;
    private static SIGNER_TOKEN_COOKIE_NAME;
    private static COOKIE_NAME_SUFFIX;
    private static ACCESS_TOKEN_NAME;
    private static ID_TOKEN_NAME;
    private static TOKEN_NAMESPACE;
    private loginURL;
    private cookieName;
    private production;
    private accessToken;
    private idToken;
    private timerActive;
    private domain;
    private cookieConfig;
    private cookies;
    private tokenConfig;
    private authenticationWatcher;
    accessList: string[];
    decodedIdTokenSubject: ReplaySubject<any>;
    constructor(cookieService: CookieService, http: HttpClient, injector: Injector, platform: any);
    init(): void;
    getDomain(): string;
    watchAuthentication(): void;
    endWatchAuthentication(): void;
    getAccountCookieObject(): Object;
    getVerdocsCookieObject(): Object;
    getAccessToken(): string;
    getVerdocsAccessToken(): string;
    getAccountAccessToken(): string;
    getIDToken(): string;
    getLoginURL(): string;
    setTimer(state: boolean): void;
    getUserId(): string | null;
    getAppUserId(appName?: string): string | null;
    updateCookie(key: string, value: string, cookieName?: string): void;
    updateTokens(rSecureBackend: any): import("rxjs").Observable<any[]>;
    hasCookie(): boolean;
    getAccessList(): string[];
    getEmailVerification(): boolean;
    hasAccessTo(clientName: string): boolean;
    storeOtherCookie(key: any, value: any): void;
    getOtherCookie(key: any): Object;
    getRCookie(key: string): string;
    getOtherCookieObject(key: any): Object;
    removeRCookie(key: any): void;
    removeRCookies(): void;
    removeIntercomCookie(): void;
    setTokens(tokens: any): void;
    private getrAccountCookieObject;
    private getAllCookies;
    private tokenToObject;
    private setCookie;
    private getTokens;
    getRAccountRoles(): any;
    getPlans(): any;
}
